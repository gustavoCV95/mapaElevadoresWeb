Estrutura de pastas:

    Diretório: C:\Users\F0354738\Desktop\temp2


Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
d-----        20/10/2025     15:35                app
d-----        20/10/2025     15:11                static
d-----        20/10/2025     15:09                templates
-a----        16/10/2025     15:09            623 .env
-a----        16/10/2025     14:22            568 .env.example
-a----        16/10/2025     16:38            828 app_new.py
-a----        30/08/2025     14:19            340 config.py.example
-a----        29/08/2025     06:36           2381 credenciais.json
-a----        31/08/2025     07:18            637 credentials.json.example
-a----        20/10/2025     15:39            505 requirements.txt
-a----        13/10/2025     16:37           6226 sheets_api.py


    Diretório: C:\Users\F0354738\Desktop\temp2\app


Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
d-----        20/10/2025     15:35                api
d-----        20/10/2025     15:35                blueprints
d-----        20/10/2025     15:11                config
d-----        20/10/2025     15:11                models
d-----        20/10/2025     15:11                services
d-----        20/10/2025     15:49                utils
-a----        20/10/2025     15:50           6417 factory.py
-a----        20/10/2025     15:50            189 __init__.py


    Diretório: C:\Users\F0354738\Desktop\temp2\app\api


Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
-a----        20/10/2025     15:39           2303 elevators.py
-a----        20/10/2025     15:40           4620 kpis.py
-a----        16/10/2025     13:09             49 __init__.py


    Diretório: C:\Users\F0354738\Desktop\temp2\app\blueprints


Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
-a----        20/10/2025     16:10          11351 auth.py
-a----        20/10/2025     15:41          14582 dashboard.py
-a----        20/10/2025     15:41           5733 kpis.py
-a----        20/10/2025     15:42           2491 test.py
-a----        20/10/2025     15:42           5284 test_auth.py
-a----        20/10/2025     15:42           3662 test_services.py
-a----        20/10/2025     15:42            248 __init__.py


    Diretório: C:\Users\F0354738\Desktop\temp2\app\config


Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
-a----        20/10/2025     15:43           2455 base.py
-a----        20/10/2025     15:43            822 development.py
-a----        16/10/2025     13:34            866 production.py
-a----        16/10/2025     14:19            728 __init__.py


    Diretório: C:\Users\F0354738\Desktop\temp2\app\models


Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
-a----        20/10/2025     17:26           4597 elevator.py
-a----        20/10/2025     15:44           2424 kpi.py
-a----        17/10/2025     17:00            145 __init__.py


    Diretório: C:\Users\F0354738\Desktop\temp2\app\services


Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
-a----        20/10/2025     15:47           3447 auth_service.py
-a----        20/10/2025     15:47           2952 cache_service.py
-a----        20/10/2025     15:47          18323 data_processor.py
-a----        20/10/2025     15:48           1208 sheets_service.py
-a----        20/10/2025     15:48           2202 stats_service.py
-a----        16/10/2025     15:03            278 __init__.py


    Diretório: C:\Users\F0354738\Desktop\temp2\app\utils


Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
-a----        20/10/2025     15:49           5854 auth_decorators.py
-a----        20/10/2025     15:49           1843 auth_helpers.py
-a----        20/10/2025     15:49           2303 helpers.py
-a----        20/10/2025     15:50           1219 __init__.py


    Diretório: C:\Users\F0354738\Desktop\temp2\static


Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
d-----        20/10/2025     15:11                css
d-----        20/10/2025     15:38                js


    Diretório: C:\Users\F0354738\Desktop\temp2\static\css


Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
-a----        26/09/2025     06:38           1447 style.css


    Diretório: C:\Users\F0354738\Desktop\temp2\static\js


Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
-a----        20/10/2025     17:33          15471 dashboard_v2.js
-a----        20/10/2025     15:59          26264 filtros_mapa.js


    Diretório: C:\Users\F0354738\Desktop\temp2\templates


Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
d-----        20/10/2025     15:38                v2
-a----        20/10/2025     15:56           6239 base.html
-a----        20/10/2025     15:56          44275 index_nativo.html
-a----        20/10/2025     15:57          38226 kpis.html
-a----        20/10/2025     15:58           9000 login.html


    Diretório: C:\Users\F0354738\Desktop\temp2\templates\v2


Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
-a----        20/10/2025     17:32          22711 dashboard.html
-a----        20/10/2025     15:55          44331 kpis.html




--- Início do código: dashboard.html ---
<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard v2.0 - Sistema de Elevadores</title>
    
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <!-- Leaflet CSS -->
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css">
    
    <style>
        body { background-color: #f8f9fa; }
        .navbar-brand { font-weight: bold; }
        .version-badge { 
            background: linear-gradient(45deg, #28a745, #20c997); 
            color: white; 
            padding: 4px 8px; 
            border-radius: 12px; 
            font-size: 12px; 
            margin-left: 10px;
        }
        .card { 
            border: none; 
            box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075); 
            margin-bottom: 1rem; 
        }
        .card-header { 
            background-color: #fff; 
            border-bottom: 1px solid #dee2e6; 
            font-weight: 600; 
        }
        .stats-card { transition: transform 0.2s; }
        .stats-card:hover { transform: translateY(-2px); }
        .map-container { 
            height: 500px; 
            border-radius: 0.375rem; 
            overflow: hidden; 
        }
        .filter-section { 
            max-height: 300px; 
            overflow-y: auto; 
        }
        .comparison-banner {
            background: linear-gradient(135deg, #17a2b8, #138496);
            color: white;
            padding: 15px;
            border-radius: 10px;
            margin-bottom: 20px;
        }
        /* NOVO: Estilos para estatÃƒÂ­sticas detalhadas */
        .stats-list {
            max-height: 200px;
            overflow-y: auto;
            font-size: 14px;
        }
        .stats-list > div {
            padding: 2px 0;
            border-bottom: 1px solid #f0f0f0;
        }
        .stats-list > div:last-child {
            border-bottom: none;
        }
        #stats-detalhadas .card-body {
            transition: all 0.3s ease;
        }
    </style>
</head>
<body>
    <!-- Navbar -->
    <nav class="navbar navbar-expand-lg navbar-dark bg-success">
        <div class="container-fluid">
            <a class="navbar-brand" href="#">
                <i class="fas fa-building"></i> Sistema de Elevadores
                <span class="version-badge">v2.0 Modular</span>
            </a>
            
            <div class="navbar-nav ms-auto">
                <span class="navbar-text me-3">
                    <i class="fas fa-user"></i> {{ usuario }}
                </span>
                <a class="nav-link" href="{{ url_for('auth.logout') }}">
                    <i class="fas fa-sign-out-alt"></i> Sair
                </a>
            </div>
        </div>
    </nav>

    <div class="container-fluid mt-3">
        <!-- Banner de ComparaÃ§Ã£o -->
        <div class="comparison-banner">
            <div class="row align-items-center">
                <div class="col-md-8">
                    <h5><i class="fas fa-rocket"></i> Nova Arquitetura Modular</h5>
                    <p class="mb-0">VocÃª estÃ¡ usando a versÃ£o 2.0 com arquitetura modular. 
                    Compare com o <a href="http://localhost:5000"  class="text-white"><u>sistema atual</u></a></p>
                </div>
                <div class="col-md-4 text-end">
                    <button class="btn btn-light btn-sm" onclick="atualizarDados()">
                        <i class="fas fa-sync-alt"></i> Atualizar Dados
                    </button>
                </div>
            </div>
        </div>

        {% if erro %}
        <!-- Erro -->
        <div class="alert alert-danger">
            <h4><i class="fas fa-exclamation-triangle"></i> Erro</h4>
            <p>{{ erro }}</p>
            <button class="btn btn-danger" onclick="location.reload()">
                <i class="fas fa-redo"></i> Tentar Novamente
            </button>
        </div>
        {% else %}
        
       <!-- Cards de EstatÃƒÂ­sticas -->
        <div class="row mb-4 stats-row" id="stats-cards">
            <div class="col-md-12">
                <div class="d-flex flex-wrap justify-content-between">
                    <div class="flex-fill mx-1">
                        <div class="card stats-card bg-primary text-white">
                            <div class="card-body text-center py-2">
                                <i class="fas fa-building fa-lg mb-1"></i>
                                <h5 id="stat-predios">{{ stats.total_predios if stats else 0 }}</h5>
                                <p class="mb-0 small">PrÃ©dios</p>
                            </div>
                        </div>
                    </div>
                    
                    <div class="flex-fill mx-1">
                        <div class="card stats-card bg-success text-white">
                            <div class="card-body text-center py-2">
                                <i class="fas fa-elevator fa-lg mb-1"></i>
                                <h5 id="stat-elevadores">{{ stats.total_elevadores if stats else 0 }}</h5>
                                <p class="mb-0 small">Elevadores</p>
                            </div>
                        </div>
                    </div>
                    
                    <div class="flex-fill mx-1">
                        <div class="card stats-card bg-info text-white">
                            <div class="card-body text-center py-2">
                                <i class="fas fa-map-marker-alt fa-lg mb-1"></i>
                                <h5 id="stat-cidades">{{ stats.cidades if stats else 0 }}</h5>
                                <p class="mb-0 small">Cidades</p>
                            </div>
                        </div>
                    </div>
                    
                    <div class="flex-fill mx-1">
                        <div class="card stats-card bg-secondary text-white">
                            <div class="card-body text-center py-2">
                                <i class="fas fa-map fa-lg mb-1"></i>
                                <h5 id="stat-regioes">{{ stats.regioes if stats else 0 }}</h5>
                                <p class="mb-0 small">RegiÃµes</p>
                            </div>
                        </div>
                    </div>
                    
                    <div class="flex-fill mx-1">
                        <div class="card stats-card bg-success text-white">
                            <div class="card-body text-center py-2">
                                <i class="fas fa-check-circle fa-lg mb-1"></i>
                                <h5 id="stat-ativos">{{ stats.em_atividade if stats else 0 }}</h5>
                                <p class="mb-0 small">Ativos</p>
                            </div>
                        </div>
                    </div>
                    
                    <div class="flex-fill mx-1">
                        <div class="card stats-card bg-warning text-white">
                            <div class="card-body text-center py-2">
                                <i class="fas fa-times-circle fa-lg mb-1"></i>
                                <h5 id="stat-suspensos">{{ stats.elevadores_suspensos if stats else 0 }}</h5>
                                <p class="mb-0 small">Suspensos</p>
                            </div>
                        </div>
                    </div>

                    <div class="flex-fill mx-1">
                        <div class="card stats-card bg-danger text-white">
                             <div class="card-body text-center py-2">
                                <i class="fas fa-exclamation-triangle fa-lg mb-1"></i>
                                 <h5 id="stat-parados">{{ stats.elevadores_parados if stats else 0 }}</h5>
                                 <p class="mb-0 small">Parados</p>
                             </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>


        <div class="row">
            <!-- Mapa -->
            <div class="col-md-9">
                <div class="card">
                    <div class="card-header">
                        <h5><i class="fas fa-map-marked-alt"></i> Mapa dos Elevadores</h5>
                    </div>
                    <div class="card-body p-0">
                        <div id="mapa" class="map-container"></div>
                    </div>
                </div>
                
                <!-- NOVO: EstatÃ­Â­sticas Detalhadas (abaixo do mapa, mesma coluna) -->
                <div class="card mt-3">
                    <div class="card-header">
                        <h5><i class="fas fa-chart-bar"></i> EstatÃ­sticas Detalhadas</h5>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <!-- Por Tipo -->
                            <div class="col-md-3">
                                <h6><i class="fas fa-building"></i> Por Tipo</h6>
                                <div id="stats-por-tipo" class="stats-list">
                                    {% if stats_detalhadas and stats_detalhadas.por_tipo %}
                                        {% for tipo, quantidade in stats_detalhadas.por_tipo.items() %}
                                        <div class="d-flex justify-content-between">
                                            <span>{{ tipo }}:</span>
                                            <strong>{{ quantidade }}</strong>
                                        </div>
                                        {% endfor %}
                                    {% else %}
                                        <div class="text-muted">Carregando...</div>
                                    {% endif %}
                                </div>
                            </div>
                            
                            <!-- Por RegiÃ£o -->
                            <div class="col-md-3">
                                <h6><i class="fas fa-map"></i> Por RegiÃ£o</h6>
                                <div id="stats-por-regiao" class="stats-list">
                                    {% if stats_detalhadas and stats_detalhadas.por_regiao %}
                                        {% for regiao, quantidade in stats_detalhadas.por_regiao.items() %}
                                        <div class="d-flex justify-content-between">
                                            <span>{{ regiao }}:</span>
                                            <strong>{{ quantidade }}</strong>
                                        </div>
                                        {% endfor %}
                                    {% else %}
                                        <div class="text-muted">Carregando...</div>
                                    {% endif %}
                                </div>
                            </div>
                            
                            <!-- Por Marca -->
                            <div class="col-md-3">
                                <h6><i class="fas fa-tag"></i> Por Marca</h6>
                                <div id="stats-por-marca" class="stats-list">
                                    {% if stats_detalhadas and stats_detalhadas.por_marca %}
                                        {% for marca, quantidade in stats_detalhadas.por_marca.items() %}
                                        <div class="d-flex justify-content-between">
                                            <span>{{ marca }}:</span>
                                            <strong>{{ quantidade }}</strong>
                                        </div>
                                        {% endfor %}
                                    {% else %}
                                        <div class="text-muted">Carregando...</div>
                                    {% endif %}
                                </div>
                            </div>
                            
                            <!-- Por Status -->
                            <div class="col-md-3">
                                <h6><i class="fas fa-traffic-light"></i> Por Status</h6>
                                <div id="stats-por-status" class="stats-list">
                                    {% if stats_detalhadas and stats_detalhadas.por_status %}
                                        {% for status, quantidade in stats_detalhadas.por_status.items() %}
                                        <div class="d-flex justify-content-between">
                                            <span class="{% if status == 'Em atividade' %}text-success{% elif status == 'Parados' %}text-danger{% else %}text-warning{% endif %}">
                                                {{ status }}:
                                            </span>
                                            <strong>{{ quantidade }}</strong>
                                        </div>
                                        {% endfor %}
                                    {% else %}
                                        <div class="text-muted">Carregando...</div>
                                    {% endif %}
                                </div>
                            </div>
                        </div>
                        
                        <!-- NOVO: Elevadores Parados (se houver) -->
                        <div class="row mt-4" id="elevadores-parados-section" style="display: none;">
                            <div class="col-12">
                                <h6><i class="fas fa-exclamation-triangle text-danger"></i> Elevadores Parados</h6>
                                <div class="table-responsive">
                                    <table class="table table-sm table-striped">
                                        <thead>
                                            <tr>
                                                <th>Unidade</th>
                                                <th>Cidade</th>
                                                <th>Tipo</th>
                                                <th>RegiÃ£o</th>
                                                <th>Parados</th>
                                                <th>Total</th>
                                                <th>Marca</th>
                                            </tr>
                                        </thead>
                                        <tbody id="elevadores-parados-tbody">
                                            <!-- Preenchido via JavaScript -->
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Filtros (agora com altura total) -->
            <div class="col-md-3">
                <div class="card h-100">
                    <div class="card-header">
                        <h5><i class="fas fa-filter"></i> Filtros</h5>
                    </div>
                    <div class="card-body">
                        <!-- Contador de Resultados -->
                        <div class="alert alert-info" id="contador-resultados">
                            <strong>Total:</strong> 
                            <span id="total-elevadores-filtro">{{ stats.total_elevadores if stats else 0 }}</span> elevadores em 
                            <span id="total-locais-filtro">{{ stats.total_predios if stats else 0 }}</span> locais
                        </div>

                        <!-- BotÃƒÂµes de AÃ§Ã£o -->
                        <div class="mb-3">
                            <div class="row">
                                <div class="col-6">
                                    <button class="btn btn-success btn-sm w-100 mb-2" onclick="aplicarFiltros()">
                                        <i class="fas fa-search"></i> Aplicar
                                    </button>
                                </div>
                                <div class="col-6">
                                    <button class="btn btn-info btn-sm w-100 mb-2" onclick="selecionarTodos()">
                                        <i class="fas fa-check-double"></i> Todos
                                    </button>
                                </div>
                            </div>
                            <button class="btn btn-secondary btn-sm w-100" onclick="limparFiltros()">
                                <i class="fas fa-eraser"></i> Limpar Filtros
                            </button>
                        </div>

                        <!-- Filtros por Tipo -->
                        {% if tipos_unicos %}
                        <div class="mb-3">
                            <h6><i class="fas fa-building"></i> Tipo</h6>
                            <div class="filter-section">
                                {% for tipo in tipos_unicos %}
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" 
                                           id="check-tipo-{{ loop.index }}" value="{{ tipo }}">
                                    <label class="form-check-label" for="check-tipo-{{ loop.index }}">
                                        {{ tipo }}
                                    </label>
                                </div>
                                {% endfor %}
                            </div>
                        </div>
                        {% endif %}

                        <!-- Filtros por RegiÃ£o -->
                        {% if regioes_unicas %}
                        <div class="mb-3">
                            <h6><i class="fas fa-map"></i> RegiÃ£o</h6>
                            <div class="filter-section">
                                {% for regiao in regioes_unicas %}
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" 
                                           id="check-regiao-{{ loop.index }}" value="{{ regiao }}">
                                    <label class="form-check-label" for="check-regiao-{{ loop.index }}">
                                        {{ regiao }}
                                    </label>
                                </div>
                                {% endfor %}
                            </div>
                        </div>
                        {% endif %}

                        <!-- Filtros por SituaÃ§Ã£o -->
                        <div class="mb-3">
                            <h6><i class="fas fa-traffic-light"></i> SituaÃ§Ã£o</h6>
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" 
                                       id="check-situacao-ativos" value="ativos">
                                <label class="form-check-label" for="check-situacao-ativos">
                                    <span class="text-success">Ã¢â€”Â</span> Ativos
                                </label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" 
                                       id="check-situacao-suspensos" value="suspensos">
                                <label class="form-check-label" for="check-situacao-suspensos">
                                    <span class="text-warning">Ã¢â€”Â</span> Suspensos
                                </label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" 
                                       id="check-situacao-parados" value="parados">
                                <label class="form-check-label" for="check-situacao-parados">
                                    <span class="text-danger">Ã¢â€”Â</span> Parados
                                </label>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        {% endif %}
    </div>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"></script>
    <script>
    // Dados iniciais do GeoJSON passados do backend via Jinja2
    const initialGeojsonData = {{ geojson_data | tojson if geojson_data else '{"type": "FeatureCollection", "features": []}' }};
    const initialStats = {{ stats | tojson if stats else '{}' }};
    const initialDetailedStats = {{ stats_detalhadas | tojson if stats_detalhadas else '{}' }};
    // Se houver outras variÃƒÂ¡veis Jinja2 usadas diretamente no JavaScript, passe-as aqui tambÃƒÂ©m.
    
    // VariÃƒÂ¡veis globais para os tipos ÃƒÂºnicos, regiÃƒÂµes ÃƒÂºnicas, etc.
    // O Jinja2 jÃƒÂ¡ as estÃƒÂ¡ passando para o template.
    // Para acessÃƒÂ¡-las no JS externo, vocÃƒÂª pode passÃƒÂ¡-las como no exemplo abaixo,
    // ou fazer chamadas de API para obtÃƒÂª-las se elas mudarem dinamicamente.
    // Por enquanto, vamos considerar que sÃ£o carregadas uma vez.
    const uniqueTypes = {{ tipos_unicos | tojson | safe }};
    const uniqueRegions = {{ regioes_unicas | tojson | safe }};
    const uniqueBrands = {{ marcas_unicas | tojson | safe }};
    const uniqueCompanies = {{ empresas_unicas | tojson | safe }};
</script>

<!-- Script customizado para o dashboard v2 -->
<script src="{{ url_for('static', filename='js/dashboard_v2.js') }}"></script>

</body>
</html>
--- Fim do código: dashboard.html ---

--- Início do código: kpis.html ---
{% extends "base.html" %}

{# CORRIGIDO: Certifique-se de que hÃƒÂ¡ APENAS UMA definiÃ§Ã£o de block title #}
{% block title %}KPIs de ManutenÃ§Ã£o - Sistema de Elevadores TJ/MG{% endblock %}

{% block extra_head %}
<!-- Chart.js -->
{# CORRIGIDO: URLs atualizadas para Chart.js v3.x e seus adaptadores #}
<script src="https://cdn.jsdelivr.net/npm/chart.js@3.7.0/dist/chart.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns@3.0.0/dist/chartjs-adapter-date-fns.bundle.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/date-fns@2.30.0/index.min.js"></script>
{# Opcional: Se precisar de um locale especÃƒÂ­fico para date-fns, pode adicionar aqui. #}
{# Chart.js v3 usa a config global para locale do date-fns adapter. #}
<script>
    // Configura locale global para Chart.js date-fns adapter
    Chart.defaults.plugins.tooltip.usePointStyle = true; // Estilo de tooltip mais moderno
    Chart.defaults.font.family = "'Segoe UI', 'Roboto', 'Helvetica Neue', Arial, sans-serif";
    Chart.defaults.color = '#333'; // Cor padrÃ£o do texto nos grÃƒÂ¡ficos
</script>
{% endblock %}

{% block content %}
<div class="row">
    <div class="col-12">
        <h1 class="mb-4">
            <i class="fas fa-chart-line"></i> 
            KPIs de ManutenÃ§Ã£o - Elevadores TJ/MG
        </h1>
    </div>
</div>

{% if erro %}
    <div class="alert alert-danger" role="alert">
        <i class="fas fa-exclamation-triangle"></i> {{ erro }}
    </div>
{% else %}
    <!-- Filtros AvanÃ§ados -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5><i class="fas fa-filter"></i> Filtros</h5>
                    <div>
                        <button class="btn btn-success btn-sm me-2" onclick="aplicarFiltros()">
                            <i class="fas fa-search"></i> Aplicar Filtros
                        </button>
                        <button class="btn btn-secondary btn-sm me-2" onclick="limparFiltrosKPIs()">
                            <i class="fas fa-eraser"></i> Limpar
                        </button>
                        <button class="btn btn-info btn-sm" onclick="atualizarDados()"> {# Esta funÃ§Ã£o chamarÃƒÂ¡ o /v2/kpis/atualizar-kpis #}
                            <i class="fas fa-sync-alt"></i> Atualizar
                        </button>
                    </div>
                </div>
                <div class="card-body">
                    <!-- Primeira linha: Filtros de Data -->
                    <div class="row mb-3">
                        <div class="col-md-3">
                            <label class="form-label"><i class="fas fa-calendar"></i> Data de InÃƒÂ­cio</label>
                            <input type="date" class="form-control" id="data-inicio">
                        </div>
                        <div class="col-md-3">
                            <label class="form-label"><i class="fas fa-calendar"></i> Data de Fim</label>
                            <input type="date" class="form-control" id="data-fim">
                        </div>
                        <div class="col-md-6">
                            <label class="form-label"><i class="fas fa-clock"></i> PerÃƒÂ­odo Predefinido</label>
                            <select class="form-select" id="filtro-periodo" onchange="selecionarPeriodoPredefinido()">
                                <option value="">Selecione um perÃƒÂ­odo...</option>
                                <option value="ultima-semana">ÃƒÅ¡ltima Semana</option>
                                <option value="ultimo-mes">ÃƒÅ¡ltimo MÃƒÂªs</option>
                                <option value="ultimos-3-meses">ÃƒÅ¡ltimos 3 Meses</option>
                                <option value="ultimos-6-meses">ÃƒÅ¡ltimos 6 Meses</option>
                                <option value="ultimo-ano">ÃƒÅ¡ltimo Ano</option>
                                <option value="ultimos-2-anos">ÃƒÅ¡ltimos 2 Anos</option>
                                <option value="ultimos-5-anos">ÃƒÅ¡ltimos 5 Anos</option>
                                <option value="todo-periodo">Todo o PerÃƒÂ­odo</option>
                            </select>
                        </div>
                    </div>
                    
                    <!-- Segunda linha: Outros filtros -->
                    <div class="row">
                        <!-- Filtro por Status -->
                        <div class="col-md-3">
                            <label class="form-label"><i class="fas fa-tasks"></i> Status</label>
                            <select class="form-select" id="filtro-status">
                                <option value="">Todos os status</option>
                                <option value="ConcluÃƒÂ­da">ConcluÃƒÂ­da</option>
                                <option value="Confirmada">Confirmada</option>
                                <option value="Pendente">Pendente</option> {# NOVO: Adicione Pendente se seu status incluir #}
                            </select>
                        </div>
                        
                        <!-- Filtro por Categoria -->
                        <div class="col-md-3">
                            <label class="form-label"><i class="fas fa-tags"></i> Categoria</label>
                            <select class="form-select" id="filtro-categoria">
                                <option value="">Todas as categorias</option>
                                <!-- Preenchido dinamicamente via JavaScript -->
                            </select>
                        </div>
                        
                        <!-- Filtro por EdifÃƒÂ­cio -->
                        <div class="col-md-3"> {# CORRIGIDO: Reduzido para 3 para adicionar Equipamento #}
                            <label class="form-label"><i class="fas fa-building"></i> EdifÃƒÂ­cio</label>
                            <select class="form-select" id="filtro-edificio">
                                <option value="">Todos os edifÃƒÂ­cios</option>
                                <!-- Preenchido dinamicamente via JavaScript -->
                            </select>
                        </div>

                        <!-- NOVO: Filtro por Elevador (Equipamento) -->
                        <div class="col-md-3">
                            <label class="form-label"><i class="fas fa-elevator"></i> Elevador (Equipamento)</label>
                            <select class="form-select" id="filtro-equipamento">
                                <option value="">Todos os elevadores</option>
                                <!-- Preenchido dinamicamente via JavaScript -->
                            </select>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Cards de KPIs Principais -->
    <div class="row mb-4" id="kpis-cards">
        <div class="col-md-3">
            <div class="card bg-primary text-white">
                <div class="card-body text-center">
                    <i class="fas fa-clipboard-list fa-2x mb-2"></i>
                    <h3 id="total-chamados">{{ metricas.total_chamados or 0 }}</h3>
                    <p class="mb-0">Total de Chamados</p>
                </div>
            </div>
        </div>
        
        <div class="col-md-3">
            <div class="card bg-success text-white">
                <div class="card-body text-center">
                    <i class="fas fa-check-circle fa-2x mb-2"></i>
                    <h3 id="chamados-concluidos">{{ metricas.chamados_concluidos or 0 }}</h3>
                    <p class="mb-0">Chamados ConcluÃƒÂ­dos</p>
                </div>
            </div>
        </div>
        
        <div class="col-md-3">
            <div class="card bg-warning text-white">
                <div class="card-body text-center">
                    <i class="fas fa-clock fa-2x mb-2"></i>
                    <h3 id="tempo-mediano">{{ "%.1f"|format(metricas.tempo_mediano_reparo or 0) }}h</h3>
                    <p class="mb-0">Tempo Mediano de Reparo</p>
                </div>
            </div>
        </div>
        
        <div class="col-md-3">
            <div class="card bg-info text-white">
                <div class="card-body text-center">
                    <i class="fas fa-percentage fa-2x mb-2"></i>
                    <h3 id="disponibilidade">{{ "%.1f"|format(metricas.disponibilidade or 0) }}%</h3>
                    <p class="mb-0">Taxa de ConclusÃ£o</p>
                </div>
            </div>
        </div>
    </div>

    <!-- Indicador de Filtros Ativos -->
    <div class="row mb-3" id="filtros-ativos" style="display: none;">
        <div class="col-12">
            <div class="alert alert-info">
                <i class="fas fa-filter"></i> 
                <strong>Filtros ativos:</strong> 
                <span id="descricao-filtros"></span>
                <button class="btn btn-sm btn-outline-primary ms-2" onclick="limparFiltrosKPIs()">
                    <i class="fas fa-times"></i> Remover filtros
                </button>
            </div>
        </div>
    </div>

    <!-- GrÃƒÂ¡ficos -->
    <div class="row">
        <!-- GrÃƒÂ¡fico de Chamados por MÃƒÂªs -->
        <div class="col-md-6 mb-4">
            <div class="card">
                <div class="card-header">
                    <h5><i class="fas fa-chart-line"></i> Chamados por MÃƒÂªs</h5>
                    <small class="text-muted">Clique nos pontos para filtrar por mÃƒÂªs</small>
                </div>
                <div class="card-body">
                    <canvas id="grafico-chamados-mes" height="300"></canvas>
                </div>
            </div>
        </div>

        <!-- GrÃƒÂ¡fico de Categorias de Problema -->
        <div class="col-md-6 mb-4">
            <div class="card">
                <div class="card-header">
                    <h5><i class="fas fa-chart-pie"></i> Categorias de Problemas</h5>
                    <small class="text-muted">Clique nas fatias para filtrar por categoria</small>
                </div>
                <div class="card-body">
                    <canvas id="grafico-categorias" height="300"></canvas>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <!-- GrÃƒÂ¡fico de EdifÃƒÂ­cios Mais ProblemÃƒÂ¡ticos -->
        <div class="col-md-6 mb-4">
            <div class="card">
                <div class="card-header">
                    <h5><i class="fas fa-chart-bar"></i> EdifÃƒÂ­cios com Mais Chamados</h5>
                    <small class="text-muted">Clique nas barras para filtrar por edifÃƒÂ­cio</small>
                </div>
                <div class="card-body">
                    <canvas id="grafico-edificios" height="300"></canvas>
                </div>
            </div>
        </div>

        <!-- GrÃƒÂ¡fico de Tempo por Categoria -->
        <div class="col-md-6 mb-4">
            <div class="card">
                <div class="card-header">
                    <h5><i class="fas fa-stopwatch"></i> Tempo Mediano por Categoria</h5>
                    <small class="text-muted">Clique nas barras para filtrar por categoria</small>
                </div>
                <div class="card-body">
                    <canvas id="grafico-tempo-categoria" height="300"></canvas>
                </div>
            </div>
        </div>
    </div>

    <!-- NOVO: SEÃƒâ€¡ÃƒÆ’O DE GRÃƒÂFICOS DE ELEVADORES -->
    <div class="row">
        <!-- GrÃƒÂ¡fico de Chamados por Elevador -->
        <div class="col-md-6 mb-4">
            <div class="card">
                <div class="card-header">
                    <h5><i class="fas fa-elevator"></i> Chamados por Elevador</h5>
                    <small class="text-muted">Clique nas barras para filtrar por elevador especÃƒÂ­fico</small>
                </div>
                <div class="card-body">
                    <canvas id="grafico-chamados-elevador" height="300"></canvas>
                </div>
            </div>
        </div>

        <!-- GrÃƒÂ¡fico de Tempo Mediano por Elevador -->
        <div class="col-md-6 mb-4">
            <div class="card">
                <div class="card-header">
                    <h5><i class="fas fa-clock"></i> Tempo Mediano de Atendimento por Elevador</h5>
                    <small class="text-muted">Clique nas barras para filtrar por elevador especÃƒÂ­fico</small>
                </div>
                <div class="card-body">
                    <canvas id="grafico-tempo-elevador" height="300"></canvas>
                </div>
            </div>
        </div>
    </div>

    <!-- Tabela de Resumo Filtrado -->
    <div class="row">
        <div class="card">
            <div class="card-header">
                <h5><i class="fas fa-table"></i> Resumo dos Dados Filtrados</h5>
            </div>
            <div class="card-body">
                <div id="loading-resumo" class="text-center" style="display: none;">
                    <i class="fas fa-spinner fa-spin"></i> Carregando dados...
                </div>
                <div id="tabela-resumo">
                    <p class="text-muted text-center">Use os filtros acima ou clique nos grÃƒÂ¡ficos para ver dados especÃƒÂ­ficos.</p>
                </div>
            </div>
        </div>
    </div>
{% endif %}

<script>
// Dados para JavaScript
const dadosKPIsOriginais = {{ metricas|tojson|safe }};
let dadosKPIsFiltrados = dadosKPIsOriginais;
let graficos = {};
let filtrosAtivos = {};

// NOVO: VariÃƒÂ¡veis para preencher os selects de filtro
const categoriasUnicas = {{ categorias_unicas|tojson|safe }};
const edificiosUnicos = {{ edificios_unicos|tojson|safe }};
const equipamentosUnicos = {{ equipamentos_unicos|tojson|safe }}; // NOVO

console.log('Ã°Å¸â€œÅ  Dados de KPIs recebidos:', dadosKPIsOriginais);
console.log('Ã¢Å¡â„¢Ã¯Â¸Â Categorias ÃƒÅ¡nicas:', categoriasUnicas);
console.log('Ã¢Å¡â„¢Ã¯Â¸Â EdifÃƒÂ­cios ÃƒÅ¡nicos:', edificiosUnicos);
console.log('Ã¢Å¡â„¢Ã¯Â¸Â Equipamentos ÃƒÅ¡nicos:', equipamentosUnicos); // NOVO


// Inicializa grÃƒÂ¡ficos quando a pÃƒÂ¡gina carrega
document.addEventListener('DOMContentLoaded', function() {
    console.log('Ã°Å¸â€œâ€ž DOM carregado, criando grÃƒÂ¡ficos de KPIs...');
    preencherFiltros();
    criarGraficos();
});

function preencherFiltros() {
    // Preenche filtro de categorias
    const selectCategoria = document.getElementById('filtro-categoria');
    categoriasUnicas.forEach(categoria => {
        const option = document.createElement('option');
        option.value = categoria;
        option.textContent = categoria;
        selectCategoria.appendChild(option);
    });
    
    // Preenche filtro de edifÃƒÂ­cios
    const selectEdificio = document.getElementById('filtro-edificio');
    edificiosUnicos.forEach(edificio => {
        const option = document.createElement('option');
        option.value = edificio;
        option.textContent = edificio.length > 50 ? edificio.substring(0, 50) + '...' : edificio;
        selectEdificio.appendChild(option);
    });

    // NOVO: Preenche filtro de equipamentos (Elevadores)
    const selectEquipamento = document.getElementById('filtro-equipamento');
    equipamentosUnicos.forEach(equipamento => {
        const option = document.createElement('option');
        option.value = equipamento;
        option.textContent = equipamento;
        selectEquipamento.appendChild(option);
    });
}

// Ã°Å¸â€œâ€¦ NOVA FUNÃƒâ€¡ÃƒÆ’O: Selecionar perÃƒÂ­odo predefinido
function selecionarPeriodoPredefinido() {
    const periodo = document.getElementById('filtro-periodo').value;
    
    if (periodo && periodo !== 'todo-periodo') {
        // Limpa datas personalizadas quando seleciona perÃƒÂ­odo predefinido
        document.getElementById('data-inicio').value = '';
        document.getElementById('data-fim').value = '';
    }
    
    console.log('Ã°Å¸â€œâ€¦ PerÃƒÂ­odo predefinido selecionado:', periodo);
}

function criarGraficos() {
    // Destroi grÃƒÂ¡ficos existentes
    Object.values(graficos).forEach(grafico => {
        if (grafico) grafico.destroy();
    });
    
    // Cria novos grÃƒÂ¡ficos
    criarGraficoChamadosPorMes();
    criarGraficoCategorias();
    criarGraficoEdificios();
    criarGraficoTempoPorCategoria();
    
    // NOVOS GRÃƒÂFICOS DE ELEVADORES
    criarGraficoChamadosPorElevador();
    criarGraficoTempoMedianoPorElevador();
}

function criarGraficoChamadosPorMes() {
    const ctx = document.getElementById('grafico-chamados-mes');
    if (!ctx) return;
    
    const dados = dadosKPIsFiltrados.chamados_por_mes || {};
    const labels = Object.keys(dados).sort();
    const values = labels.map(label => dados[label]);
    
    graficos.chamadosMes = new Chart(ctx, {
        type: 'line',
        data: {
            labels: labels,
            datasets: [{
                label: 'Chamados',
                data: values,
                borderColor: '#007bff',
                backgroundColor: 'rgba(0, 123, 255, 0.1)',
                borderWidth: 3,
                fill: true,
                tension: 0.4,
                pointBackgroundColor: '#007bff',
                pointBorderColor: '#fff',
                pointBorderWidth: 2,
                pointRadius: 6,
                pointHoverRadius: 8
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    display: false
                }
            },
            scales: {
                x: {
                    type: 'time', {# CORRIGIDO: Use escala de tempo para melhor visualizaÃ§Ã£o #}
                    time: {
                        unit: 'month',
                        tooltipFormat: 'MMM yyyy'
                    },
                    adapters: {
                        date: {
                            // Certifique-se de que o locale 'pt-BR' estÃƒÂ¡ disponÃƒÂ­vel para date-fns
                            // Se nÃ£o estiver funcionando, pode ser necessÃƒÂ¡rio importar explicitamente o locale do date-fns
                            // No entanto, Chart.js adapta globalmente, entÃ£o deve funcionar.
                        }
                    }
                },
                y: {
                    beginAtZero: true,
                    ticks: {
                        stepSize: 1
                    }
                }
            },
            onClick: (event, elements) => {
                if (elements.length > 0) {
                    const index = elements[0].index;
                    const mesAno = labels[index];
                    filtrarPorMes(mesAno);
                }
            },
            onHover: (event, elements) => {
                event.native.target.style.cursor = elements.length > 0 ? 'pointer' : 'default';
            }
        }
    });
}

function criarGraficoCategorias() {
    const ctx = document.getElementById('grafico-categorias');
    if (!ctx) return;
    
    const dados = dadosKPIsFiltrados.categorias_problema || {};
    
    // Ã°Å¸â€â€ž ORDENAÃƒâ€¡ÃƒÆ’O DECRESCENTE
    const entries = Object.entries(dados).sort((a, b) => b[1] - a[1]);
    const labels = entries.map(entry => entry[0]);
    const values = entries.map(entry => entry[1]);
    
    const cores = [
        '#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', 
        '#9966FF', '#FF9F40', '#FF6384', '#C9CBCF',
        '#E0BBE4', '#957DAD', '#D291BC', '#FFC72C'
    ];
    
    graficos.categorias = new Chart(ctx, {
        type: 'doughnut',
        data: {
            labels: labels,
            datasets: [{
                data: values,
                backgroundColor: cores.slice(0, labels.length),
                borderWidth: 2,
                borderColor: '#fff',
                hoverBorderWidth: 4
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    position: 'bottom'
                }
            },
            onClick: (event, elements) => {
                if (elements.length > 0) {
                    const index = elements[0].index;
                    const categoria = labels[index];
                    filtrarPorCategoria(categoria);
                }
            },
            onHover: (event, elements) => {
                event.native.target.style.cursor = elements.length > 0 ? 'pointer' : 'default';
            }
        }
    });
}

// Ã°Å¸â€â€ž MODIFICADO: GrÃƒÂ¡fico de EdifÃƒÂ­cios com ordenaÃ§Ã£o decrescente garantida
function criarGraficoEdificios() {
    const ctx = document.getElementById('grafico-edificios');
    if (!ctx) return;
    
    const dados = dadosKPIsFiltrados.chamados_por_edificio || {};
    
    // Ã°Å¸â€â€ž ORDENAÃƒâ€¡ÃƒÆ’O DECRESCENTE EXPLÃƒÂCITA (garantindo que funcione mesmo se backend nÃ£o ordenar)
    const entries = Object.entries(dados)
        .sort((a, b) => b[1] - a[1])  // Ordena por valor decrescente
        .slice(0, 10); // Top 10
    
    const labels = entries.map(entry => entry[0]);
    const values = entries.map(entry => entry[1]);
    
    console.log('Ã°Å¸ÂÂ¢ Dados de edifÃƒÂ­cios ordenados:', entries);
    
    graficos.edificios = new Chart(ctx, {
        type: 'bar',
        data: {
            labels: labels.map(label => label.length > 20 ? label.substring(0, 20) + '...' : label),
            datasets: [{
                label: 'Chamados',
                data: values,
                backgroundColor: '#28a745',
                borderColor: '#1e7e34',
                borderWidth: 1,
                hoverBackgroundColor: '#34ce57'
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    display: false
                }
            },
            scales: {
                y: {
                    beginAtZero: true,
                    ticks: {
                        stepSize: 1
                    }
                },
                x: {
                    ticks: {
                        maxRotation: 45
                    }
                }
            },
            onClick: (event, elements) => {
                if (elements.length > 0) {
                    const index = elements[0].index;
                    const edificio = labels[index];
                    filtrarPorEdificio(edificio);
                }
            },
            onHover: (event, elements) => {
                event.native.target.style.cursor = elements.length > 0 ? 'pointer' : 'default';
            }
        }
    });
}

// Ã°Å¸â€â€ž MODIFICADO: GrÃƒÂ¡fico de Tempo por Categoria com ordenaÃ§Ã£o decrescente garantida
function criarGraficoTempoPorCategoria() {
    const ctx = document.getElementById('grafico-tempo-categoria');
    if (!ctx) return;
    
    const dados = dadosKPIsFiltrados.tempo_por_categoria || {};
    
    // Ã°Å¸â€â€ž ORDENAÃƒâ€¡ÃƒÆ’O DECRESCENTE EXPLÃƒÂCITA (garantindo que funcione mesmo se backend nÃ£o ordenar)
    const entries = Object.entries(dados)
        .sort((a, b) => b[1] - a[1]); // Ordena por valor decrescente
    
    const labels = entries.map(entry => entry[0]);
    const values = entries.map(entry => Math.round(entry[1] * 10) / 10);
    
    console.log('Ã¢ÂÂ±Ã¯Â¸Â Dados de tempo por categoria ordenados:', entries);
    
    graficos.tempoCategoria = new Chart(ctx, {
        type: 'bar',
        data: {
            labels: labels,
            datasets: [{
                label: 'Tempo Mediano (horas)',
                data: values,
                backgroundColor: '#ffc107',
                borderColor: '#e0a800',
                borderWidth: 1,
                hoverBackgroundColor: '#ffcd39'
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    display: false
                }
            },
            scales: {
                y: {
                    beginAtZero: true,
                    ticks: {
                        callback: function(value) {
                            return value + 'h';
                        }
                    }
                }
            },
            onClick: (event, elements) => {
                if (elements.length > 0) {
                    const index = elements[0].index;
                    const categoria = labels[index];
                    filtrarPorCategoria(categoria);
                }
            },
            onHover: (event, elements) => {
                event.native.target.style.cursor = elements.length > 0 ? 'pointer' : 'default';
            }
        }
    });
}

// NOVO: GrÃƒÂ¡fico de Chamados por Elevador
function criarGraficoChamadosPorElevador() {
    const ctx = document.getElementById('grafico-chamados-elevador');
    if (!ctx) return;
    
    const dados = dadosKPIsFiltrados.chamados_por_equipamento || {};
    
    // OrdenaÃ§Ã£o decrescente e limitaÃ§Ã£o aos top 15 elevadores
    const entries = Object.entries(dados)
        .sort((a, b) => b[1] - a[1])
        .slice(0, 15); // Top 15 elevadores
    
    const labels = entries.map(entry => String(entry[0]));
    const values = entries.map(entry => entry[1]);
    
    console.log('Ã°Å¸Ââ€”Ã¯Â¸Â Dados de chamados por elevador ordenados:', entries);
    
    graficos.chamadosElevador = new Chart(ctx, {
        type: 'bar',
        data: {
            labels: labels,
            datasets: [{
                label: 'Chamados',
                data: values,
                backgroundColor: '#007bff',
                borderColor: '#0056b3',
                borderWidth: 1,
                hoverBackgroundColor: '#0056b3'
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    display: false
                },
                tooltip: {
                    callbacks: {
                        title: function(context) {
                            return 'Elevador: ' + context[0].label;
                        },
                        label: function(context) {
                            return 'Chamados: ' + context.parsed.y;
                        }
                    }
                }
            },
            scales: {
                y: {
                    beginAtZero: true,
                    ticks: {
                        stepSize: 1
                    }
                },
                x: {
                    ticks: {
                        maxRotation: 45,
                        font: {
                            size: 10
                        }
                    }
                }
            },
            onClick: (event, elements) => {
                if (elements.length > 0) {
                    const index = elements[0].index;
                    const elevador = String(labels[index]);
                    filtrarPorEquipamento(elevador); {# CORRIGIDO: Chamando filtrarPorEquipamento #}
                }
            },
            onHover: (event, elements) => {
                event.native.target.style.cursor = elements.length > 0 ? 'pointer' : 'default';
            }
        }
    });
}

// NOVO: GrÃƒÂ¡fico de Tempo Mediano por Elevador
function criarGraficoTempoMedianoPorElevador() {
    const ctx = document.getElementById('grafico-tempo-elevador');
    if (!ctx) return;
    
    const dados = dadosKPIsFiltrados.tempo_por_equipamento || {};
    
    // OrdenaÃ§Ã£o decrescente e limitaÃ§Ã£o aos top 15 elevadores
    const entries = Object.entries(dados)
        .sort((a, b) => b[1] - a[1])
        .slice(0, 15); // Top 15 elevadores
    
    const labels = entries.map(entry => String(entry[0]));
    const values = entries.map(entry => Math.round(entry[1] * 10) / 10);
    
    console.log('Ã¢ÂÂ° Dados de tempo por elevador ordenados:', entries);
    
    graficos.tempoElevador = new Chart(ctx, {
        type: 'bar',
        data: {
            labels: labels,
            datasets: [{
                label: 'Tempo Mediano (horas)',
                data: values,
                backgroundColor: '#17a2b8',
                borderColor: '#138496',
                borderWidth: 1,
                hoverBackgroundColor: '#138496'
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    display: false
                },
                tooltip: {
                    callbacks: {
                        title: function(context) {
                            return 'Elevador: ' + context[0].label;
                        },
                        label: function(context) {
                            return 'Tempo Mediano: ' + context.parsed.y + 'h';
                        }
                    }
                }
            },
            scales: {
                y: {
                    beginAtZero: true,
                    ticks: {
                        callback: function(value) {
                            return value + 'h';
                        }
                    }
                },
                x: {
                    ticks: {
                        maxRotation: 45,
                        font: {
                            size: 10
                        }
                    }
                }
            },
            onClick: (event, elements) => {
                if (elements.length > 0) {
                    const index = elements[0].index;
                    const elevador = String(labels[index]);
                    filtrarPorEquipamento(elevador); {# CORRIGIDO: Chamando filtrarPorEquipamento #}
                }
            },
            onHover: (event, elements) => {
                event.native.target.style.cursor = elements.length > 0 ? 'pointer' : 'default';
            }
        }
    });
}

// FunÃ§ÃƒÂµes de filtro por clique nos grÃƒÂ¡ficos
function filtrarPorMes(mesAno) {
    console.log('Ã°Å¸â€œâ€¦ Filtrando por mÃƒÂªs:', mesAno);
    // Para filtro por mÃƒÂªs, precisamos ajustar data_inicio e data_fim
    const [ano, mes] = mesAno.split('-');
    const dataInicioMes = `${ano}-${mes}-01`;
    const ultimoDiaMes = new Date(ano, parseInt(mes), 0).getDate();
    const dataFimMes = `${ano}-${mes}-${ultimoDiaMes}`;

    document.getElementById('data-inicio').value = dataInicioMes;
    document.getElementById('data-fim').value = dataFimMes;
    document.getElementById('filtro-periodo').value = ''; // Limpa perÃƒÂ­odo predefinido

    filtrosAtivos.data_inicio = dataInicioMes;
    filtrosAtivos.data_fim = dataFimMes;
    delete filtrosAtivos.periodo_predefinido;
    delete filtrosAtivos.mes; // Remove filtro de mÃƒÂªs para evitar conflito

    aplicarFiltrosInterativos();
}

function filtrarPorCategoria(categoria) {
    console.log('Ã°Å¸ÂÂ·Ã¯Â¸Â Filtrando por categoria:', categoria);
    document.getElementById('filtro-categoria').value = categoria;
    filtrosAtivos.categoria = categoria;
    aplicarFiltrosInterativos();
}

function filtrarPorEdificio(edificio) {
    console.log('Ã°Å¸ÂÂ¢ Filtrando por edifÃƒÂ­cio:', edificio);
    document.getElementById('filtro-edificio').value = edificio;
    filtrosAtivos.edificio = edificio;
    aplicarFiltrosInterativos();
}

// NOVO: Filtrar por elevador especÃƒÂ­fico (equipamento)
function filtrarPorEquipamento(equipamento) {
    console.log('Ã°Å¸Ââ€”Ã¯Â¸Â Filtrando por equipamento:', equipamento);
    document.getElementById('filtro-equipamento').value = equipamento;
    filtrosAtivos.equipamento = equipamento;
    aplicarFiltrosInterativos();
}

function aplicarFiltros() {
    const dataInicio = document.getElementById('data-inicio').value;
    const dataFim = document.getElementById('data-fim').value;
    const periodo = document.getElementById('filtro-periodo').value;
    const status = document.getElementById('filtro-status').value;
    const categoria = document.getElementById('filtro-categoria').value;
    const edificio = document.getElementById('filtro-edificio').value;
    const equipamento = document.getElementById('filtro-equipamento').value; {# NOVO #}
    
    console.log('Ã°Å¸â€Â Aplicando filtros:', {
        dataInicio, dataFim, periodo, status, categoria, edificio, equipamento
    });
    
    // Ã°Å¸â€œâ€¦ VALIDAÃƒâ€¡ÃƒÆ’O DE DATAS
    if (dataInicio && dataFim && new Date(dataInicio) > new Date(dataFim)) {
        alert('A data de inÃƒÂ­cio nÃ£o pode ser posterior ÃƒÂ  data de fim.');
        return;
    }
    
    // MAPEAMENTO CORRETO DOS PARÃƒâ€šMETROS
    filtrosAtivos = {
        data_inicio: dataInicio,
        data_fim: dataFim,
        periodo_predefinido: periodo,
        status: status,
        categoria: categoria,
        edificio: edificio,
        equipamento: equipamento {# NOVO #}
    };
    
    // Remove filtros vazios
    Object.keys(filtrosAtivos).forEach(key => {
        if (!filtrosAtivos[key]) {
            delete filtrosAtivos[key];
        }
    });
    
    console.log('Ã°Å¸â€Â§ Filtros ativos apÃƒÂ³s limpeza:', filtrosAtivos);
    
    aplicarFiltrosInterativos();
}

function aplicarFiltrosInterativos() {
    console.log('Ã°Å¸â€Â Aplicando filtros interativos:', filtrosAtivos);
    
    // Monta parÃƒÂ¢metros para API
    const params = new URLSearchParams();
    Object.keys(filtrosAtivos).forEach(key => {
        if (filtrosAtivos[key]) {
            params.append(key, filtrosAtivos[key]);
        }
    });
    
    // Mostra loading
    const loadingElement = document.getElementById('loading-resumo');
    if (loadingElement) loadingElement.style.display = 'block';
    
    // Faz requisiÃ§Ã£o para API
    fetch('/api/kpis-filtrados?' + params.toString())
        .then(response => {
            if (!response.ok) {
                // Se a resposta nÃ£o for 2xx, tenta ler como JSON de erro
                return response.json().then(errorData => {
                    throw new Error(errorData.message || 'Erro na API');
                });
            }
            return response.json();
        })
        .then(data => {
            if (loadingElement) loadingElement.style.display = 'none';
            
            if (data.success) {
                // Atualiza dados filtrados
                dadosKPIsFiltrados = data.metricas;
                
                // Atualiza cards
                atualizarCards(data.metricas);
                
                // Recria grÃƒÂ¡ficos
                criarGraficos();
                
                // Mostra indicador de filtros ativos
                mostrarFiltrosAtivos();
                
                // Atualiza tabela de resumo
                atualizarTabelaResumo(data.resumo);
            } else {
                alert('Erro ao aplicar filtros: ' + (data.message || 'Erro desconhecido.'));
                console.error('API Error:', data);
            }
        })
        .catch(error => {
            if (loadingElement) loadingElement.style.display = 'none';
            console.error('Ã¢ÂÅ’ Erro ao aplicar filtros:', error);
            alert('Erro na requisiÃ§Ã£o de filtros: ' + error.message + '. Verifique o console para mais detalhes.');
        });
}

function atualizarCards(metricas) {
    document.getElementById('total-chamados').textContent = metricas.total_chamados || 0;
    document.getElementById('chamados-concluidos').textContent = metricas.chamados_concluidos || 0;
    document.getElementById('tempo-mediano').textContent = (metricas.tempo_mediano_reparo || 0).toFixed(1) + 'h';
    document.getElementById('disponibilidade').textContent = (metricas.disponibilidade || 0).toFixed(1) + '%';
}

function mostrarFiltrosAtivos() {
    const filtrosAtivosDiv = document.getElementById('filtros-ativos');
    const descricaoFiltros = document.getElementById('descricao-filtros');
    
    const filtrosTexto = [];
    
    // MELHORIA: DescriÃ§Ã£o mais clara dos filtros
    const dataInicio = document.getElementById('data-inicio').value;
    const dataFim = document.getElementById('data-fim').value;
    const periodo = document.getElementById('filtro-periodo').value;
    
    if (dataInicio || dataFim) {
        let textoData = 'PerÃƒÂ­odo: ';
        if (dataInicio && dataFim) {
            textoData += `${dataInicio} a ${dataFim}`;
        } else if (dataInicio) {
            textoData += `a partir de ${dataInicio}`;
        } else {
            textoData += `atÃƒÂ© ${dataFim}`;
        }
        filtrosTexto.push(textoData);
    } else if (periodo) {
        const periodos = {
            'ultima-semana': 'ÃƒÅ¡ltima Semana',
            'ultimo-mes': 'ÃƒÅ¡ltimo MÃƒÂªs',
            'ultimos-3-meses': 'ÃƒÅ¡ltimos 3 Meses',
            'ultimos-6-meses': 'ÃƒÅ¡ltimos 6 Meses',
            'ultimo-ano': 'ÃƒÅ¡ltimo Ano',
            'ultimos-2-anos': 'ÃƒÅ¡ltimos 2 Anos',
            'ultimos-5-anos': 'ÃƒÅ¡ltimos 5 Anos',
            'todo-periodo': 'Todo o PerÃƒÂ­odo'
        };
        filtrosTexto.push(`PerÃƒÂ­odo: ${periodos[periodo]}`);
    }
    
    Object.keys(filtrosAtivos).forEach(key => {
        if (filtrosAtivos[key] && !['data_inicio', 'data_fim', 'periodo_predefinido'].includes(key)) {
             const nomesFiltros = {
                'equipamento': 'Elevador', // NOVO
                'categoria': 'Categoria',
                'edificio': 'EdifÃƒÂ­cio',
                'status': 'Status'
            };
            const nomeAmigavel = nomesFiltros[key] || key;
            filtrosTexto.push(`${nomeAmigavel}: ${filtrosAtivos[key]}`);
        }
    });
    
    if (filtrosTexto.length > 0) {
        descricaoFiltros.textContent = filtrosTexto.join(' | ');
        filtrosAtivosDiv.style.display = 'block';
    } else {
        filtrosAtivosDiv.style.display = 'none';
    }
}

function atualizarTabelaResumo(resumo) {
    const container = document.getElementById('tabela-resumo');
    if (!resumo || resumo.length === 0) {
        container.innerHTML = '<p class="text-muted text-center">Nenhum dado encontrado com os filtros aplicados.</p>';
        return;
    }
    
    let html = `
        <div class="table-responsive">
            <table class="table table-striped table-hover">
                <thead class="table-dark">
                    <tr>
                        <th>Categoria</th>
                        <th>EdifÃƒÂ­cio</th>
                        <th>Equipamento</th> {# NOVO: Coluna adicionada #}
                        <th>Status</th>
                        <th>Data SolicitaÃ§Ã£o</th>
                        <th>Tempo Reparo (h)</th>
                    </tr>
                </thead>
                <tbody>
    `;
    
    resumo.slice(0, 20).forEach(item => { // Mostra apenas os primeiros 20
        html += `
            <tr>
                <td><span class="badge bg-secondary">${item.categoria_problema}</span></td>
                <td>${item.edificio}</td>
                <td>${item.equipamento || '-'}</td> {# NOVO: Dados do equipamento #}
                <td><span class="badge ${item.status === 'ConcluÃƒÂ­da' ? 'bg-success' : 'bg-warning'}">${item.status}</span></td>
                <td>${item.data_solicitacao}</td>
                <td>${item.tempo_reparo_horas ? item.tempo_reparo_horas.toFixed(1) : '-'}</td> {# CORRIGIDO: Usar tempo_reparo_horas #}
            </tr>
        `;
    });
    
    html += `
                </tbody>
            </table>
        </div>
        ${resumo.length > 20 ? `<p class="text-muted text-center">Mostrando 20 de ${resumo.length} registros</p>` : ''}
    `;
    
    container.innerHTML = html;
}

function limparFiltrosKPIs() {
    // Ã°Å¸â€œâ€¦ LIMPA TODOS OS FILTROS (incluindo datas)
    document.getElementById('data-inicio').value = '';
    document.getElementById('data-fim').value = '';
    document.getElementById('filtro-periodo').value = '';
    document.getElementById('filtro-status').value = '';
    document.getElementById('filtro-categoria').value = '';
    document.getElementById('filtro-edificio').value = '';
    document.getElementById('filtro-equipamento').value = ''; {# NOVO #}
    
    // Limpa filtros ativos
    filtrosAtivos = {};
    
    // Restaura dados originais
    dadosKPIsFiltrados = dadosKPIsOriginais;
    
    // Atualiza cards
    atualizarCards(dadosKPIsOriginais);
    
    // Recria grÃƒÂ¡ficos
    criarGraficos();
    
    // Esconde indicador de filtros
    document.getElementById('filtros-ativos').style.display = 'none';
    
    // Limpa tabela de resumo
    document.getElementById('tabela-resumo').innerHTML = '<p class="text-muted text-center">Use os filtros acima ou clique nos grÃƒÂ¡ficos para ver dados especÃƒÂ­ficos.</p>';
    
    console.log('Ã°Å¸Â§Â¹ Filtros de KPIs limpos');
}

function atualizarDados() {
    const btn = event.target;
    const originalText = btn.innerHTML;
    btn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Atualizando...';
    btn.disabled = true;
    
    // Chamada para a API do Blueprint de KPIs para atualizar o cache
    fetch('/v2/kpis/atualizar-kpis', { method: 'POST' })
        .then(response => {
            if (!response.ok) {
                return response.json().then(errorData => {
                    throw new Error(errorData.message || 'Erro na API');
                });
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                alert('Dados de KPIs atualizados!\n' + data.message);
                // ApÃƒÂ³s atualizar o cache, recarregar a pÃƒÂ¡gina para buscar os novos dados
                location.reload(); 
            } else {
                alert('Erro ao atualizar KPIs: ' + data.message);
            }
        })
        .catch(error => alert('Erro na requisiÃ§Ã£o de atualizaÃ§Ã£o de KPIs: ' + error.message))
        .finally(() => {
            btn.innerHTML = originalText;
            btn.disabled = false;
        });
}

function debugFiltros() {
    console.log('Ã°Å¸â€Â DEBUG - Estado atual dos filtros:');
    console.log('   Data inÃƒÂ­cio:', document.getElementById('data-inicio').value);
    console.log('   Data fim:', document.getElementById('data-fim').value);
    console.log('   PerÃƒÂ­odo:', document.getElementById('filtro-periodo').value);
    console.log('   Status:', document.getElementById('filtro-status').value);
    console.log('   Categoria:', document.getElementById('filtro-categoria').value);
    console.log('   EdifÃƒÂ­cio:', document.getElementById('filtro-edificio').value);
    console.log('   Equipamento:', document.getElementById('filtro-equipamento').value);
    console.log('   Filtros ativos:', filtrosAtivos);
    console.log('   Dados originais:', dadosKPIsOriginais);
    console.log('   Dados filtrados:', dadosKPIsFiltrados);
}

</script>
{% endblock %}
--- Fim do código: kpis.html ---

--- Início do código: base.html ---
<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{% block title %}Sistema de Elevadores - TJ/MG{% endblock %}</title>
    
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <!-- CSS customizado -->
    <link rel="stylesheet" href="{{ url_for('static', filename='css/style.css') }}">
    
    {% block extra_head %}{% endblock %}
</head>
<body>
    <nav class="navbar navbar-expand-lg navbar-dark bg-primary">
        <div class="container">
            <a class="navbar-brand" href="{{ url_for('dashboard.index') }}">
                <i class="fas fa-building"></i> TJ/MG - Elevadores
            </a>
            
            <div class="navbar-nav ms-auto d-flex align-items-center">
                <a class="nav-link" href="{{ url_for('dashboard.index') }}">
                    <i class="fas fa-home"></i> Dashboard
                </a>
                <!-- Ã°Å¸â€ â€¢ NOVO BOTÃƒÆ’O KPIs -->
                <a class="nav-link" href="{{ url_for('kpis.index') }}">
                    <i class="fas fa-chart-line"></i> KPIs
                </a>
                <button class="btn btn-outline-light btn-sm ms-2" onclick="atualizarDados()">
                    <i class="fas fa-sync-alt"></i> Atualizar
                </button>
                
                <!-- InformaÃ§ÃƒÂµes do usuÃƒÂ¡rio logado -->
                {% if usuario_logado %}
                <div class="nav-item dropdown ms-3">
                    <a class="nav-link dropdown-toggle d-flex align-items-center" href="#" id="userDropdown" role="button" data-bs-toggle="dropdown">
                        <i class="fas fa-user-circle me-2"></i>
                        <span>{{ usuario_logado }}</span>
                    </a>
                    <ul class="dropdown-menu dropdown-menu-end">
                        <li>
                            <span class="dropdown-item-text">
                                <small class="text-muted">
                                    <i class="fas fa-clock"></i> 
                                    Logado desde {{ login_timestamp[:19] if login_timestamp else 'N/A' }}
                                </small>
                            </span>
                        </li>
                        <li><hr class="dropdown-divider"></li>
                        <li>
                            <a class="dropdown-item text-danger" href="{{ url_for('auth.logout') }}">
                                <i class="fas fa-sign-out-alt"></i> Sair
                            </a>
                        </li>
                    </ul>
                </div>
                {% endif %}
            </div>
        </div>
    </nav>

    <!-- Mensagens Flash -->
    {% with messages = get_flashed_messages(with_categories=true) %}
        {% if messages %}
            <div class="container mt-3">
                {% for category, message in messages %}
                    <div class="alert alert-{{ 'danger' if category == 'danger' else 'warning' if category == 'warning' else 'info' if category == 'info' else 'success' }} alert-dismissible fade show" role="alert">
                        <i class="fas fa-{{ 'exclamation-triangle' if category in ['danger', 'warning'] else 'info-circle' if category == 'info' else 'check-circle' }}"></i>
                        {{ message }}
                        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                    </div>
                {% endfor %}
            </div>
        {% endif %}
    {% endwith %}

    <!-- ConteÃƒÂºdo principal -->
    <main class="container-fluid mt-4">
        {% block content %}{% endblock %}
    </main>

    <!-- Footer -->
    <footer class="bg-light text-center py-3 mt-5">
        <div class="container">
            <small class="text-muted">
                Sistema de Mapeamento de Elevadores - Tribunal de JustiÃ§a de Minas Gerais
                {% if usuario_logado %}
                    | UsuÃƒÂ¡rio: {{ usuario_logado }}
                {% endif %}
            </small>
        </div>
    </footer>

    <!-- Bootstrap JS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <!-- jQuery -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    
    <!-- Ã°Å¸â€ â€¢ JAVASCRIPT GLOBAL PARA FUNÃƒâ€¡ÃƒÆ’O ATUALIZAR -->
    <script>
    function atualizarDados() {
        const btn = event.target;
        const originalText = btn.innerHTML;
        btn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Atualizando...';
        btn.disabled = true;
        
        // Verifica se estamos na pÃƒÂ¡gina de KPIs
        const isKPIsPage = window.location.pathname === '/kpis';
        const endpoint = isKPIsPage ? '/atualizar-kpis' : '/atualizar';
        const tipoAtualizacao = isKPIsPage ? 'KPIs' : 'Dados';
        
        console.log(`Ã°Å¸â€â€ž Atualizando ${tipoAtualizacao} via ${endpoint}`);
        
        fetch(endpoint)
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert(`${tipoAtualizacao} atualizados com sucesso!\n\n${data.message}`);
                    location.reload();
                } else {
                    alert(`Erro ao atualizar ${tipoAtualizacao}:\n${data.message}`);
                }
            })
            .catch(error => {
                console.error('Ã¢ÂÅ’ Erro na requisiÃ§Ã£o:', error);
                alert(`Erro na requisiÃ§Ã£o de ${tipoAtualizacao}. Verifique a conexÃ£o.`);
            })
            .finally(() => {
                btn.innerHTML = originalText;
                btn.disabled = false;
            });
    }
    </script>
    
    {% block extra_scripts %}{% endblock %}
</body>
</html>
--- Fim do código: base.html ---

--- Início do código: index_nativo.html ---
{% extends "base.html" %}

{% block title %}Dashboard - Sistema de Elevadores TJ/MG{% endblock %}

{% block extra_head %}
<!-- Leaflet CSS -->
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
{% endblock %}

{% block content %}
<div class="row">
    <div class="col-12">
        <h1 class="mb-4">
            <i class="fas fa-building"></i> 
            Sistema de Mapeamento de Elevadores - TJ/MG
        </h1>
    </div>
</div>

{% if erro %}
    <div class="alert alert-danger" role="alert">
        <i class="fas fa-exclamation-triangle"></i> {{ erro }}
    </div>
{% else %}
    <!-- Cards de EstatÃƒÂ­sticas -->
    <div class="row mb-4 stats-row" id="stats-cards">
        <div class="col-md-2">
            <div class="card bg-primary text-white">
                <div class="card-body text-center">
                    <i class="fas fa-building fa-2x mb-2"></i>
                    <h3 id="stat-predios">{{ stats.total_predios }}</h3>
                    <p class="mb-0">PrÃƒÂ©dios</p>
                </div>
            </div>
        </div>
        
        <div class="col-md-2">
            <div class="card bg-success text-white">
                <div class="card-body text-center">
                    <i class="fas fa-elevator fa-2x mb-2"></i>
                    <h3 id="stat-elevadores">{{ stats.total_elevadores }}</h3>
                    <p class="mb-0">Elevadores</p>
                </div>
            </div>
        </div>
        
        <div class="col-md-2">
            <div class="card bg-info text-white">
                <div class="card-body text-center">
                    <i class="fas fa-map-marker-alt fa-2x mb-2"></i>
                    <h3 id="stat-cidades">{{ stats.cidades }}</h3>
                    <p class="mb-0">Cidades</p>
                </div>
            </div>
        </div>
        
        <div class="col-md-2">
            <div class="card bg-secondary text-white">
                <div class="card-body text-center">
                    <i class="fas fa-map fa-2x mb-2"></i>
                    <h3 id="stat-regioes">{{ stats.regioes }}</h3>
                    <p class="mb-0">RegiÃƒÂµes</p>
                </div>
            </div>
        </div>
        
        <div class="col-md-2">
            <div class="card bg-success text-white">
                <div class="card-body text-center">
                    <i class="fas fa-check-circle fa-2x mb-2"></i>
                    <h3 id="stat-ativos">{{ stats.em_atividade }}</h3>
                    <p class="mb-0">Ativos</p>
                </div>
            </div>
        </div>
        
        <div class="col-md-2">
            <div class="card bg-warning text-white">
                <div class="card-body text-center">
                    <i class="fas fa-times-circle fa-2x mb-2"></i>
                    <h3 id="stat-suspensos">{{ stats.suspensos }}</h3>
                    <p class="mb-0">Suspensos</p>
                </div>
            </div>
        </div>

        <div class="col-md-2">
            <div class="card bg-danger text-white">
                 <div class="card-body text-center">
                    <i class="fas fa-exclamation-triangle fa-2x mb-2"></i>
                     <h3 id="stat-parados">{{ stats.elevadores_parados }}</h3>
                     <p class="mb-0">Parados</p>
                 </div>
            </div>
        </div>
    </div>

    <!-- Mapa Nativo -->
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5><i class="fas fa-map"></i> Mapa Interativo com Filtros</h5>
                    <button class="btn btn-info btn-sm" onclick="atualizarDados()">
                        <i class="fas fa-sync-alt"></i> Atualizar Dados
                    </button>
                </div>
                <div class="card-body p-0" style="position: relative; height: 600px;">
                    <!-- Container do mapa -->
                    <div id="mapa" style="width: 100%; height: 100%;"></div>
                    
                    <!-- Filtros posicionados sobre o mapa -->
                    <div id="filtros-container" style="
                        position: absolute;
                        top: 10px;
                        left: 10px;
                        background: white;
                        padding: 15px;
                        border-radius: 8px;
                        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
                        z-index: 1000;
                        max-width: 300px;
                        max-height: 550px;
                        overflow-y: auto;
                        font-family: Arial, sans-serif;
                        font-size: 14px;
                    ">
                        <h5 style="margin: 0 0 15px 0; color: #333; text-align: center;">Ã°Å¸â€Â Filtros</h5>

                        <!-- Contador -->
                        <div id="contador-resultados" style="
                            background: #e8f4fd;
                            padding: 10px;
                            border-radius: 6px;
                            margin-bottom: 15px;
                            text-align: center;
                            font-weight: bold;
                            color: #1976d2;
                            border: 2px solid #bbdefb;
                        ">
                            <div>Ã°Å¸â€œÅ  <span id="total-elevadores-filtro">{{ stats.total_elevadores }}</span> elevadores</div>
                            <div style="font-size: 12px; margin-top: 3px;">
                                em <span id="total-locais-filtro">{{ stats.total_predios }}</span> locais
                            </div>
                        </div>

                        <!-- BotÃƒÂµes -->
                        <div style="display: flex; gap: 5px; margin-bottom: 15px;">
                            <button onclick="selecionarTodos()" style="
                                flex: 1; padding: 6px; background: #4caf50; color: white;
                                border: none; border-radius: 4px; cursor: pointer;
                                font-size: 12px; font-weight: bold;
                            ">Ã¢Å“â€¦ Todos</button>
                            <button onclick="limparFiltros()" style="
                                flex: 1; padding: 6px; background: #f44336; color: white;
                                border: none; border-radius: 4px; cursor: pointer;
                                font-size: 12px; font-weight: bold;
                            ">Ã°Å¸â€”â€˜Ã¯Â¸Â Limpar</button>
                        </div>

                        <!-- Filtro por Tipo -->
                        <div style="margin-bottom: 15px; border: 1px solid #e0e0e0; border-radius: 6px; padding: 10px;">
                            <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 8px;">
                                <label style="font-weight: bold; color: #555;">Ã°Å¸â€œâ€¹ Tipo</label>
                                <button onclick="toggleCategoria('tipo')" style="background: none; border: none; font-size: 16px; cursor: pointer; color: #666;" id="toggle-tipo">Ã¢Å¾â€“</button>
                            </div>
                            <div id="filtros-tipo" style="max-height: 100px; overflow-y: auto;">
                                {% for tipo in tipos_unicos %}
                                <div style="margin: 5px 0; display: flex; align-items: center;">
                                    <input type="checkbox" id="check-tipo-{{ loop.index }}" value="{{ tipo }}" 
                                           onchange="aplicarFiltros()" style="margin-right: 8px;">
                                    <label for="check-tipo-{{ loop.index }}" style="cursor: pointer; flex: 1; font-size: 13px;">
                                        {{ tipo }}
                                    </label>
                                </div>
                                {% endfor %}
                            </div>
                        </div>

                        <!-- Filtro por RegiÃ£o -->
                        <div style="margin-bottom: 15px; border: 1px solid #e0e0e0; border-radius: 6px; padding: 10px;">
                            <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 8px;">
                                <label style="font-weight: bold; color: #555;">Ã°Å¸â€”ÂºÃ¯Â¸Â RegiÃ£o</label>
                                <button onclick="toggleCategoria('regiao')" style="background: none; border: none; font-size: 16px; cursor: pointer; color: #666;" id="toggle-regiao">Ã¢Å¾â€“</button>
                            </div>
                            <div id="filtros-regiao" style="max-height: 100px; overflow-y: auto;">
                                {% for regiao in regioes_unicas %}
                                <div style="margin: 5px 0; display: flex; align-items: center;">
                                    <input type="checkbox" id="check-regiao-{{ loop.index }}" value="{{ regiao }}" 
                                           onchange="aplicarFiltros()" style="margin-right: 8px;">
                                    <label for="check-regiao-{{ loop.index }}" style="cursor: pointer; flex: 1; font-size: 13px;">
                                        {{ regiao }}
                                    </label>
                                </div>
                                {% endfor %}
                            </div>
                        </div>

                        <!-- Filtro por Marca -->
                        <div style="margin-bottom: 15px; border: 1px solid #e0e0e0; border-radius: 6px; padding: 10px;">
                            <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 8px;">
                                <label style="font-weight: bold; color: #555;">Ã°Å¸ÂÂ­ Marca</label>
                                <button onclick="toggleCategoria('marca')" style="background: none; border: none; font-size: 16px; cursor: pointer; color: #666;" id="toggle-marca">Ã¢Å¾â€“</button>
                            </div>
                            <div id="filtros-marca" style="max-height: 100px; overflow-y: auto;">
                                {% for marca in marcas_unicas %}
                                <div style="margin: 5px 0; display: flex; align-items: center;">
                                    <input type="checkbox" id="check-marca-{{ loop.index }}" value="{{ marca }}" 
                                           onchange="aplicarFiltros()" style="margin-right: 8px;">
                                    <label for="check-marca-{{ loop.index }}" style="cursor: pointer; flex: 1; font-size: 13px;">
                                        {{ marca }}
                                    </label>
                                </div>
                                {% endfor %}
                            </div>
                        </div>

                        <!-- Filtro por Empresa -->
                        {% if empresas_unicas %}
                        <div style="margin-bottom: 15px; border: 1px solid #e0e0e0; border-radius: 6px; padding: 10px;">
                            <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 8px;">
                                <label style="font-weight: bold; color: #555;">Ã°Å¸ÂÂ¢ Empresa</label>
                                <button onclick="toggleCategoria('empresa')" style="background: none; border: none; font-size: 16px; cursor: pointer; color: #666;" id="toggle-empresa">Ã¢Å¾â€“</button>
                            </div>
                            <div id="filtros-empresa" style="max-height: 100px; overflow-y: auto;">
                                {% for empresa in empresas_unicas %}
                                <div style="margin: 5px 0; display: flex; align-items: center;">
                                    <input type="checkbox" id="check-empresa-{{ loop.index }}" value="{{ empresa }}" 
                                           onchange="aplicarFiltros()" style="margin-right: 8px;">
                                    <label for="check-empresa-{{ loop.index }}" style="cursor: pointer; flex: 1; font-size: 13px;">
                                        {{ empresa }}
                                    </label>
                                </div>
                                {% endfor %}
                            </div>
                        </div>
                        {% endif %}
                        <!-- Filtro por SituaÃ§Ã£o -->
                        <div style="margin-bottom: 15px; border: 1px solid #e0e0e0; border-radius: 6px; padding: 10px;">
                            <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 8px;">
                                <label style="font-weight: bold; color: #555;">Ã¢Å¡Â¡ SituaÃ§Ã£o</label>
                                <button onclick="toggleCategoria('situacao')" style="background: none; border: none; font-size: 16px; cursor: pointer; color: #666;" id="toggle-situacao">Ã¢Å¾â€“</button>
                            </div>
                            <div id="filtros-situacao" style="max-height: 100px; overflow-y: auto;">
                                <div style="margin: 5px 0; display: flex; align-items: center;">
                                    <input type="checkbox" id="check-situacao-1" value="ativos" 
                                           onchange="aplicarFiltros()" style="margin-right: 8px;">
                                    <label for="check-situacao-1" style="cursor: pointer; flex: 1; font-size: 13px;">
                                        Ã°Å¸Å¸Â¢ Elevadores Ativos
                                    </label>
                                </div>
                                <div style="margin: 5px 0; display: flex; align-items: center;">
                                    <input type="checkbox" id="check-situacao-2" value="suspensos" 
                                           onchange="aplicarFiltros()" style="margin-right: 8px;">
                                    <label for="check-situacao-2" style="cursor: pointer; flex: 1; font-size: 13px;">
                                        Ã°Å¸Å¸Â¡ Elevadores Suspensos
                                    </label>
                                </div>
                                <div style="margin: 5px 0; display: flex; align-items: center;">
                                    <input type="checkbox" id="check-situacao-3" value="parados" 
                                           onchange="aplicarFiltros()" style="margin-right: 8px;">
                                    <label for="check-situacao-3" style="cursor: pointer; flex: 1; font-size: 13px;">
                                        Ã°Å¸â€Â´ Elevadores Parados
                                    </label>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- EstatÃƒÂ­sticas Detalhadas -->
    <div class="row mt-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5><i class="fas fa-chart-bar"></i> EstatÃƒÂ­sticas Detalhadas</h5>
                </div>
                <div class="card-body">
                    <div id="loading-stats" class="text-center" style="display: none;">
                        <i class="fas fa-spinner fa-spin"></i> Atualizando estatÃƒÂ­sticas...
                    </div>
                    <div id="stats-detalhadas">
                        <p class="text-muted">Use os filtros no mapa para ver estatÃƒÂ­sticas especÃƒÂ­ficas.</p>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Elevadores Parados -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5><i class="fas fa-exclamation-triangle text-danger"></i> Elevadores Parados</h5>
                    <span id="badge-total-parados" class="badge bg-danger">0</span>
                </div>
                <div class="card-body">
                    <div id="loading-elevadores-parados" class="text-center" style="display: none;">
                        <i class="fas fa-spinner fa-spin"></i> Carregando elevadores parados...
                    </div>
                    <div id="lista-elevadores-parados">
                        <p class="text-muted text-center">
                            <i class="fas fa-info-circle"></i> 
                            Use os filtros no mapa para ver elevadores parados especÃƒÂ­ficos ou carregue a pÃƒÂ¡gina para ver todos.
                        </p>
                    </div>
                </div>
            </div>
        </div>
    </div>
{% endif %}

<!-- Leaflet JS -->
<script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>

<script>
// Dados para JavaScript
const dadosOriginais = {{ geojson_data|safe }};
let dadosFiltrados = dadosOriginais;
let mapa = null;
let layerGroup = null;

console.log('Ã°Å¸Å¡â‚¬ Inicializando mapa nativo...');
console.log('Ã°Å¸â€œÅ  Dados recebidos:', dadosOriginais);

// Armazena valores originais dos stats
window.statsOriginais = {
    'stat-predios': {{ stats.total_predios }},
    'stat-elevadores': {{ stats.total_elevadores }},
    'stat-cidades': {{ stats.cidades }},
    'stat-regioes': {{ stats.regioes }},
    'stat-ativos': {{ stats.em_atividade }},
    'stat-suspensos': {{ stats.suspensos }},
    'stat-parados': {{ stats.elevadores_parados }}
};

// Inicializa o mapa quando a pÃƒÂ¡gina carrega
document.addEventListener('DOMContentLoaded', function() {
    console.log('Ã°Å¸â€œâ€ž DOM carregado, criando mapa...');
    
    // Cria o mapa
    mapa = L.map('mapa').setView([-19.92, -43.92], 6);
    
    // Adiciona tile layer
    L.tileLayer('https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}{r}.png', {
        attribution: 'Ã‚Â© OpenStreetMap contributors, Ã‚Â© CartoDB',
        maxZoom: 19
    }).addTo(mapa);
    
    // Cria grupo de camadas para os marcadores
    layerGroup = L.layerGroup().addTo(mapa);
    
    console.log('Ã¢Å“â€¦ Mapa criado com sucesso!');
    
    // Adiciona marcadores iniciais
    adicionarMarcadores(dadosOriginais);
    carregarElevadoresParadosIniciais();
});

// FunÃ§Ã£o para adicionar marcadores
function adicionarMarcadores(geojson) {
    if (!geojson.features || !layerGroup) {
        console.log('Ã¢Å¡Â Ã¯Â¸Â Sem features ou layerGroup para adicionar');
        return;
    }
    
    console.log(`Ã¢Å¾â€¢ Adicionando ${geojson.features.length} marcadores...`);
    
    geojson.features.forEach((feature, index) => {
        const props = feature.properties;
        const coords = feature.geometry.coordinates;
        const latlng = [coords[1], coords[0]]; // Leaflet usa [lat, lng]
        
        // Ã°Å¸Å½Â¨ NOVA LÃƒâ€œGICA DE CORES - PRIORIDADE: Parados > Suspensos > Ativos
        let cor = '#6c757d'; // Cinza padrÃ£o
        
        if (props.temElevadorParado || (props.nElevadorParado && props.nElevadorParado > 0)) {
            cor = '#dc3545'; // Ã°Å¸â€Â´ Vermelho para elevadores parados
        } else if (props.status && props.status.toLowerCase().includes('suspenso')) {
            cor = '#ffc107'; // Ã°Å¸Å¸Â¡ Amarelo para suspensos  
        } else if (props.status && props.status.toLowerCase().includes('atividade')) {
            cor = '#28a745'; // Ã°Å¸Å¸Â¢ Verde para ativos
        }
        
        // Define tamanho baseado na quantidade
        const radius = props.qtd_elev >= 5 ? 8 : (props.qtd_elev >= 3 ? 6 : 4);
        
        // Cria o marcador
        const marker = L.circleMarker(latlng, {
            radius: radius,
            fillColor: cor,
            color: cor,
            weight: 2,
            opacity: 1,
            fillOpacity: 0.8
        });
        
        // Ã°Å¸â€œÂ TOOLTIP ATUALIZADO
        let tooltipText = `${props.cidade} - ${props.tipo}<br/>
            ${props.qtd_elev} elevadores - ${props.marcaLicitacao}<br/>
            ${props.regiao} - ${props.status}`;
        
        if (props.nElevadorParado && props.nElevadorParado > 0) {
            tooltipText += `<br/><strong style="color: #dc3545;">Ã¢Å¡Â Ã¯Â¸Â ${props.nElevadorParado} parado(s)</strong>`;
        }
        
        marker.bindTooltip(tooltipText, {sticky: true});
        
        // Ã°Å¸â€œÂ POPUP ATUALIZADO
        let popupContent = `<div style="font-family: Arial, sans-serif;">
                <h4 style="margin: 0 0 10px 0; color: #333;">${props.unidade}</h4>
                <p><strong>Cidade:</strong> ${props.cidade}</p>
                <p><strong>EndereÃ§o:</strong> ${props.endereco}</p>
                <p><strong>Tipo:</strong> ${props.tipo}</p>
                <p><strong>Elevadores:</strong> ${props.qtd_elev}</p>
                <p><strong>Paradas:</strong> ${props.paradas}</p>
                <p><strong>Marca:</strong> ${props.marca}</p>
                <p><strong>Empresa:</strong> ${props.empresa}</p>
                <p><strong>Status:</strong> ${props.status}</p>`;
        
        // Ã°Å¸â€ â€¢ ADICIONA INFORMAÃƒâ€¡Ãƒâ€¢ES DE ELEVADORES PARADOS
        if (props.nElevadorParado && props.nElevadorParado > 0) {
            popupContent += `
                <hr style="margin: 10px 0;">
                <p style="color: #dc3545;"><strong>Ã¢Å¡Â Ã¯Â¸Â Elevadores Parados:</strong> ${props.nElevadorParado}</p>`;
        }
        if ((props.nElevadorParado && props.nElevadorParado > 0) || props.status && props.status.toLowerCase().includes('suspenso')) {    
            if (props.dataDeParada) {
                popupContent += `<p style="color: #dc3545;"><strong>Ã°Å¸â€œâ€¦ Data da Parada:</strong> ${props.dataDeParada}</p>`;
            }
            
            if (props.previsaoDeRetorno) {
                popupContent += `<p style="color: #dc3545;"><strong>Ã°Å¸â€â€ž PrevisÃ£o de Retorno:</strong> ${props.previsaoDeRetorno}</p>`;
            }
        }
        
        popupContent += '</div>';
        
        marker.bindPopup(popupContent, {maxWidth: 350});
        
        // Adiciona ao grupo de camadas
        layerGroup.addLayer(marker);
        
        if (index < 3) {
            console.log(`Ã¢Å“â€¦ Marcador ${index + 1} adicionado: ${props.unidade} (Cor: ${cor})`);
        }
    });
    
    console.log(`Ã°Å¸Å½â€° ${geojson.features.length} marcadores adicionados com sucesso!`);
}

// FunÃ§Ã£o para obter valores selecionados
function obterSelecionados(categoria) {
    const checkboxes = document.querySelectorAll(`input[id^="check-${categoria}-"]:checked`);
    const valores = Array.from(checkboxes).map(cb => cb.value);
    console.log(`Ã°Å¸â€Â Filtros selecionados para ${categoria}:`, valores);
    return valores;
}

// FunÃ§Ã£o para aplicar filtros
// FunÃ§Ã£o para aplicar filtros - COM SITUAÃƒâ€¡ÃƒÆ’O
function aplicarFiltros() {
    console.log('Ã°Å¸Å½Â¯ ========== APLICANDO FILTROS ==========');
    
    const tiposSelecionados = obterSelecionados('tipo');
    const regioesSelecionadas = obterSelecionados('regiao');
    const marcasSelecionadas = obterSelecionados('marca');
    const empresasSelecionadas = obterSelecionados('empresa');
    const situacoesSelecionadas = obterSelecionados('situacao'); // Ã°Å¸â€ â€¢ NOVO FILTRO

    console.log('Ã°Å¸â€œâ€¹ Resumo dos filtros:', {
        tipos: tiposSelecionados,
        regioes: regioesSelecionadas,
        marcas: marcasSelecionadas,
        empresas: empresasSelecionadas,
        situacoes: situacoesSelecionadas // Ã°Å¸â€ â€¢ NOVO
    });

    if (!dadosOriginais || !dadosOriginais.features) {
        console.error('Ã¢ÂÅ’ Dados originais nÃ£o disponÃƒÂ­veis');
        return;
    }

    // Filtra os dados
    const featuresOriginal = dadosOriginais.features.length;
    
    dadosFiltrados = {
        ...dadosOriginais,
        features: dadosOriginais.features.filter(feature => {
            const props = feature.properties;
            
            const passaTipo = tiposSelecionados.length === 0 || tiposSelecionados.includes(props.tipo);
            const passaRegiao = regioesSelecionadas.length === 0 || regioesSelecionadas.includes(props.regiao);
            const passaMarca = marcasSelecionadas.length === 0 || marcasSelecionadas.includes(props.marcaLicitacao);
            const passaEmpresa = empresasSelecionadas.length === 0 || empresasSelecionadas.includes(props.empresa);
            
            // Ã°Å¸â€ â€¢ NOVA LÃƒâ€œGICA DE FILTRO POR SITUAÃƒâ€¡ÃƒÆ’O
            let passaSituacao = true;
            if (situacoesSelecionadas.length > 0) {
                passaSituacao = false;
                
                // Verifica cada situaÃ§Ã£o selecionada
                situacoesSelecionadas.forEach(situacao => {
                    if (situacao === 'ativos') {
                        // Ativos: status ativo E sem elevadores parados
                        if (props.status && props.status.toLowerCase().includes('atividade') && 
                            (!props.nElevadorParado || props.nElevadorParado === 0)) {
                            passaSituacao = true;
                        }
                    } else if (situacao === 'suspensos') {
                        // Suspensos: status suspenso
                        if (props.status && props.status.toLowerCase().includes('suspenso')) {
                            passaSituacao = true;
                        }
                    } else if (situacao === 'parados') {
                        // Parados: tem elevadores parados
                        if (props.nElevadorParado && props.nElevadorParado > 0) {
                            passaSituacao = true;
                        }
                    }
                });
            }
            
            return passaTipo && passaRegiao && passaMarca && passaEmpresa && passaSituacao;
        })
    };

    const featuresFiltradas = dadosFiltrados.features.length;
    console.log(`Ã°Å¸â€œÅ  Filtragem concluÃƒÂ­da: ${featuresOriginal} Ã¢â€ â€™ ${featuresFiltradas} features`);

    // Atualiza o mapa
    atualizarMapa();
    
    // Atualiza contador
    atualizarContadorFiltros();
    
    // Atualiza estatÃƒÂ­sticas
    atualizarEstatisticasDashboard();
    
    console.log('Ã¢Å“â€¦ ========== FILTROS APLICADOS ==========');
}

// FunÃ§Ã£o para atualizar o mapa
function atualizarMapa() {
    console.log('Ã°Å¸â€”ÂºÃ¯Â¸Â ========== ATUALIZANDO MAPA ==========');
    
    if (!layerGroup) {
        console.error('Ã¢ÂÅ’ LayerGroup nÃ£o disponÃƒÂ­vel');
        return;
    }

    // Limpa todos os marcadores
    layerGroup.clearLayers();
    console.log('Ã°Å¸Â§Â¹ Marcadores removidos');

    // Adiciona novos marcadores filtrados
    adicionarMarcadores(dadosFiltrados);
    
    console.log('Ã¢Å“â€¦ ========== MAPA ATUALIZADO ==========');
}

// FunÃ§Ã£o para atualizar contador
function atualizarContadorFiltros() {
    if (!dadosFiltrados.features) return;
    
    const totalElevadores = dadosFiltrados.features.reduce((total, feature) => {
        return total + feature.properties.qtd_elev;
    }, 0);

    const totalLocais = dadosFiltrados.features.length;

    const elemElevadores = document.getElementById('total-elevadores-filtro');
    const elemLocais = document.getElementById('total-locais-filtro');
    
    if (elemElevadores) elemElevadores.textContent = totalElevadores;
    if (elemLocais) elemLocais.textContent = totalLocais;

    const contadorElement = document.getElementById('contador-resultados');
    if (contadorElement) {
        if (totalElevadores === 0) {
            contadorElement.style.background = '#ffebee';
            contadorElement.style.color = '#c62828';
            contadorElement.style.borderColor = '#ef9a9a';
        } else {
            contadorElement.style.background = '#e8f5e8';
            contadorElement.style.color = '#2e7d32';
            contadorElement.style.borderColor = '#a5d6a7';
        }
    }
    
    console.log(`Ã¯Â¿Â½Ã¯Â¿Â½ Contador atualizado: ${totalElevadores} elevadores em ${totalLocais} locais`);
}

// FunÃ§Ã£o para atualizar estatÃƒÂ­sticas da dashboard - COM SITUAÃƒâ€¡ÃƒÆ’O
function atualizarEstatisticasDashboard() {
    const tiposSelecionados = obterSelecionados('tipo');
    const regioesSelecionadas = obterSelecionados('regiao');
    const marcasSelecionadas = obterSelecionados('marca');
    const empresasSelecionadas = obterSelecionados('empresa');
    const situacoesSelecionadas = obterSelecionados('situacao'); // Ã°Å¸â€ â€¢ NOVO

    // Se nenhum filtro ativo, limpa todos os filtros
    if (tiposSelecionados.length === 0 && regioesSelecionadas.length === 0 && 
        marcasSelecionadas.length === 0 && empresasSelecionadas.length === 0 &&
        situacoesSelecionadas.length === 0) { // Ã°Å¸â€ â€¢ INCLUIR NOVO FILTRO
        console.log('Ã¢ÂÂ­Ã¯Â¸Â Nenhum filtro ativo, limpando todos os filtros');
        limparFiltros();
        return;
    }

    // Monta parÃƒÂ¢metros
    const params = new URLSearchParams();
    tiposSelecionados.forEach(tipo => params.append('tipo', tipo));
    regioesSelecionadas.forEach(regiao => params.append('regiao', regiao));
    marcasSelecionadas.forEach(marca => params.append('marca', marca));
    empresasSelecionadas.forEach(empresa => params.append('empresa', empresa));
    situacoesSelecionadas.forEach(situacao => params.append('situacao', situacao)); // Ã°Å¸â€ â€¢ NOVO

    console.log('Ã°Å¸â€œÂ¡ Fazendo requisiÃ§Ã£o para API...');

    // ... resto da funÃ§Ã£o permanece igual
    // Mostra loading
    const loadingElement = document.getElementById('loading-stats');
    if (loadingElement) loadingElement.style.display = 'block';

    // Faz requisiÃ§Ã£o
    fetch('/api/filtrar?' + params.toString())
        .then(response => response.json())
        .then(data => {
            if (loadingElement) loadingElement.style.display = 'none';
            
            console.log('Ã°Å¸â€œÂ¡ Resposta da API:', data);
            
            if (data.success) {
                // Atualiza cards
                const elementos = {
                    'stat-predios': data.stats.total_predios,
                    'stat-elevadores': data.stats.total_elevadores,
                    'stat-cidades': data.stats.cidades,
                    'stat-regioes': data.stats.regioes,
                    'stat-ativos': data.stats.em_atividade,
                    'stat-suspensos': data.stats.suspensos,
                    'stat-parados':data.stats.elevadores_parados
                };
                
                for (let id in elementos) {
                    const elem = document.getElementById(id);
                    if (elem) {
                        elem.textContent = elementos[id];
                        console.log(`Ã°Å¸â€œÅ  Card ${id} atualizado para:`, elementos[id]);
                    }
                }
                // Ã¢Å“â€¦ Sincroniza contador dos filtros com os mesmos valores da API
                const elemLocaisFiltro = document.getElementById('total-locais-filtro');
                const elemElevadoresFiltro = document.getElementById('total-elevadores-filtro');

                if (elemLocaisFiltro) elemLocaisFiltro.textContent = data.stats.total_predios;
                if (elemElevadoresFiltro) elemElevadoresFiltro.textContent = data.stats.total_elevadores;

                // Atualiza estatÃƒÂ­sticas detalhadas
                mostrarEstatisticasDetalhadas(data.stats);
                atualizarElevadoresParados();
            }
        })
        .catch(error => {
            if (loadingElement) loadingElement.style.display = 'none';
            console.error('Ã¢ÂÅ’ Erro ao carregar estatÃƒÂ­sticas:', error);
        });
}

// FunÃ§Ã£o para mostrar estatÃƒÂ­sticas detalhadas
function mostrarEstatisticasDetalhadas(stats) {
    const container = document.getElementById('stats-detalhadas');
    if (!container) return;
    
    let html = '<div class="row">';
    
    const categorias = [
        {titulo: 'Por Tipo', dados: stats.por_tipo},
        {titulo: 'Por RegiÃ£o', dados: stats.por_regiao},
        {titulo: 'Por Marca', dados: stats.por_marca},
        {titulo: 'Por Status', dados: stats.por_status}
    ];
    
    categorias.forEach(categoria => {
        html += `<div class="col-md-3"><h6>${categoria.titulo}</h6><ul class="list-unstyled">`;
        for (let [key, value] of Object.entries(categoria.dados)) {
            html += `<li><strong>${key}:</strong> ${value}</li>`;
        }
        html += '</ul></div>';
    });
    
    html += '</div>';
    container.innerHTML = html;
}

// FunÃ§ÃƒÂµes auxiliares
function limparFiltros() {
    console.log('Ã°Å¸Â§Â¹ Limpando todos os filtros...');
    
    const checkboxes = document.querySelectorAll('input[type="checkbox"]');
    checkboxes.forEach(cb => cb.checked = false);
    
    dadosFiltrados = dadosOriginais;
    atualizarMapa();
    atualizarContadorFiltros();
    
    // Restaura valores originais dos cards
    const valoresOriginais = window.statsOriginais || {};
    for (let id in valoresOriginais) {
        const elem = document.getElementById(id);
        if (elem) elem.textContent = valoresOriginais[id];
    }
    
    // Ã¢Å“â€¦ Sincroniza contador de filtros com valores originais
    const elemLocaisFiltro = document.getElementById('total-locais-filtro');
    const elemElevadoresFiltro = document.getElementById('total-elevadores-filtro');

    if (elemLocaisFiltro) elemLocaisFiltro.textContent = valoresOriginais['stat-predios'];
    if (elemElevadoresFiltro) elemElevadoresFiltro.textContent = valoresOriginais['stat-elevadores'];

    const statsContainer = document.getElementById('stats-detalhadas');
    if (statsContainer) {
        statsContainer.innerHTML = '<p class="text-muted">Use os filtros no mapa para ver estatÃƒÂ­sticas especÃƒÂ­ficas.</p>';
    }
    
    console.log('Ã¢Å“â€¦ Filtros limpos');
    carregarElevadoresParadosIniciais();
}

function selecionarTodos() {
    console.log('Ã¢Å“â€¦ Selecionando todos os filtros...');
    
    const checkboxes = document.querySelectorAll('input[type="checkbox"]');
    checkboxes.forEach(cb => cb.checked = true);
    aplicarFiltros();
}

function toggleCategoria(categoria) {
    const div = document.getElementById(`filtros-${categoria}`);
    const button = document.getElementById(`toggle-${categoria}`);

    if (div && button) {
        if (div.style.display === 'none') {
            div.style.display = 'block';
            button.textContent = 'Ã¢Å¾â€“';
        } else {
            div.style.display = 'none';
            button.textContent = 'Ã¢Å¾â€¢';
        }
    }
}

function atualizarDados() {
    const btn = event.target;
    const originalText = btn.innerHTML;
    btn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Atualizando...';
    btn.disabled = true;
    
    // Verifica se estamos na pÃƒÂ¡gina de KPIs
    const isKPIsPage = window.location.pathname === '/kpis';
    const endpoint = isKPIsPage ? '/atualizar-kpis' : '/atualizar';
    
    fetch(endpoint)
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                alert((isKPIsPage ? 'KPIs' : 'Dados') + ' atualizados!\n' + data.message);
                location.reload();
            } else {
                alert('Erro: ' + data.message);
            }
        })
        .catch(error => {
            alert('Erro na requisiÃ§Ã£o');
        })
        .finally(() => {
            btn.innerHTML = originalText;
            btn.disabled = false;
        });
}
// ========== FUNÃƒâ€¡Ãƒâ€¢ES PARA ELEVADORES PARADOS ==========

// FunÃ§Ã£o para carregar elevadores parados iniciais
function carregarElevadoresParadosIniciais() {
    console.log('Ã°Å¸â€Â´ Carregando elevadores parados iniciais...');
    
    if (!dadosOriginais || !dadosOriginais.features) {
        console.log('Ã¢Å¡Â Ã¯Â¸Â Dados nÃ£o disponÃƒÂ­veis para elevadores parados');
        return;
    }
    
    const elevadoresParados = [];
    
    dadosOriginais.features.forEach(feature => {
        const props = feature.properties;
        if (props.nElevadorParado && props.nElevadorParado > 0) {
            elevadoresParados.push({
                cidade: props.cidade,
                unidade: props.unidade,
                tipo: props.tipo,
                quantidade: props.nElevadorParado,
                empresa: props.empresa,
                dataDeParada: props.dataDeParada,
                previsaoDeRetorno: props.previsaoDeRetorno,
                qtd_total_elevadores: props.qtd_elev
            });
        }
    });
    
    // Ordena por cidade e unidade
    elevadoresParados.sort((a, b) => {
        if (a.cidade !== b.cidade) return a.cidade.localeCompare(b.cidade);
        return a.unidade.localeCompare(b.unidade);
    });
    
    console.log(`Ã°Å¸â€Â´ ${elevadoresParados.length} elevadores parados encontrados inicialmente`);
    
    mostrarElevadoresParados(elevadoresParados);
}

// FunÃ§Ã£o para atualizar elevadores parados via API
function atualizarElevadoresParados() {
    const tiposSelecionados = obterSelecionados('tipo');
    const regioesSelecionadas = obterSelecionados('regiao');
    const marcasSelecionadas = obterSelecionados('marca');
    const empresasSelecionadas = obterSelecionados('empresa');
    const situacoesSelecionadas = obterSelecionados('situacao');

    // Se nenhum filtro ativo, usa dados iniciais
    if (tiposSelecionados.length === 0 && regioesSelecionadas.length === 0 && 
        marcasSelecionadas.length === 0 && empresasSelecionadas.length === 0 &&
        situacoesSelecionadas.length === 0) {
        console.log('Ã¢ÂÂ­Ã¯Â¸Â Nenhum filtro ativo, usando dados iniciais de elevadores parados');
        carregarElevadoresParadosIniciais();
        return;
    }

    // Monta parÃƒÂ¢metros
    const params = new URLSearchParams();
    tiposSelecionados.forEach(tipo => params.append('tipo', tipo));
    regioesSelecionadas.forEach(regiao => params.append('regiao', regiao));
    marcasSelecionadas.forEach(marca => params.append('marca', marca));
    empresasSelecionadas.forEach(empresa => params.append('empresa', empresa));
    situacoesSelecionadas.forEach(situacao => params.append('situacao', situacao));

    console.log('Ã°Å¸â€œÂ¡ Fazendo requisiÃ§Ã£o para API de elevadores parados...');

    // Mostra loading
    const loadingElement = document.getElementById('loading-elevadores-parados');
    if (loadingElement) loadingElement.style.display = 'block';

    // Faz requisiÃ§Ã£o
    fetch('/api/elevadores-parados?' + params.toString())
        .then(response => response.json())
        .then(data => {
            if (loadingElement) loadingElement.style.display = 'none';
            
            console.log('Ã°Å¸â€œÂ¡ Resposta da API elevadores parados:', data);
            
            if (data.success) {
                mostrarElevadoresParados(data.elevadores_parados);
            }
        })
        .catch(error => {
            if (loadingElement) loadingElement.style.display = 'none';
            console.error('Ã¢ÂÅ’ Erro ao carregar elevadores parados:', error);
        });
}

// FunÃ§Ã£o para exibir lista de elevadores parados
function mostrarElevadoresParados(elevadoresParados) {
    const container = document.getElementById('lista-elevadores-parados');
    const badge = document.getElementById('badge-total-parados');
    
    if (!container) return;
    
    // Atualiza badge com total
    if (badge) {
        badge.textContent = elevadoresParados.length;
    }
    
    if (elevadoresParados.length === 0) {
        container.innerHTML = `
            <div class="alert alert-success text-center">
                <i class="fas fa-check-circle"></i>
                <strong>Ãƒâ€œtimas notÃƒÂ­cias!</strong> Nenhum elevador parado encontrado com os filtros aplicados.
            </div>
        `;
        return;
    }
    
    let html = `
        <div class="alert alert-warning">
            <i class="fas fa-exclamation-triangle"></i>
            <strong>${elevadoresParados.length} elevador(es) parado(s)</strong> encontrado(s) com os filtros aplicados.
        </div>
        <div class="table-responsive">
            <table class="table table-striped table-hover">
                <thead class="table-dark">
                    <tr>
                        <th><i class="fas fa-map-marker-alt"></i> Cidade</th>
                        <th><i class="fas fa-building"></i> Unidade</th>
                        <th><i class="fas fa-elevator"></i> Tipo</th>
                        <th><i class="fas fa-hashtag"></i> Parados</th>
                        <th><i class="fas fa-industry"></i> Empresa</th>
                        <th><i class="fas fa-calendar-times"></i> Data Parada</th>
                        <th><i class="fas fa-calendar-check"></i> PrevisÃ£o Retorno</th>
                    </tr>
                </thead>
                <tbody>
    `;
    
    elevadoresParados.forEach((elevador, index) => {
        const dataParada = elevador.dataDeParada || '<span class="text-muted">-</span>';
        const previsaoRetorno = elevador.previsaoDeRetorno || '<span class="text-muted">-</span>';
        
        // Ã¢Å“â€¦ VERSÃƒÆ’O MELHORADA
        const tipoLimpo = elevador.tipo.toLowerCase().trim();
        const badgeColor = tipoLimpo === "montacarga" ? "bg-secondary":
                        tipoLimpo === "passageiro" ? "bg-info":
                        tipoLimpo === "plataforma" ? "bg-success":
                        "bg-primary";
        
        html += `
            <tr>
                <td><strong>${elevador.cidade}</strong></td>
                <td>${elevador.unidade}</td>
                <td>
                    <span class="badge ${badgeColor}">${elevador.tipo}</span>
                </td>
                <td>
                    <span class="badge bg-danger">${elevador.quantidade}</span>
                    <small class="text-muted d-block">de ${elevador.qtd_total_elevadores} total</small>
                </td>
                <td>${elevador.empresa}</td>
                <td>${dataParada}</td>
                <td>${previsaoRetorno}</td>
            </tr>
        `;
    });
    
    html += `
                </tbody>
            </table>
        </div>
        <div class="mt-3">
            <small class="text-muted">
                <i class="fas fa-info-circle"></i>
                Lista atualizada automaticamente conforme os filtros aplicados no mapa.
            </small>
        </div>
    `;
    
    container.innerHTML = html;
    
    console.log(`Ã¢Å“â€¦ Lista de elevadores parados atualizada: ${elevadoresParados.length} itens`);
}
</script>
{% endblock %}
--- Fim do código: index_nativo.html ---

--- Início do código: kpis.html ---
{% extends "base.html" %}

{% block title %}KPIs de ManutenÃ§Ã£o - Sistema de Elevadores TJ/MG{% endblock %}

{% block extra_head %}
<!-- Chart.js -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://cdn.jsdelivr.net/npm/date-fns@2.29.3/index.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns@2.0.0/dist/chartjs-adapter-date-fns.bundle.min.js"></script>
{% endblock %}

{% block content %}
<div class="row">
    <div class="col-12">
        <h1 class="mb-4">
            <i class="fas fa-chart-line"></i> 
            KPIs de ManutenÃ§Ã£o - Elevadores TJ/MG
        </h1>
    </div>
</div>

{% if erro %}
    <div class="alert alert-danger" role="alert">
        <i class="fas fa-exclamation-triangle"></i> {{ erro }}
    </div>
{% else %}
    <!-- Filtros AvanÃ§ados -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5><i class="fas fa-filter"></i> Filtros</h5>
                    <div>
                        <button class="btn btn-success btn-sm me-2" onclick="aplicarFiltros()">
                            <i class="fas fa-search"></i> Aplicar Filtros
                        </button>
                        <button class="btn btn-secondary btn-sm me-2" onclick="limparFiltrosKPIs()">
                            <i class="fas fa-eraser"></i> Limpar
                        </button>
                        <button class="btn btn-info btn-sm" onclick="atualizarDados()">
                            <i class="fas fa-sync-alt"></i> Atualizar
                        </button>
                    </div>
                </div>
                <div class="card-body">
                    <!-- Primeira linha: Filtros de Data -->
                    <div class="row mb-3">
                        <div class="col-md-3">
                            <label class="form-label"><i class="fas fa-calendar"></i> Data de InÃƒÂ­cio</label>
                            <input type="date" class="form-control" id="data-inicio">
                        </div>
                        <div class="col-md-3">
                            <label class="form-label"><i class="fas fa-calendar"></i> Data de Fim</label>
                            <input type="date" class="form-control" id="data-fim">
                        </div>
                        <div class="col-md-6">
                            <label class="form-label"><i class="fas fa-clock"></i> PerÃƒÂ­odo Predefinido</label>
                            <select class="form-select" id="filtro-periodo" onchange="selecionarPeriodoPredefinido()">
                                <option value="">Selecione um perÃƒÂ­odo...</option>
                                <option value="ultima-semana">ÃƒÅ¡ltima Semana</option>
                                <option value="ultimo-mes">ÃƒÅ¡ltimo MÃƒÂªs</option>
                                <option value="ultimos-3-meses">ÃƒÅ¡ltimos 3 Meses</option>
                                <option value="ultimos-6-meses">ÃƒÅ¡ltimos 6 Meses</option>
                                <option value="ultimo-ano">ÃƒÅ¡ltimo Ano</option>
                                <option value="ultimos-2-anos">ÃƒÅ¡ltimos 2 Anos</option>
                                <option value="ultimos-5-anos">ÃƒÅ¡ltimos 5 Anos</option>
                                <option value="todo-periodo">Todo o PerÃƒÂ­odo</option>
                            </select>
                        </div>
                    </div>
                    
                    <!-- Segunda linha: Outros filtros -->
                    <div class="row">
                        <!-- Filtro por Status -->
                        <div class="col-md-3">
                            <label class="form-label"><i class="fas fa-tasks"></i> Status</label>
                            <select class="form-select" id="filtro-status">
                                <option value="">Todos os status</option>
                                <option value="ConcluÃƒÂ­da">ConcluÃƒÂ­da</option>
                                <option value="Confirmada">Confirmada</option>
                            </select>
                        </div>
                        
                        <!-- Filtro por Categoria -->
                        <div class="col-md-3">
                            <label class="form-label"><i class="fas fa-tags"></i> Categoria</label>
                            <select class="form-select" id="filtro-categoria">
                                <option value="">Todas as categorias</option>
                                <!-- Preenchido dinamicamente via JavaScript -->
                            </select>
                        </div>
                        
                        <!-- Filtro por EdifÃƒÂ­cio -->
                        <div class="col-md-6">
                            <label class="form-label"><i class="fas fa-building"></i> EdifÃƒÂ­cio</label>
                            <select class="form-select" id="filtro-edificio">
                                <option value="">Todos os edifÃƒÂ­cios</option>
                                <!-- Preenchido dinamicamente via JavaScript -->
                            </select>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Cards de KPIs Principais -->
    <div class="row mb-4" id="kpis-cards">
        <div class="col-md-3">
            <div class="card bg-primary text-white">
                <div class="card-body text-center">
                    <i class="fas fa-clipboard-list fa-2x mb-2"></i>
                    <h3 id="total-chamados">{{ metricas.total_chamados or 0 }}</h3>
                    <p class="mb-0">Total de Chamados</p>
                </div>
            </div>
        </div>
        
        <div class="col-md-3">
            <div class="card bg-success text-white">
                <div class="card-body text-center">
                    <i class="fas fa-check-circle fa-2x mb-2"></i>
                    <h3 id="chamados-concluidos">{{ metricas.chamados_concluidos or 0 }}</h3>
                    <p class="mb-0">Chamados ConcluÃƒÂ­dos</p>
                </div>
            </div>
        </div>
        
        <div class="col-md-3">
            <div class="card bg-warning text-white">
                <div class="card-body text-center">
                    <i class="fas fa-clock fa-2x mb-2"></i>
                    <h3 id="tempo-mediano">{{ "%.1f"|format(metricas.tempo_mediano_reparo or 0) }}h</h3>
                    <p class="mb-0">Tempo Mediano de Reparo</p>
                </div>
            </div>
        </div>
        
        <div class="col-md-3">
            <div class="card bg-info text-white">
                <div class="card-body text-center">
                    <i class="fas fa-percentage fa-2x mb-2"></i>
                    <h3 id="disponibilidade">{{ "%.1f"|format(metricas.disponibilidade or 0) }}%</h3>
                    <p class="mb-0">Taxa de ConclusÃ£o</p>
                </div>
            </div>
        </div>
    </div>

    <!-- Indicador de Filtros Ativos -->
    <div class="row mb-3" id="filtros-ativos" style="display: none;">
        <div class="col-12">
            <div class="alert alert-info">
                <i class="fas fa-filter"></i> 
                <strong>Filtros ativos:</strong> 
                <span id="descricao-filtros"></span>
                <button class="btn btn-sm btn-outline-primary ms-2" onclick="limparFiltrosKPIs()">
                    <i class="fas fa-times"></i> Remover filtros
                </button>
            </div>
        </div>
    </div>

    <!-- GrÃƒÂ¡ficos -->
    <div class="row">
        <!-- GrÃƒÂ¡fico de Chamados por MÃƒÂªs -->
        <div class="col-md-6 mb-4">
            <div class="card">
                <div class="card-header">
                    <h5><i class="fas fa-chart-line"></i> Chamados por MÃƒÂªs</h5>
                    <small class="text-muted">Clique nos pontos para filtrar por mÃƒÂªs</small>
                </div>
                <div class="card-body">
                    <canvas id="grafico-chamados-mes" height="300"></canvas>
                </div>
            </div>
        </div>

        <!-- GrÃƒÂ¡fico de Categorias de Problema -->
        <div class="col-md-6 mb-4">
            <div class="card">
                <div class="card-header">
                    <h5><i class="fas fa-chart-pie"></i> Categorias de Problemas</h5>
                    <small class="text-muted">Clique nas fatias para filtrar por categoria</small>
                </div>
                <div class="card-body">
                    <canvas id="grafico-categorias" height="300"></canvas>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <!-- GrÃƒÂ¡fico de EdifÃƒÂ­cios Mais ProblemÃƒÂ¡ticos -->
        <div class="col-md-6 mb-4">
            <div class="card">
                <div class="card-header">
                    <h5><i class="fas fa-chart-bar"></i> EdifÃƒÂ­cios com Mais Chamados</h5>
                    <small class="text-muted">Clique nas barras para filtrar por edifÃƒÂ­cio</small>
                </div>
                <div class="card-body">
                    <canvas id="grafico-edificios" height="300"></canvas>
                </div>
            </div>
        </div>

        <!-- GrÃƒÂ¡fico de Tempo por Categoria -->
        <div class="col-md-6 mb-4">
            <div class="card">
                <div class="card-header">
                    <h5><i class="fas fa-stopwatch"></i> Tempo Mediano por Categoria</h5>
                    <small class="text-muted">Clique nas barras para filtrar por categoria</small>
                </div>
                <div class="card-body">
                    <canvas id="grafico-tempo-categoria" height="300"></canvas>
                </div>
            </div>
        </div>
    </div>

    <!-- Ã°Å¸â€ â€¢ NOVA SEÃƒâ€¡ÃƒÆ’O: GrÃƒÂ¡ficos de Elevadores -->
    <div class="row">
        <!-- GrÃƒÂ¡fico de Chamados por Elevador -->
        <div class="col-md-6 mb-4">
            <div class="card">
                <div class="card-header">
                    <h5><i class="fas fa-elevator"></i> Chamados por Elevador</h5>
                    <small class="text-muted">Clique nas barras para filtrar por elevador especÃƒÂ­fico</small>
                </div>
                <div class="card-body">
                    <canvas id="grafico-chamados-elevador" height="300"></canvas>
                </div>
            </div>
        </div>

        <!-- GrÃƒÂ¡fico de Tempo Mediano por Elevador -->
        <div class="col-md-6 mb-4">
            <div class="card">
                <div class="card-header">
                    <h5><i class="fas fa-clock"></i> Tempo Mediano de Atendimento por Elevador</h5>
                    <small class="text-muted">Clique nas barras para filtrar por elevador especÃƒÂ­fico</small>
                </div>
                <div class="card-body">
                    <canvas id="grafico-tempo-elevador" height="300"></canvas>
                </div>
            </div>
        </div>
    </div>

    <!-- Tabela de Resumo Filtrado -->
    <div class="row">
        <div class="card">
            <div class="card-header">
                <h5><i class="fas fa-table"></i> Resumo dos Dados Filtrados</h5>
            </div>
            <div class="card-body">
                <div id="loading-resumo" class="text-center" style="display: none;">
                    <i class="fas fa-spinner fa-spin"></i> Carregando dados...
                </div>
                <div id="tabela-resumo">
                    <p class="text-muted text-center">Use os filtros acima ou clique nos grÃƒÂ¡ficos para ver dados especÃƒÂ­ficos.</p>
                </div>
            </div>
        </div>
    </div>
{% endif %}

<script>
// Dados para JavaScript
const dadosKPIsOriginais = {{ metricas|tojson|safe }};
let dadosKPIsFiltrados = dadosKPIsOriginais;
let graficos = {};
let filtrosAtivos = {};

console.log('Ã°Å¸â€œÅ  Dados de KPIs recebidos:', dadosKPIsOriginais);

// Inicializa grÃƒÂ¡ficos quando a pÃƒÂ¡gina carrega
document.addEventListener('DOMContentLoaded', function() {
    console.log('Ã°Å¸â€œâ€ž DOM carregado, criando grÃƒÂ¡ficos de KPIs...');
    preencherFiltros();
    criarGraficos();
});

function preencherFiltros() {
    // Preenche filtro de categorias
    const selectCategoria = document.getElementById('filtro-categoria');
    const categorias = Object.keys(dadosKPIsOriginais.categorias_problema || {});
    categorias.forEach(categoria => {
        const option = document.createElement('option');
        option.value = categoria;
        option.textContent = categoria;
        selectCategoria.appendChild(option);
    });
    
    // Preenche filtro de edifÃƒÂ­cios
    const selectEdificio = document.getElementById('filtro-edificio');
    const edificios = Object.keys(dadosKPIsOriginais.chamados_por_edificio || {});
    edificios.forEach(edificio => {
        const option = document.createElement('option');
        option.value = edificio;
        option.textContent = edificio.length > 50 ? edificio.substring(0, 50) + '...' : edificio;
        selectEdificio.appendChild(option);
    });
}

// Ã°Å¸â€œâ€¦ NOVA FUNÃƒâ€¡ÃƒÆ’O: Selecionar perÃƒÂ­odo predefinido
function selecionarPeriodoPredefinido() {
    const periodo = document.getElementById('filtro-periodo').value;
    
    if (periodo && periodo !== 'todo-periodo') {
        // Limpa datas personalizadas quando seleciona perÃƒÂ­odo predefinido
        document.getElementById('data-inicio').value = '';
        document.getElementById('data-fim').value = '';
    }
    
    console.log('Ã°Å¸â€œâ€¦ PerÃƒÂ­odo predefinido selecionado:', periodo);
}

function criarGraficos() {
    // Destroi grÃƒÂ¡ficos existentes
    Object.values(graficos).forEach(grafico => {
        if (grafico) grafico.destroy();
    });
    
    // Cria novos grÃƒÂ¡ficos
    criarGraficoChamadosPorMes();
    criarGraficoCategorias();
    criarGraficoEdificios();
    criarGraficoTempoPorCategoria();
    
    // Ã°Å¸â€ â€¢ NOVOS GRÃƒÂFICOS DE ELEVADORES
    criarGraficoChamadosPorElevador();
    criarGraficoTempoMedianoPorElevador();
}

function criarGraficoChamadosPorMes() {
    const ctx = document.getElementById('grafico-chamados-mes');
    if (!ctx) return;
    
    const dados = dadosKPIsFiltrados.chamados_por_mes || {};
    const labels = Object.keys(dados).sort();
    const values = labels.map(label => dados[label]);
    
    graficos.chamadosMes = new Chart(ctx, {
        type: 'line',
        data: {
            labels: labels,
            datasets: [{
                label: 'Chamados',
                data: values,
                borderColor: '#007bff',
                backgroundColor: 'rgba(0, 123, 255, 0.1)',
                borderWidth: 3,
                fill: true,
                tension: 0.4,
                pointBackgroundColor: '#007bff',
                pointBorderColor: '#fff',
                pointBorderWidth: 2,
                pointRadius: 6,
                pointHoverRadius: 8
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    display: false
                }
            },
            scales: {
                y: {
                    beginAtZero: true,
                    ticks: {
                        stepSize: 1
                    }
                }
            },
            onClick: (event, elements) => {
                if (elements.length > 0) {
                    const index = elements[0].index;
                    const mesAno = labels[index];
                    filtrarPorMes(mesAno);
                }
            },
            onHover: (event, elements) => {
                event.native.target.style.cursor = elements.length > 0 ? 'pointer' : 'default';
            }
        }
    });
}

function criarGraficoCategorias() {
    const ctx = document.getElementById('grafico-categorias');
    if (!ctx) return;
    
    const dados = dadosKPIsFiltrados.categorias_problema || {};
    
    // Ã°Å¸â€â€ž ORDENAÃƒâ€¡ÃƒÆ’O DECRESCENTE
    const entries = Object.entries(dados).sort((a, b) => b[1] - a[1]);
    const labels = entries.map(entry => entry[0]);
    const values = entries.map(entry => entry[1]);
    
    const cores = [
        '#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', 
        '#9966FF', '#FF9F40', '#FF6384', '#C9CBCF'
    ];
    
    graficos.categorias = new Chart(ctx, {
        type: 'doughnut',
        data: {
            labels: labels,
            datasets: [{
                data: values,
                backgroundColor: cores.slice(0, labels.length),
                borderWidth: 2,
                borderColor: '#fff',
                hoverBorderWidth: 4
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    position: 'bottom'
                }
            },
            onClick: (event, elements) => {
                if (elements.length > 0) {
                    const index = elements[0].index;
                    const categoria = labels[index];
                    filtrarPorCategoria(categoria);
                }
            },
            onHover: (event, elements) => {
                event.native.target.style.cursor = elements.length > 0 ? 'pointer' : 'default';
            }
        }
    });
}

// Ã°Å¸â€â€ž MODIFICADO: GrÃƒÂ¡fico de EdifÃƒÂ­cios com ordenaÃ§Ã£o decrescente garantida
function criarGraficoEdificios() {
    const ctx = document.getElementById('grafico-edificios');
    if (!ctx) return;
    
    const dados = dadosKPIsFiltrados.chamados_por_edificio || {};
    
    // Ã°Å¸â€â€ž ORDENAÃƒâ€¡ÃƒÆ’O DECRESCENTE EXPLÃƒÂCITA (garantindo que funcione mesmo se backend nÃ£o ordenar)
    const entries = Object.entries(dados)
        .sort((a, b) => b[1] - a[1])  // Ordena por valor decrescente
        .slice(0, 10); // Top 10
    
    const labels = entries.map(entry => entry[0]);
    const values = entries.map(entry => entry[1]);
    
    console.log('Ã°Å¸ÂÂ¢ Dados de edifÃƒÂ­cios ordenados:', entries);
    
    graficos.edificios = new Chart(ctx, {
        type: 'bar',
        data: {
            labels: labels.map(label => label.length > 20 ? label.substring(0, 20) + '...' : label),
            datasets: [{
                label: 'Chamados',
                data: values,
                backgroundColor: '#28a745',
                borderColor: '#1e7e34',
                borderWidth: 1,
                hoverBackgroundColor: '#34ce57'
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    display: false
                }
            },
            scales: {
                y: {
                    beginAtZero: true,
                    ticks: {
                        stepSize: 1
                    }
                },
                x: {
                    ticks: {
                        maxRotation: 45
                    }
                }
            },
            onClick: (event, elements) => {
                if (elements.length > 0) {
                    const index = elements[0].index;
                    const edificio = labels[index];
                    filtrarPorEdificio(edificio);
                }
            },
            onHover: (event, elements) => {
                event.native.target.style.cursor = elements.length > 0 ? 'pointer' : 'default';
            }
        }
    });
}

// Ã°Å¸â€â€ž MODIFICADO: GrÃƒÂ¡fico de Tempo por Categoria com ordenaÃ§Ã£o decrescente garantida
function criarGraficoTempoPorCategoria() {
    const ctx = document.getElementById('grafico-tempo-categoria');
    if (!ctx) return;
    
    const dados = dadosKPIsFiltrados.tempo_por_categoria || {};
    
    // Ã°Å¸â€â€ž ORDENAÃƒâ€¡ÃƒÆ’O DECRESCENTE EXPLÃƒÂCITA (garantindo que funcione mesmo se backend nÃ£o ordenar)
    const entries = Object.entries(dados)
        .sort((a, b) => b[1] - a[1]); // Ordena por valor decrescente
    
    const labels = entries.map(entry => entry[0]);
    const values = entries.map(entry => Math.round(entry[1] * 10) / 10);
    
    console.log('Ã¢ÂÂ±Ã¯Â¸Â Dados de tempo por categoria ordenados:', entries);
    
    graficos.tempoCategoria = new Chart(ctx, {
        type: 'bar',
        data: {
            labels: labels,
            datasets: [{
                label: 'Tempo Mediano (horas)',
                data: values,
                backgroundColor: '#ffc107',
                borderColor: '#e0a800',
                borderWidth: 1,
                hoverBackgroundColor: '#ffcd39'
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    display: false
                }
            },
            scales: {
                y: {
                    beginAtZero: true,
                    ticks: {
                        callback: function(value) {
                            return value + 'h';
                        }
                    }
                }
            },
            onClick: (event, elements) => {
                if (elements.length > 0) {
                    const index = elements[0].index;
                    const categoria = labels[index];
                    filtrarPorCategoria(categoria);
                }
            },
            onHover: (event, elements) => {
                event.native.target.style.cursor = elements.length > 0 ? 'pointer' : 'default';
            }
        }
    });
}

// Ã°Å¸â€ â€¢ NOVO: GrÃƒÂ¡fico de Chamados por Elevador
function criarGraficoChamadosPorElevador() {
    const ctx = document.getElementById('grafico-chamados-elevador');
    if (!ctx) return;
    
    const dados = dadosKPIsFiltrados.chamados_por_equipamento || {};
    
    // OrdenaÃ§Ã£o decrescente e limitaÃ§Ã£o aos top 15 elevadores
    const entries = Object.entries(dados)
        .sort((a, b) => b[1] - a[1])
        .slice(0, 15); // Top 15 elevadores
    
    const labels = entries.map(entry => String(entry[0]));
    const values = entries.map(entry => entry[1]);
    
    console.log('Ã°Å¸Ââ€”Ã¯Â¸Â Dados de chamados por elevador ordenados:', entries);
    
    graficos.chamadosElevador = new Chart(ctx, {
        type: 'bar',
        data: {
            labels: labels,
            datasets: [{
                label: 'Chamados',
                data: values,
                backgroundColor: '#007bff',
                borderColor: '#0056b3',
                borderWidth: 1,
                hoverBackgroundColor: '#0056b3'
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    display: false
                },
                tooltip: {
                    callbacks: {
                        title: function(context) {
                            return 'Elevador: ' + context[0].label;
                        },
                        label: function(context) {
                            return 'Chamados: ' + context.parsed.y;
                        }
                    }
                }
            },
            scales: {
                y: {
                    beginAtZero: true,
                    ticks: {
                        stepSize: 1
                    }
                },
                x: {
                    ticks: {
                        maxRotation: 45,
                        font: {
                            size: 10
                        }
                    }
                }
            },
            onClick: (event, elements) => {
                if (elements.length > 0) {
                    const index = elements[0].index;
                    const elevador = String(labels[index]);
                    filtrarPorElevador(elevador);
                }
            },
            onHover: (event, elements) => {
                event.native.target.style.cursor = elements.length > 0 ? 'pointer' : 'default';
            }
        }
    });
}

// Ã°Å¸â€ â€¢ NOVO: GrÃƒÂ¡fico de Tempo Mediano por Elevador
function criarGraficoTempoMedianoPorElevador() {
    const ctx = document.getElementById('grafico-tempo-elevador');
    if (!ctx) return;
    
    const dados = dadosKPIsFiltrados.tempo_por_equipamento || {};
    
    // OrdenaÃ§Ã£o decrescente e limitaÃ§Ã£o aos top 15 elevadores
    const entries = Object.entries(dados)
        .sort((a, b) => b[1] - a[1])
        .slice(0, 15); // Top 15 elevadores
    
    const labels = entries.map(entry => String(entry[0]));
    const values = entries.map(entry => Math.round(entry[1] * 10) / 10);
    
    console.log('Ã¢ÂÂ° Dados de tempo por elevador ordenados:', entries);
    
    graficos.tempoElevador = new Chart(ctx, {
        type: 'bar',
        data: {
            labels: labels,
            datasets: [{
                label: 'Tempo Mediano (horas)',
                data: values,
                backgroundColor: '#17a2b8',
                borderColor: '#138496',
                borderWidth: 1,
                hoverBackgroundColor: '#138496'
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    display: false
                },
                tooltip: {
                    callbacks: {
                        title: function(context) {
                            return 'Elevador: ' + context[0].label;
                        },
                        label: function(context) {
                            return 'Tempo Mediano: ' + context.parsed.y + 'h';
                        }
                    }
                }
            },
            scales: {
                y: {
                    beginAtZero: true,
                    ticks: {
                        callback: function(value) {
                            return value + 'h';
                        }
                    }
                },
                x: {
                    ticks: {
                        maxRotation: 45,
                        font: {
                            size: 10
                        }
                    }
                }
            },
            onClick: (event, elements) => {
                if (elements.length > 0) {
                    const index = elements[0].index;
                    const elevador = String(labels[index]);
                    filtrarPorElevador(elevador);
                }
            },
            onHover: (event, elements) => {
                event.native.target.style.cursor = elements.length > 0 ? 'pointer' : 'default';
            }
        }
    });
}

// FunÃ§ÃƒÂµes de filtro por clique nos grÃƒÂ¡ficos
function filtrarPorMes(mesAno) {
    console.log('Ã°Å¸â€œâ€¦ Filtrando por mÃƒÂªs:', mesAno);
    filtrosAtivos.mes = mesAno;
    aplicarFiltrosInterativos();
}

function filtrarPorCategoria(categoria) {
    console.log('Ã°Å¸ÂÂ·Ã¯Â¸Â Filtrando por categoria:', categoria);
    document.getElementById('filtro-categoria').value = categoria;
    filtrosAtivos.categoria = categoria;
    aplicarFiltrosInterativos();
}

function filtrarPorEdificio(edificio) {
    console.log('Ã°Å¸ÂÂ¢ Filtrando por edifÃƒÂ­cio:', edificio);
    document.getElementById('filtro-edificio').value = edificio;
    filtrosAtivos.edificio = edificio;
    aplicarFiltrosInterativos();
}

// Ã°Å¸â€ â€¢ NOVA FUNÃƒâ€¡ÃƒÆ’O: Filtrar por elevador especÃƒÂ­fico
function filtrarPorElevador(elevador) {
    console.log('Ã°Å¸Ââ€”Ã¯Â¸Â Filtrando por elevador:', elevador);
    filtrosAtivos.equipamento = elevador;
    aplicarFiltrosInterativos();
}

function aplicarFiltros() {
    const dataInicio = document.getElementById('data-inicio').value;
    const dataFim = document.getElementById('data-fim').value;
    const periodo = document.getElementById('filtro-periodo').value;
    const status = document.getElementById('filtro-status').value;
    const categoria = document.getElementById('filtro-categoria').value;
    const edificio = document.getElementById('filtro-edificio').value;
    
    console.log('Ã°Å¸â€Â Aplicando filtros:', {
        dataInicio, dataFim, periodo, status, categoria, edificio
    });
    
    // Ã°Å¸â€œâ€¦ VALIDAÃƒâ€¡ÃƒÆ’O DE DATAS
    if (dataInicio && dataFim && new Date(dataInicio) > new Date(dataFim)) {
        alert('A data de inÃƒÂ­cio nÃ£o pode ser posterior ÃƒÂ  data de fim.');
        return;
    }
    
    // Ã°Å¸â€ â€¢ MAPEAMENTO CORRETO DOS PARÃƒâ€šMETROS
    filtrosAtivos = {
        data_inicio: dataInicio,
        data_fim: dataFim,
        periodo_predefinido: periodo,
        status: status,
        categoria: categoria,
        edificio: edificio
    };
    
    // Remove filtros vazios
    Object.keys(filtrosAtivos).forEach(key => {
        if (!filtrosAtivos[key]) {
            delete filtrosAtivos[key];
        }
    });
    
    console.log('Ã°Å¸â€Â§ Filtros ativos apÃƒÂ³s limpeza:', filtrosAtivos);
    
    aplicarFiltrosInterativos();
}

function aplicarFiltrosInterativos() {
    console.log('Ã°Å¸â€Â Aplicando filtros:', filtrosAtivos);
    
    // Monta parÃƒÂ¢metros para API
    const params = new URLSearchParams();
    Object.keys(filtrosAtivos).forEach(key => {
        if (filtrosAtivos[key]) {
            params.append(key, filtrosAtivos[key]);
        }
    });
    
    // Mostra loading
    const loadingElement = document.getElementById('loading-resumo');
    if (loadingElement) loadingElement.style.display = 'block';
    
    // Faz requisiÃ§Ã£o para API
    fetch('/api/kpis-filtrados?' + params.toString())
        .then(response => response.json())
        .then(data => {
            if (loadingElement) loadingElement.style.display = 'none';
            
            if (data.success) {
                // Atualiza dados filtrados
                dadosKPIsFiltrados = data.metricas;
                
                // Atualiza cards
                atualizarCards(data.metricas);
                
                // Recria grÃƒÂ¡ficos
                criarGraficos();
                
                // Mostra indicador de filtros ativos
                mostrarFiltrosAtivos();
                
                // Atualiza tabela de resumo
                atualizarTabelaResumo(data.resumo);
            }
        })
        .catch(error => {
            if (loadingElement) loadingElement.style.display = 'none';
            console.error('Ã¢ÂÅ’ Erro ao aplicar filtros:', error);
            alert('Erro ao aplicar filtros. Tente novamente.');
        });
}

function atualizarCards(metricas) {
    document.getElementById('total-chamados').textContent = metricas.total_chamados || 0;
    document.getElementById('chamados-concluidos').textContent = metricas.chamados_concluidos || 0;
    document.getElementById('tempo-mediano').textContent = (metricas.tempo_mediano_reparo || 0).toFixed(1) + 'h';
    document.getElementById('disponibilidade').textContent = (metricas.disponibilidade || 0).toFixed(1) + '%';
}

function mostrarFiltrosAtivos() {
    const filtrosAtivosDiv = document.getElementById('filtros-ativos');
    const descricaoFiltros = document.getElementById('descricao-filtros');
    
    const filtrosTexto = [];
    
    // Ã°Å¸â€œâ€¦ MELHORIA: DescriÃ§Ã£o mais clara dos filtros
    const dataInicio = document.getElementById('data-inicio').value;
    const dataFim = document.getElementById('data-fim').value;
    const periodo = document.getElementById('filtro-periodo').value;
    
    if (dataInicio || dataFim) {
        let textoData = 'PerÃƒÂ­odo: ';
        if (dataInicio && dataFim) {
            textoData += `${dataInicio} a ${dataFim}`;
        } else if (dataInicio) {
            textoData += `a partir de ${dataInicio}`;
        } else {
            textoData += `atÃƒÂ© ${dataFim}`;
        }
        filtrosTexto.push(textoData);
    } else if (periodo) {
        const periodos = {
            'ultima-semana': 'ÃƒÅ¡ltima Semana',
            'ultimo-mes': 'ÃƒÅ¡ltimo MÃƒÂªs',
            'ultimos-3-meses': 'ÃƒÅ¡ltimos 3 Meses',
            'ultimos-6-meses': 'ÃƒÅ¡ltimos 6 Meses',
            'ultimo-ano': 'ÃƒÅ¡ltimo Ano',
            'ultimos-2-anos': 'ÃƒÅ¡ltimos 2 Anos',
            'ultimos-5-anos': 'ÃƒÅ¡ltimos 5 Anos',
            'todo-periodo': 'Todo o PerÃƒÂ­odo'
        };
        filtrosTexto.push(`PerÃƒÂ­odo: ${periodos[periodo]}`);
    }
    
    Object.keys(filtrosAtivos).forEach(key => {
        if (filtrosAtivos[key] && !['data_inicio', 'data_fim', 'periodo_predefinido'].includes(key)) {
             const nomesFiltros = {
                'equipamento': 'Elevador',
                'categoria': 'Categoria',
                'edificio': 'EdifÃƒÂ­cio',
                'status': 'Status',
                'mes': 'MÃƒÂªs'
            };
            const nomeAmigavel = nomesFiltros[key] || key;
            filtrosTexto.push(`${nomeAmigavel}: ${filtrosAtivos[key]}`);
        }
    });
    
    if (filtrosTexto.length > 0) {
        descricaoFiltros.textContent = filtrosTexto.join(' | ');
        filtrosAtivosDiv.style.display = 'block';
    } else {
        filtrosAtivosDiv.style.display = 'none';
    }
}

function atualizarTabelaResumo(resumo) {
    const container = document.getElementById('tabela-resumo');
    if (!resumo || resumo.length === 0) {
        container.innerHTML = '<p class="text-muted text-center">Nenhum dado encontrado com os filtros aplicados.</p>';
        return;
    }
    
    let html = `
        <div class="table-responsive">
            <table class="table table-striped table-hover">
                <thead class="table-dark">
                    <tr>
                        <th>Categoria</th>
                        <th>EdifÃƒÂ­cio</th>
                        <th>Status</th>
                        <th>Data SolicitaÃ§Ã£o</th>
                        <th>Tempo Reparo (h)</th>
                    </tr>
                </thead>
                <tbody>
    `;
    
    resumo.slice(0, 20).forEach(item => { // Mostra apenas os primeiros 20
        html += `
            <tr>
                <td><span class="badge bg-secondary">${item.categoria_problema}</span></td>
                <td>${item.edificio}</td>
                <td><span class="badge ${item.status === 'ConcluÃƒÂ­da' ? 'bg-success' : 'bg-warning'}">${item.status}</span></td>
                <td>${item.data_solicitacao}</td>
                <td>${item.tempo_reparo || '-'}</td>
            </tr>
        `;
    });
    
    html += `
                </tbody>
            </table>
        </div>
        ${resumo.length > 20 ? `<p class="text-muted text-center">Mostrando 20 de ${resumo.length} registros</p>` : ''}
    `;
    
    container.innerHTML = html;
}

function limparFiltrosKPIs() {
    // Ã°Å¸â€œâ€¦ LIMPA TODOS OS FILTROS (incluindo datas)
    document.getElementById('data-inicio').value = '';
    document.getElementById('data-fim').value = '';
    document.getElementById('filtro-periodo').value = '';
    document.getElementById('filtro-status').value = '';
    document.getElementById('filtro-categoria').value = '';
    document.getElementById('filtro-edificio').value = '';
    
    // Limpa filtros ativos
    filtrosAtivos = {};
    
    // Restaura dados originais
    dadosKPIsFiltrados = dadosKPIsOriginais;
    
    // Atualiza cards
    atualizarCards(dadosKPIsOriginais);
    
    // Recria grÃƒÂ¡ficos
    criarGraficos();
    
    // Esconde indicador de filtros
    document.getElementById('filtros-ativos').style.display = 'none';
    
    // Limpa tabela de resumo
    document.getElementById('tabela-resumo').innerHTML = '<p class="text-muted text-center">Use os filtros acima ou clique nos grÃƒÂ¡ficos para ver dados especÃƒÂ­ficos.</p>';
    
    console.log('Ã°Å¸Â§Â¹ Filtros de KPIs limpos');
}

function debugFiltros() {
    console.log('Ã°Å¸â€Â DEBUG - Estado atual dos filtros:');
    console.log('   Data inÃƒÂ­cio:', document.getElementById('data-inicio').value);
    console.log('   Data fim:', document.getElementById('data-fim').value);
    console.log('   PerÃƒÂ­odo:', document.getElementById('filtro-periodo').value);
    console.log('   Status:', document.getElementById('filtro-status').value);
    console.log('   Categoria:', document.getElementById('filtro-categoria').value);
    console.log('   EdifÃƒÂ­cio:', document.getElementById('filtro-edificio').value);
    console.log('   Filtros ativos:', filtrosAtivos);
    console.log('   Dados originais:', dadosKPIsOriginais);
    console.log('   Dados filtrados:', dadosKPIsFiltrados);
}

</script>
{% endblock %}
--- Fim do código: kpis.html ---

--- Início do código: login.html ---
<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Login - Sistema de Elevadores TJ/MG</title>
    
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <!-- CSS customizado -->
    <link rel="stylesheet" href="{{ url_for('static', filename='css/style.css') }}">
    
    <style>
        body {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        .login-container {
            background: white;
            border-radius: 15px;
            box-shadow: 0 15px 35px rgba(0, 0, 0, 0.1);
            overflow: hidden;
            max-width: 400px;
            width: 100%;
            margin: 20px;
        }
        
        .login-header {
            background: linear-gradient(135deg, #007bff 0%, #0056b3 100%);
            color: white;
            padding: 2rem;
            text-align: center;
        }
        
        .login-header i {
            font-size: 3rem;
            margin-bottom: 1rem;
            opacity: 0.9;
        }
        
        .login-body {
            padding: 2rem;
        }
        
        .form-control {
            border-radius: 10px;
            border: 2px solid #e9ecef;
            padding: 12px 15px;
            transition: all 0.3s ease;
        }
        
        .form-control:focus {
            border-color: #007bff;
            box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
        }
        
        .btn-login {
            background: linear-gradient(135deg, #007bff 0%, #0056b3 100%);
            border: none;
            border-radius: 10px;
            padding: 12px;
            font-weight: 600;
            transition: all 0.3s ease;
            width: 100%;
        }
        
        .btn-login:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0, 123, 255, 0.4);
        }
        
        .input-group-text {
            border: 2px solid #e9ecef;
            border-right: none;
            background: #f8f9fa;
            border-radius: 10px 0 0 10px;
        }
        
        .input-group .form-control {
            border-left: none;
            border-radius: 0 10px 10px 0;
        }
        
        .alert {
            border-radius: 10px;
            border: none;
        }
        
        .footer-info {
            background: #f8f9fa;
            padding: 1rem;
            text-align: center;
            font-size: 0.875rem;
            color: #6c757d;
        }
        
        .loading {
            display: none;
        }
        
        .btn-login:disabled {
            opacity: 0.7;
            cursor: not-allowed;
        }
    </style>
</head>
<body>
    <div class="login-container">
        <!-- CabeÃ§alho -->
        <div class="login-header">
            <i class="fas fa-building"></i>
            <h3 class="mb-0">TJ/MG</h3>
            <p class="mb-0">Sistema de Elevadores</p>
        </div>
        
        <!-- Corpo do formulÃƒÂ¡rio -->
        <div class="login-body">
            <!-- Mensagens Flash -->
            {% with messages = get_flashed_messages(with_categories=true) %}
                {% if messages %}
                    {% for category, message in messages %}
                        <div class="alert alert-{{ 'danger' if category == 'danger' else 'warning' if category == 'warning' else 'info' if category == 'info' else 'success' }} alert-dismissible fade show" role="alert">
                            <i class="fas fa-{{ 'exclamation-triangle' if category in ['danger', 'warning'] else 'info-circle' if category == 'info' else 'check-circle' }}"></i>
                            {{ message }}
                            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                        </div>
                    {% endfor %}
                {% endif %}
            {% endwith %}
            
            <!-- FormulÃƒÂ¡rio de Login -->
            <form method="POST" id="loginForm">
                <div class="mb-3">
                    <label for="usuario" class="form-label">
                        <i class="fas fa-user"></i> UsuÃƒÂ¡rio
                    </label>
                    <div class="input-group">
                        <span class="input-group-text">
                            <i class="fas fa-user"></i>
                        </span>
                        <input type="text" 
                               class="form-control" 
                               id="usuario" 
                               name="usuario" 
                               placeholder="Digite seu usuÃƒÂ¡rio"
                               required
                               autocomplete="username">
                    </div>
                </div>
                
                <div class="mb-4">
                    <label for="senha" class="form-label">
                        <i class="fas fa-lock"></i> Senha
                    </label>
                    <div class="input-group">
                        <span class="input-group-text">
                            <i class="fas fa-lock"></i>
                        </span>
                        <input type="password" 
                               class="form-control" 
                               id="senha" 
                               name="senha" 
                               placeholder="Digite sua senha"
                               required
                               autocomplete="current-password">
                        <button class="btn btn-outline-secondary" 
                                type="button" 
                                id="togglePassword"
                                style="border-radius: 0 10px 10px 0;">
                            <i class="fas fa-eye"></i>
                        </button>
                    </div>
                </div>
                
                <button type="submit" class="btn btn-primary btn-login" id="btnLogin">
                    <span class="normal-text">
                        <i class="fas fa-sign-in-alt"></i> Entrar
                    </span>
                    <span class="loading">
                        <i class="fas fa-spinner fa-spin"></i> Entrando...
                    </span>
                </button>
            </form>
        </div>
        
        <!-- RodapÃƒÂ© -->
        <div class="footer-info">
            <small>
                <i class="fas fa-shield-alt"></i>
                Acesso restrito - Tribunal de JustiÃ§a de Minas Gerais
            </small>
        </div>
    </div>

    <!-- Bootstrap JS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    
    <script>
        // Toggle para mostrar/ocultar senha
        document.getElementById('togglePassword').addEventListener('click', function() {
            const senhaInput = document.getElementById('senha');
            const icon = this.querySelector('i');
            
            if (senhaInput.type === 'password') {
                senhaInput.type = 'text';
                icon.classList.remove('fa-eye');
                icon.classList.add('fa-eye-slash');
            } else {
                senhaInput.type = 'password';
                icon.classList.remove('fa-eye-slash');
                icon.classList.add('fa-eye');
            }
        });
        
        // Loading no botÃ£o de login
        document.getElementById('loginForm').addEventListener('submit', function() {
            const btn = document.getElementById('btnLogin');
            const normalText = btn.querySelector('.normal-text');
            const loadingText = btn.querySelector('.loading');
            
            btn.disabled = true;
            normalText.style.display = 'none';
            loadingText.style.display = 'inline';
        });
        
        // Foco automÃƒÂ¡tico no campo usuÃƒÂ¡rio
        document.addEventListener('DOMContentLoaded', function() {
            document.getElementById('usuario').focus();
        });
        
        // Enter para submeter o formulÃƒÂ¡rio
        document.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                document.getElementById('loginForm').submit();
            }
        });
    </script>
</body>
</html>
--- Fim do código: login.html ---

--- Início do código: dashboard_v2.js ---
// dashboard_v2.js

// ========== FASE 5: FILTROS INTERATIVOS ==========

// VariÃƒÂ¡veis globais
let dadosOriginais = initialGeojsonData;
let mapaLeaflet = null;
let marcadoresAtuais = []; // NOVO: Controla marcadores atuais

// Inicializa o mapa
function inicializarMapa() {
    console.log('Inicializando mapa v2.0 com filtros...');
    
    mapaLeaflet = L.map('mapa').setView([-19.92, -43.92], 7);

    console.log('Tamanho interno do mapa Leaflet (mapaLeaflet._size):', mapaLeaflet._size);
    
    L.tileLayer('https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}{r}.png', {
        attribution: 'Ã‚Â© OpenStreetMap contributors, Ã‚Â© CartoDB'
    }).addTo(mapaLeaflet);
    
    adicionarMarcadores(dadosOriginais);
}

// NOVO: Remove todos os marcadores
function limparMarcadores() {
    marcadoresAtuais.forEach(marker => {
        mapaLeaflet.removeLayer(marker);
    });
    marcadoresAtuais = [];
}

// ATUALIZADO: Adiciona marcadores ao mapa
function adicionarMarcadores(geojsonData) {
    // Limpa marcadores existentes
    limparMarcadores();
    
    if (!geojsonData || !geojsonData.features || geojsonData.features.length === 0) {
        console.warn("Nenhum dado GeoJSON ou features para adicionar marcadores.");
        return;
    }    

    // if (!geojsonData || !geojsonData.features) return;
    
    console.log(`Adicionando ${geojsonData.features.length} marcadores...`);


    geojsonData.features.forEach((feature, index) => {
        const props = feature.properties;
        const coords = feature.geometry.coordinates;

        if (!Array.isArray(coords) || coords.length !== 2 || 
            typeof coords[0] !== 'number' || typeof coords[1] !== 'number' || 
            isNaN(coords[0]) || isNaN(coords[1])) 
        {
            console.error(`ERRO: Coordenadas invÃ¡lidas para feature no Ã­ndice ${index}. Pulando este marcador.`);
            console.error('Coordenadas:', coords);
            console.error('Feature completa:', feature);
            // Retorna para pular este marcador problemÃ¡tico e continuar com os outros
            return; 
        }

        const latlng = [coords[1], coords[0]];      

        const marker = L.circleMarker(latlng,{
            radius: props.tamanhoMarcador,
            fillColor: props.corMarcador,
            color: props.corMarcador,
            weight: 2,
            opacity: 1,
            fillOpacity: 0.8
        })
        
        // Tooltip
        let tooltipText = `${props.cidade}-${props.tipo}<br/>
        ${props.qtd_elev} elevadores - ${props.marcaLicitacao}<br/>
        ${props.regiao} - ${props.status}`;
        if(props.nElevadorParado && props.nElevadorParado > 0){
            tooltipText += `<br/><strong style="color: ${props.corMarcador ||'#dc3545'};">${props.nElevadorParado} parado(s)</strong>`;
        }
        marker.bindTooltip(tooltipText,{sticky:true});
        
        // Popup
        let popupContent = `<div style="font-family: Arial, sans-serif;">
            <h4 style="margin: 0 0 10px 0; color: #333;">${props.unidade}</h4>
            <p><strong>Cidade:</strong> ${props.cidade}</p>
            <p><strong>EndereÃ§o:</strong> ${props.endereco}</p>
            <p><strong>Tipo:</strong> ${props.tipo}</p>
            <p><strong>Elevadores:</strong> ${props.qtd_elev}</p>
            <p><strong>Paradas:</strong> ${props.paradas}</p>
            <p><strong>Marca:</strong> ${props.marca}</p>
            <p><strong>Empresa:</strong> ${props.empresa}</p>
            <p><strong>Status:</strong> <span style="color: ${props.corMarcador};">${props.status}</span></p>`;
        
        if ((props.nElevadorParado && props.nElevadorParado > 0) || props.status && props.status.toLowerCase().includes('suspenso')) {    
            if (props.nElevadorParado && props.nElevadorParado > 0) {
                popupContent += `<hr style="margin: 10px 0;"><p style="color: #dc3545;"><strong>âš ï¸ Elevadores Parados:</strong> ${props.nElevadorParado}</p>`;
            }
            if (props.dataDeParada) {
                popupContent += `<p style="color: #dc3545;"><strong>ðŸ“… Data da Parada:</strong> ${props.dataDeParada}</p>`;
            }
            if (props.previsaoDeRetorno) {
                popupContent += `<p style="color: #dc3545;"><strong>ðŸ”„ PrevisÃ£o de Retorno:</strong> ${props.previsaoDeRetorno}</p>`;
            }
        }
        popupContent += '</div>';
        
        marker.bindPopup(popupContent, {maxWidth: 350});
        marker.addTo(mapaLeaflet);
        marcadoresAtuais.push(marker);
    });
}

// NOVO: Aplica filtros E atualiza o mapa
function aplicarFiltros() {
    console.log('Ã°Å¸â€Â Aplicando filtros v2.0 com atualizaÃ§Ã£o do mapa...');
    
    const tipos = obterSelecionados('tipo');
    const regioes = obterSelecionados('regiao');
    const situacoes = obterSelecionados('situacao');
    
    console.log('Filtros selecionados:', {tipos, regioes, situacoes});
    
    // Mostra loading
    mostrarLoading(true);
    
    const params = new URLSearchParams();
    tipos.forEach(tipo => params.append('tipo', tipo));
    regioes.forEach(regiao => params.append('regiao', regiao));
    situacoes.forEach(situacao => params.append('situacao', situacao));
    
    // NOVO: Chama API que retorna dados filtrados
    fetch(`/v2/api/dados-elevadores-filtrados?${params}`)
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                // Atualiza estatÃƒÂ­sticas
                atualizarCards(data.data.stats);
                
                // NOVO: Atualiza estatÃƒÂ­sticas detalhadas
                if (data.data.stats_detalhadas) {
                    atualizarStatsDetalhadas(data.data.stats_detalhadas);
                }
                
                // NOVO: Atualiza o mapa com dados filtrados
                adicionarMarcadores(data.data.geojson);
                
                // Ajusta zoom se necessÃƒÂ¡rio
                if (data.data.geojson.features.length > 0) {
                    ajustarZoomParaDados(data.data.geojson);
                }
                
                console.log('Filtros aplicados e mapa atualizado');
            } else {
                alert('Erro ao aplicar filtros: ' + data.message);
            }
        })
        .catch(error => {
            console.error('Erro ao aplicar filtros:', error);
            alert('Erro na requisiÃ§Ã£o de filtros');
        })
        .finally(() => {
            mostrarLoading(false);
        });
}

// NOVO: Ajusta zoom para mostrar todos os dados
function ajustarZoomParaDados(geojsonData) {
    if (!geojsonData.features || geojsonData.features.length === 0) return;
    
    const group = new L.featureGroup(marcadoresAtuais);
    mapaLeaflet.fitBounds(group.getBounds(), {padding: [20, 20]});
}

// Ã¢Å“â€¦ NOVO: Mostra/esconde loading
function mostrarLoading(mostrar) {
    const btn = document.querySelector('button[onclick="aplicarFiltros()"]');
    if (btn) {
        if (mostrar) {
            btn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Filtrando...';
            btn.disabled = true;
        } else {
            btn.innerHTML = '<i class="fas fa-search"></i> Aplicar Filtros';
            btn.disabled = false;
        }
    }
}

// ObtÃƒÂ©m valores selecionados
function obterSelecionados(categoria) {
    const checkboxes = document.querySelectorAll(`input[id^="check-${categoria}-"]:checked`);
    return Array.from(checkboxes).map(cb => cb.value);
}

// Atualiza cards de estatÃƒÂ­sticas
function atualizarCards(stats) {
    const elementos = {
        'stat-predios': stats.total_predios || 0,
        'stat-elevadores': stats.total_elevadores || 0,
        'stat-cidades': stats.cidades || 0,
        'stat-regioes': stats.regioes || 0,
        'stat-ativos': stats.em_atividade || 0,
        'stat-parados': stats.elevadores_parados || 0,
        'stat-suspensos': stats.elevadores_suspensos || 0
    };
    
    for (let id in elementos) {
        const elem = document.getElementById(id);
        if (elem) {
            // Ã¢Å“â€¦ NOVO: AnimaÃ§Ã£o nos nÃƒÂºmeros
            animarNumero(elem, parseInt(elem.textContent) || 0, elementos[id]);
        }
    }
    
    // Atualiza contador
    document.getElementById('total-elevadores-filtro').textContent = stats.total_elevadores || 0;
    document.getElementById('total-locais-filtro').textContent = stats.total_predios || 0;
}

// Ã¢Å“â€¦ NOVO: AnimaÃ§Ã£o de nÃƒÂºmeros
function animarNumero(elemento, valorInicial, valorFinal) {
    const duracao = 500; // ms
    const passos = 20;
    const incremento = (valorFinal - valorInicial) / passos;
    let valorAtual = valorInicial;
    let passo = 0;
    
    const timer = setInterval(() => {
        passo++;
        valorAtual += incremento;
        
        if (passo >= passos) {
            elemento.textContent = valorFinal;
            clearInterval(timer);
        } else {
            elemento.textContent = Math.round(valorAtual);
        }
    }, duracao / passos);
}

// Ã¢Å“â€¦ NOVO: Seleciona todos os filtros
function selecionarTodos() {
    console.log('Selecionando todos os filtros...');
    document.querySelectorAll('input[type="checkbox"]').forEach(cb => cb.checked = true);
    aplicarFiltros(); // Aplica automaticamente
}

// Ã¢Å“â€¦ ATUALIZADO: Limpa filtros e restaura dados originais
function limparFiltros() {
    console.log('Limpando filtros e restaurando mapa...');
    
    // Limpa checkboxes
    document.querySelectorAll('input[type="checkbox"]').forEach(cb => cb.checked = false);
    
    // Restaura dados originais no mapa
    adicionarMarcadores(dadosOriginais);
    
    // Restaura estatÃƒÂ­sticas originais
    fetch('/v2/api/dados-elevadores')
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                atualizarCards(data.data.stats);
                ajustarZoomParaDados(data.data.geojson);
                atualizarStatsDetalhadas(data.data.stats_detalhadas);
            }
        })
        .catch(error => console.error('Erro ao restaurar dados:', error));
}

// Ã¢Å“â€¦ ATUALIZADO: Atualiza estatÃƒÂ­sticas detalhadas
function atualizarStatsDetalhadas(statsDetalhadas) {
    // Atualiza por tipo
    atualizarListaStats('stats-por-tipo', statsDetalhadas.por_tipo);
    
    // Atualiza por regiÃ£o
    atualizarListaStats('stats-por-regiao', statsDetalhadas.por_regiao);
    
    // Atualiza por marca
    atualizarListaStats('stats-por-marca', statsDetalhadas.por_marca);
    
    // Atualiza por status
    atualizarListaStatsComCor('stats-por-status', statsDetalhadas.por_status);
    
    // Atualiza elevadores parados
    atualizarElevadoresParados(statsDetalhadas.elevadores_parados);
}

function atualizarListaStats(elementId, dados) {
    const elemento = document.getElementById(elementId);
    if (!elemento || !dados) return;
    
    let html = '';
    for (const [chave, valor] of Object.entries(dados)) {
        html += `<div class="d-flex justify-content-between">
            <span>${chave}:</span>
            <strong>${valor}</strong>
        </div>`;
    }
    
    elemento.innerHTML = html || '<div class="text-muted">Nenhum dado</div>';
}

function atualizarListaStatsComCor(elementId, dados) {
    const elemento = document.getElementById(elementId);
    if (!elemento || !dados) return;
    
    let html = '';
    for (const [chave, valor] of Object.entries(dados)) {
        let classe = '';
        if (chave === 'Em atividade') classe = 'text-success';
        else if (chave === 'Parados') classe = 'text-danger';
        else classe = 'text-warning';
        
        html += `<div class="d-flex justify-content-between">
            <span class="${classe}">${chave}:</span>
            <strong>${valor}</strong>
        </div>`;
    }
    
    elemento.innerHTML = html || '<div class="text-muted">Nenhum dado</div>';
}

function atualizarElevadoresParados(elevadoresParados) {
    const tbody = document.getElementById('elevadores-parados-tbody');
    const section = document.getElementById('elevadores-parados-section');
    
    if (!tbody || !section) return;
    
    if (!elevadoresParados || elevadoresParados.length === 0) {
        section.style.display = 'none';
        return;
    }
    
    section.style.display = 'block';
    
    let html = '';
    elevadoresParados.forEach(elevador => {
        html += `<tr>
            <td>${elevador.unidade}</td>
            <td>${elevador.cidade}</td>
            <td>${elevador.tipo}</td>
            <td>${elevador.regiao}</td>
            <td class="text-danger"><strong>${elevador.quantidade_parada}</strong></td>
            <td>${elevador.total_elevadores}</td>
            <td>${elevador.marca}</td>
        </tr>`;
    });
    
    tbody.innerHTML = html;
}

// NOVO: Aplicar filtros automaticamente quando checkbox muda
function configurarFiltrosAutomaticos() {
    document.querySelectorAll('input[type="checkbox"]').forEach(checkbox => {
        checkbox.addEventListener('change', function() {
            // Aplica filtros automaticamente apÃƒÂ³s 500ms de inatividade
            clearTimeout(window.filtroTimeout);
            window.filtroTimeout = setTimeout(aplicarFiltros, 500);
        });
    });
}

// Atualiza dados
function atualizarDados() {
    const btn = event.target;
    const originalText = btn.innerHTML;
    btn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Atualizando...';
    btn.disabled = true;
    
    fetch('/v2/atualizar-dados')
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                alert('Dados atualizados!\n' + data.message);
                location.reload();
            } else {
                alert('Erro: ' + data.message);
            }
        })
        .catch(error => alert('Erro na requisiÃ§Ã£o'))
        .finally(() => {
            btn.innerHTML = originalText;
            btn.disabled = false;
        });
}

// ATUALIZADO: Inicializa quando a pÃ¡gina carrega
document.addEventListener('DOMContentLoaded', function() {
    console.log('Dashboard v2.0 carregado com filtros interativos');
    const mapaElement = document.getElementById('mapa');
    if (mapaElement) {
        // Verifique as dimensÃµes do mapaElement ANTES de inicializar
        console.log('DimensÃµes do elemento #mapa:', mapaElement.offsetWidth, mapaElement.offsetHeight);
        if (mapaElement.offsetWidth === 0 || mapaElement.offsetHeight === 0) {
            console.error('Elemento #mapa estÃ¡ com dimensÃµes zero. Isso pode causar problemas de renderizaÃ§Ã£o do Leaflet.');
            // Tente forÃ§ar um pequeno delay para a inicializaÃ§Ã£o do mapa
            setTimeout(function() {
                inicializarMapa();
                configurarFiltrosAutomaticos();
            }, 100); // Pequeno delay
        } else {
            inicializarMapa();
            configurarFiltrosAutomaticos();
        }
    } else {
        console.error('Elemento #mapa nÃ£o encontrado no DOM!');
    }
});
--- Fim do código: dashboard_v2.js ---

--- Início do código: filtros_mapa.js ---
    // static/js/filtros_mapa.js - VersÃ£o com captura melhorada

    let dadosOriginais = null;
    let dadosFiltrados = null;
    let mapaLeaflet = null;
    let marcadoresOriginais = [];

    console.log('Ã°Å¸â€Â§ Script de filtros carregado');

    // FunÃ§Ã£o para inicializar o sistema de filtros
    function inicializarFiltros(geojsonData) {
        console.log('Ã°Å¸Å¡â‚¬ Inicializando filtros...');
        console.log('Ã°Å¸â€œÅ  Dados recebidos:', geojsonData);
        
        dadosOriginais = geojsonData;
        dadosFiltrados = geojsonData;
        
        if (dadosOriginais && dadosOriginais.features) {
            console.log('Ã¢Å“â€¦ Features disponÃƒÂ­veis:', dadosOriginais.features.length);
        } else {
            console.error('Ã¢ÂÅ’ Nenhuma feature encontrada nos dados');
            return;
        }
        
        // Captura o mapa Leaflet com mÃƒÂºltiplas estratÃƒÂ©gias
        capturarMapaLeaflet();
    }

    // FunÃ§Ã£o para capturar o mapa Leaflet - VERSÃƒÆ’O MELHORADA
    function capturarMapaLeaflet() {
        console.log('Ã°Å¸â€”ÂºÃ¯Â¸Â Tentando capturar mapa Leaflet com mÃƒÂºltiplas estratÃƒÂ©gias...');
        
        let tentativas = 0;
        const maxTentativas = 15;
        
        const verificarMapa = () => {
            tentativas++;
            console.log(`Ã°Å¸â€Â Tentativa ${tentativas}/${maxTentativas} de capturar mapa...`);
            
            // ESTRATÃƒâ€°GIA 1: Procurar por variÃƒÂ¡veis map_*
            const mapKeys = Object.keys(window).filter(key => key.startsWith('map_'));
            console.log('Ã¯Â¿Â½Ã¯Â¿Â½ Chaves map_* encontradas:', mapKeys);
            
            for (let key of mapKeys) {
                const mapInstance = window[key];
                if (mapInstance && mapInstance._container) {
                    mapaLeaflet = mapInstance;
                    console.log('Ã¢Å“â€¦ Mapa capturado via map_*:', key);
                    finalizarCaptura();
                    return true;
                }
            }
            
            // ESTRATÃƒâ€°GIA 2: Procurar em todas as variÃƒÂ¡veis globais
            for (let key in window) {
                const obj = window[key];
                if (obj && typeof obj === 'object' && obj._container && obj.addLayer) {
                    mapaLeaflet = obj;
                    console.log('Ã¢Å“â€¦ Mapa capturado via varredura global:', key);
                    finalizarCaptura();
                    return true;
                }
            }
            
            // ESTRATÃƒâ€°GIA 3: Usar DOM + Leaflet API
            const mapContainers = document.querySelectorAll('.folium-map');
            console.log('Ã¯Â¿Â½Ã¯Â¿Â½ Containers .folium-map encontrados:', mapContainers.length);
            
            for (let container of mapContainers) {
                if (container._leaflet_id && window.L) {
                    // Tenta acessar o mapa via container
                    const maps = window.L._layer ? Object.values(window.L._layer) : [];
                    for (let map of maps) {
                        if (map._container === container) {
                            mapaLeaflet = map;
                            console.log('Ã¢Å“â€¦ Mapa capturado via DOM/Leaflet:', container.id);
                            finalizarCaptura();
                            return true;
                        }
                    }
                    
                    // Tenta acessar via _leaflet_id
                    if (window.L && window.L.map && container._leaflet_id) {
                        try {
                            const mapInstance = window.L.map(container);
                            if (mapInstance && mapInstance._container) {
                                mapaLeaflet = mapInstance;
                                console.log('Ã¢Å“â€¦ Mapa capturado via L.map()');
                                finalizarCaptura();
                                return true;
                            }
                        } catch (e) {
                            console.log('Ã¢Å¡Â Ã¯Â¸Â Erro ao tentar L.map():', e.message);
                        }
                    }
                }
            }
            
            // ESTRATÃƒâ€°GIA 4: Interceptar criaÃ§Ã£o do mapa
            if (window.L && !window._mapInterceptorAdded) {
                window._mapInterceptorAdded = true;
                const originalMap = window.L.map;
                window.L.map = function(...args) {
                    const mapInstance = originalMap.apply(this, args);
                    console.log('Ã°Å¸Å½Â¯ Mapa interceptado na criaÃ§Ã£o!');
                    mapaLeaflet = mapInstance;
                    finalizarCaptura();
                    return mapInstance;
                };
            }
            
            // ESTRATÃƒâ€°GIA 5: Procurar instÃƒÂ¢ncias ativas do Leaflet
            if (window.L && window.L.Map) {
                const allMaps = [];
                
                // Tenta encontrar todas as instÃƒÂ¢ncias de L.Map
                document.querySelectorAll('div').forEach(div => {
                    if (div._leaflet && div._leaflet instanceof window.L.Map) {
                        allMaps.push(div._leaflet);
                    }
                });
                
                if (allMaps.length > 0) {
                    mapaLeaflet = allMaps[0];
                    console.log('Ã¢Å“â€¦ Mapa encontrado via instÃƒÂ¢ncia L.Map');
                    finalizarCaptura();
                    return true;
                }
            }
            
            if (tentativas < maxTentativas) {
                setTimeout(verificarMapa, 1000);
            } else {
                console.error('Ã¢ÂÅ’ NÃ£o foi possÃƒÂ­vel capturar o mapa apÃƒÂ³s', maxTentativas, 'tentativas');
                console.log('Ã°Å¸â€Â Debug - window.L:', window.L);
                console.log('Ã°Å¸â€Â Debug - document.querySelectorAll(".folium-map"):', document.querySelectorAll('.folium-map'));
                
                // Como ÃƒÂºltimo recurso, vamos trabalhar diretamente com o DOM
                usarFallbackDOM();
            }
        };
        
        verificarMapa();
    }

    // FunÃ§Ã£o para finalizar a captura do mapa
    function finalizarCaptura() {
        if (mapaLeaflet) {
            console.log('Ã°Å¸Å½â€° Mapa capturado com sucesso!');
            console.log('Ã°Å¸â€œÂ Container do mapa:', mapaLeaflet._container);
            
            // Salva marcadores originais
            salvarMarcadoresOriginais();
        }
    }

    // FunÃ§Ã£o FALLBACK - trabalha diretamente com DOM se nÃ£o conseguir capturar o mapa
    function usarFallbackDOM() {
        console.log('Ã¯Â¿Â½Ã¯Â¿Â½ Usando fallback DOM...');
        
        // Se nÃ£o conseguir capturar o mapa, pelo menos atualiza visualmente
        window.atualizarMapaFallback = function() {
            console.log('Ã°Å¸â€â€ž Atualizando mapa via fallback DOM...');
            
            const mapContainer = document.querySelector('.folium-map');
            if (mapContainer) {
                // Cria um overlay com informaÃ§ÃƒÂµes dos filtros
                let overlay = document.getElementById('filtro-overlay');
                if (!overlay) {
                    overlay = document.createElement('div');
                    overlay.id = 'filtro-overlay';
                    overlay.style.cssText = `
                        position: absolute;
                        top: 50%;
                        left: 50%;
                        transform: translate(-50%, -50%);
                        background: rgba(0,0,0,0.8);
                        color: white;
                        padding: 20px;
                        border-radius: 10px;
                        z-index: 10000;
                        text-align: center;
                        font-family: Arial, sans-serif;
                    `;
                    mapContainer.style.position = 'relative';
                    mapContainer.appendChild(overlay);
                }
                
                const totalFiltrados = dadosFiltrados.features ? dadosFiltrados.features.length : 0;
                overlay.innerHTML = `
                    <h4>Ã°Å¸â€Â Filtros Ativos</h4>
                    <p>${totalFiltrados} locais selecionados</p>
                    <small>Mapa serÃƒÂ¡ recarregado automaticamente</small>
                `;
                
                // Remove o overlay apÃƒÂ³s 3 segundos
                setTimeout(() => {
                    if (overlay) overlay.remove();
                }, 3000);
            }
        };
    }

    // FunÃ§Ã£o para salvar referÃƒÂªncias dos marcadores originais
    function salvarMarcadoresOriginais() {
        console.log('Ã°Å¸â€™Â¾ Salvando marcadores originais...');
        
        marcadoresOriginais = [];
        
        if (mapaLeaflet) {
            mapaLeaflet.eachLayer(function(layer) {
                // Ignora tiles e outras camadas nÃ£o-marcador
                if (layer.feature || layer._latlng || (layer._layers && Object.keys(layer._layers).length > 0)) {
                    marcadoresOriginais.push(layer);
                    console.log('Ã°Å¸â€™Â¾ Marcador salvo:', layer);
                }
            });
            
            console.log(`Ã¢Å“â€¦ ${marcadoresOriginais.length} marcadores originais salvos`);
        }
    }

    // FunÃ§Ã£o para obter valores selecionados
    function obterSelecionados(categoria) {
        const checkboxes = document.querySelectorAll(`input[id^="check-${categoria}-"]:checked`);
        const valores = Array.from(checkboxes).map(cb => cb.value);
        console.log(`Ã°Å¸â€Â Filtros selecionados para ${categoria}:`, valores);
        return valores;
    }

    // FunÃ§Ã£o para aplicar filtros - COM SITUAÃƒâ€¡ÃƒÆ’O
    function aplicarFiltros() {
        console.log('Ã°Å¸Å½Â¯ ========== APLICANDO FILTROS ==========');
        
        const tiposSelecionados = obterSelecionados('tipo');
        const regioesSelecionadas = obterSelecionados('regiao');
        const marcasSelecionadas = obterSelecionados('marca');
        const empresasSelecionadas = obterSelecionados('empresa');
        const situacoesSelecionadas = obterSelecionados('situacao'); // Ã°Å¸â€ â€¢ NOVO FILTRO

        console.log('Ã°Å¸â€œâ€¹ Resumo dos filtros:', {
            tipos: tiposSelecionados,
            regioes: regioesSelecionadas,
            marcas: marcasSelecionadas,
            empresas: empresasSelecionadas,
            situacoes: situacoesSelecionadas // Ã°Å¸â€ â€¢ NOVO
        });

        if (!dadosOriginais || !dadosOriginais.features) {
            console.error('Ã¢ÂÅ’ Dados originais nÃ£o disponÃƒÂ­veis');
            return;
        }

        // Filtra os dados
        const featuresOriginal = dadosOriginais.features.length;
        
        dadosFiltrados = {
            ...dadosOriginais,
            features: dadosOriginais.features.filter(feature => {
                const props = feature.properties;
                
                const passaTipo = tiposSelecionados.length === 0 || tiposSelecionados.includes(props.tipo);
                const passaRegiao = regioesSelecionadas.length === 0 || regioesSelecionadas.includes(props.regiao);
                const passaMarca = marcasSelecionadas.length === 0 || marcasSelecionadas.includes(props.marcaLicitacao);
                const passaEmpresa = empresasSelecionadas.length === 0 || empresasSelecionadas.includes(props.empresa);
                
                // Ã°Å¸â€ â€¢ NOVA LÃƒâ€œGICA DE FILTRO POR SITUAÃƒâ€¡ÃƒÆ’O
                let passaSituacao = true;
                if (situacoesSelecionadas.length > 0) {
                    passaSituacao = false;
                    
                    // Verifica cada situaÃ§Ã£o selecionada
                    situacoesSelecionadas.forEach(situacao => {
                        if (situacao === 'ativos') {
                            // Ativos: status ativo E sem elevadores parados
                            if (props.status && props.status.toLowerCase().includes('atividade') && 
                                (!props.nElevadorParado || props.nElevadorParado === 0)) {
                                passaSituacao = true;
                            }
                        } else if (situacao === 'suspensos') {
                            // Suspensos: status suspenso
                            if (props.status && props.status.toLowerCase().includes('suspenso')) {
                                passaSituacao = true;
                            }
                        } else if (situacao === 'parados') {
                            // Parados: tem elevadores parados
                            if (props.nElevadorParado && props.nElevadorParado > 0) {
                                passaSituacao = true;
                            }
                        }
                    });
                }
                
                return passaTipo && passaRegiao && passaMarca && passaEmpresa && passaSituacao;
            })
        };

        const featuresFiltradas = dadosFiltrados.features.length;
        console.log(`Ã°Å¸â€œÅ  Filtragem concluÃƒÂ­da: ${featuresOriginal} Ã¢â€ â€™ ${featuresFiltradas} features`);

        // Atualiza o mapa
        atualizarMapa();
        
        // Atualiza contador
        atualizarContadorFiltros();
        
        // Atualiza estatÃƒÂ­sticas
        atualizarEstatisticasDashboard();
        
        console.log('Ã¢Å“â€¦ ========== FILTROS APLICADOS ==========');
    }

    // FunÃ§Ã£o para criar um marcador
    function criarMarcador(feature) {
        const props = feature.properties;
        const coords = feature.geometry.coordinates;
        const latlng = [coords[1], coords[0]]; // Leaflet usa [lat, lng]
        
        // Ã°Å¸Å½Â¨ NOVA LÃƒâ€œGICA DE CORES - PRIORIDADE: Parados > Suspensos > Ativos
        let cor = '#6c757d'; // Cinza padrÃ£o
        
        if (props.temElevadorParado || (props.nElevadorParado && props.nElevadorParado > 0)) {
            cor = '#dc3545'; // Ã°Å¸â€Â´ Vermelho para elevadores parados
        } else if (props.status && props.status.toLowerCase().includes('suspenso')) {
            cor = '#ffc107'; // Ã°Å¸Å¸Â¡ Amarelo para suspensos (CORRIGIDO)
        } else if (props.status && props.status.toLowerCase().includes('atividade')) {
            cor = '#28a745'; // Ã°Å¸Å¸Â¢ Verde para ativos
        }
        
        // Define tamanho baseado na quantidade
        const radius = props.qtd_elev >= 5 ? 10 : (props.qtd_elev >= 3 ? 8 : 6);
        
        // Cria o marcador
        const marker = L.circleMarker(latlng, {
            radius: radius,
            fillColor: cor,
            color: cor,
            weight: 2,
            opacity: 1,
            fillOpacity: 0.8
        });
        
        // Ã°Å¸â€œÂ TOOLTIP ATUALIZADO
        let tooltipText = `${props.cidade} - ${props.tipo}<br/>
            ${props.qtd_elev} elevadores - ${props.marcaLicitacao}<br/>
            ${props.regiao} - ${props.status}`;
        
        if (props.nElevadorParado && props.nElevadorParado > 0) {
            tooltipText += `<br/><strong style="color: #dc3545;">Ã¢Å¡Â Ã¯Â¸Â ${props.nElevadorParado} parado(s)</strong>`;
        }

        marker.bindTooltip(tooltipText, {sticky: true});
        
        // Ã°Å¸â€œÂ POPUP ATUALIZADO
        let popupContent = `<div style="font-family: Arial, sans-serif;">
                <h4 style="margin: 0 0 10px 0; color: #333;">${props.unidade}</h4>
                <p><strong>Cidade:</strong> ${props.cidade}</p>
                <p><strong>EndereÃ§o:</strong> ${props.endereco}</p>
                <p><strong>Tipo:</strong> ${props.tipo}</p>
                <p><strong>Elevadores:</strong> ${props.qtd_elev}</p>
                <p><strong>Paradas:</strong> ${props.paradas}</p>
                <p><strong>Marca:</strong> ${props.marca}</p>
                <p><strong>Empresa:</strong> ${props.empresa}</p>
                <p><strong>Status:</strong> ${props.status}</p>`;
        
        // Ã°Å¸â€ â€¢ ADICIONA INFORMAÃƒâ€¡Ãƒâ€¢ES DE ELEVADORES PARADOS E SUSPENSOS
        
        if ((props.nElevadorParado && props.nElevadorParado > 0)) {
            popupContent += `
                <hr style="margin: 10px 0;">
                <p style="color: #dc3545;"><strong>Ã¢Å¡Â Ã¯Â¸Â Elevadores Parados:</strong> ${props.nElevadorParado}</p>`;
        }
        if ((props.nElevadorParado && props.nElevadorParado > 0) || props.status && props.status.toLowerCase().includes('suspenso')) {    
            if (props.dataDeParada) {
                popupContent += `<p style="color: #dc3545;"><strong>Ã°Å¸â€œâ€¦ Data da Parada:</strong> ${props.dataDeParada}</p>`;
            }
            
            if (props.previsaoDeRetorno) {
                popupContent += `<p style="color: #dc3545;"><strong>Ã°Å¸â€â€ž PrevisÃ£o de Retorno:</strong> ${props.previsaoDeRetorno}</p>`;
            }
        }
        
        popupContent += '</div>';
        
        marker.bindPopup(popupContent, {maxWidth: 350});
        
        return marker;
    }

    // FunÃ§Ã£o para atualizar contador
    function atualizarContadorFiltros() {
        if (!dadosFiltrados.features) return;
        
        const totalElevadores = dadosFiltrados.features.reduce((total, feature) => {
            return total + feature.properties.qtd_elev;
        }, 0);

        const totalLocais = dadosFiltrados.features.length;

        const elemElevadores = document.getElementById('total-elevadores-filtro');
        const elemLocais = document.getElementById('total-locais-filtro');
        
        if (elemElevadores) elemElevadores.textContent = totalElevadores;
        if (elemLocais) elemLocais.textContent = totalLocais;

        const contadorElement = document.getElementById('contador-resultados');
        if (contadorElement) {
            if (totalElevadores === 0) {
                contadorElement.style.background = '#ffebee';
                contadorElement.style.color = '#c62828';
                contadorElement.style.borderColor = '#ef9a9a';
            } else {
                contadorElement.style.background = '#e8f5e8';
                contadorElement.style.color = '#2e7d32';
                contadorElement.style.borderColor = '#a5d6a7';
            }
        }
        
        console.log(`Ã°Å¸â€œÅ  Contador atualizado: ${totalElevadores} elevadores em ${totalLocais} locais`);
    }

    // FunÃ§Ã£o para atualizar estatÃƒÂ­sticas da dashboard - COM SITUAÃƒâ€¡ÃƒÆ’O
    function atualizarEstatisticasDashboard() {
        const tiposSelecionados = obterSelecionados('tipo');
        const regioesSelecionadas = obterSelecionados('regiao');
        const marcasSelecionadas = obterSelecionados('marca');
        const empresasSelecionadas = obterSelecionados('empresa');
        const situacoesSelecionadas = obterSelecionados('situacao'); // Ã°Å¸â€ â€¢ NOVO

        // Se nenhum filtro ativo, limpa todos os filtros
        if (tiposSelecionados.length === 0 && regioesSelecionadas.length === 0 && 
            marcasSelecionadas.length === 0 && empresasSelecionadas.length === 0 &&
            situacoesSelecionadas.length === 0) { // Ã°Å¸â€ â€¢ INCLUIR NOVO FILTRO
            console.log('Ã¢ÂÂ­Ã¯Â¸Â Nenhum filtro ativo, limpando todos os filtros');
            limparFiltros();
            return;
        }

        // Monta parÃƒÂ¢metros
        const params = new URLSearchParams();
        tiposSelecionados.forEach(tipo => params.append('tipo', tipo));
        regioesSelecionadas.forEach(regiao => params.append('regiao', regiao));
        marcasSelecionadas.forEach(marca => params.append('marca', marca));
        empresasSelecionadas.forEach(empresa => params.append('empresa', empresa));
        situacoesSelecionadas.forEach(situacao => params.append('situacao', situacao)); // Ã°Å¸â€ â€¢ NOVO

        console.log('Ã°Å¸â€œÂ¡ Fazendo requisiÃ§Ã£o para API...');

        // Mostra loading
        const loadingElement = document.getElementById('loading-stats');
        if (loadingElement) loadingElement.style.display = 'block';

        // Faz requisiÃ§Ã£o
        fetch('/api/filtrar?' + params.toString())
            .then(response => response.json())
            .then(data => {
                if (loadingElement) loadingElement.style.display = 'none';
                
                console.log('Ã°Å¸â€œÂ¡ Resposta da API:', data);
                
                if (data.success) {
                    // Atualiza cards
                    const elementos = {
                        'stat-predios': data.stats.total_predios,
                        'stat-elevadores': data.stats.total_elevadores,
                        'stat-cidades': data.stats.cidades,
                        'stat-regioes': data.stats.regioes,
                        'stat-ativos': data.stats.em_atividade,
                        'stat-suspensos': data.stats.suspensos,
                        'stat-parados': data.stats.elevadores_parados
                    };
                    
                    for (let id in elementos) {
                        const elem = document.getElementById(id);
                        if (elem) {
                            elem.textContent = elementos[id];
                            console.log(`Ã°Å¸â€œÅ  Card ${id} atualizado para:`, elementos[id]);
                        }
                    }

                    // Atualiza estatÃƒÂ­sticas detalhadas
                    mostrarEstatisticasDetalhadas(data.stats);
                }
            })
            .catch(error => {
                if (loadingElement) loadingElement.style.display = 'none';
                console.error('Ã¢ÂÅ’ Erro ao carregar estatÃƒÂ­sticas:', error);
            });
    }

    // FunÃ§Ã£o para mostrar estatÃƒÂ­sticas detalhadas
    function mostrarEstatisticasDetalhadas(stats) {
        const container = document.getElementById('stats-detalhadas');
        if (!container) return;
        
        let html = '<div class="row">';
        
        const categorias = [
            {titulo: 'Por Tipo', dados: stats.por_tipo},
            {titulo: 'Por RegiÃ£o', dados: stats.por_regiao},
            {titulo: 'Por Marca', dados: stats.por_marca},
            {titulo: 'Por Status', dados: stats.por_status}
        ];
        
        categorias.forEach(categoria => {
            html += `<div class="col-md-3"><h6>${categoria.titulo}</h6><ul class="list-unstyled">`;
            for (let [key, value] of Object.entries(categoria.dados)) {
                html += `<li><strong>${key}:</strong> ${value}</li>`;
            }
            html += '</ul></div>';
        });
        
        html += '</div>';
        container.innerHTML = html;
    }

    // FunÃ§ÃƒÂµes auxiliares
    function limparFiltros() {
        console.log('Ã°Å¸Â§Â¹ Limpando todos os filtros...');
        
        const checkboxes = document.querySelectorAll('input[type="checkbox"]');
        checkboxes.forEach(cb => cb.checked = false);
        
        dadosFiltrados = dadosOriginais;
        atualizarMapa();
        atualizarContadorFiltros();
        
        // Restaura valores originais dos cards
        const valoresOriginais = window.statsOriginais || {};
        for (let id in valoresOriginais) {
            const elem = document.getElementById(id);
            if (elem) elem.textContent = valoresOriginais[id];
        }
        
        const statsContainer = document.getElementById('stats-detalhadas');
        if (statsContainer) {
            statsContainer.innerHTML = '<p class="text-muted">Use os filtros no mapa para ver estatÃƒÂ­sticas especÃƒÂ­ficas.</p>';
        }
        
        console.log('Ã¢Å“â€¦ Filtros limpos');
    }

    function selecionarTodos() {
        console.log('Ã¢Å“â€¦ Selecionando todos os filtros...');
        
        const checkboxes = document.querySelectorAll('input[type="checkbox"]');
        checkboxes.forEach(cb => cb.checked = true);
        aplicarFiltros();
    }

    function toggleCategoria(categoria) {
        const div = document.getElementById(`filtros-${categoria}`);
        const button = document.getElementById(`toggle-${categoria}`);

        if (div && button) {
            if (div.style.display === 'none') {
                div.style.display = 'block';
                button.textContent = 'Ã¢Å¾â€“';
            } else {
                div.style.display = 'none';
                button.textContent = 'Ã¢Å¾â€¢';
            }
        }
    }

    function atualizarDados() {
        const btn = event.target;
        const originalText = btn.innerHTML;
        btn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Atualizando...';
        btn.disabled = true;
        
        fetch('/atualizar')
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert('Dados atualizados!\n' + data.message);
                    location.reload();
                } else {
                    alert('Erro: ' + data.message);
                }
            })
            .catch(error => {
                alert('Erro na requisiÃ§Ã£o');
            })
            .finally(() => {
                btn.innerHTML = originalText;
                btn.disabled = false;
            });
    }

    // Adiciona event listener para debug quando a pÃƒÂ¡gina carrega
    document.addEventListener('DOMContentLoaded', function() {
        console.log('Ã¯Â¿Â½Ã¯Â¿Â½ DOM carregado, aguardando inicializaÃ§Ã£o...');
    });
--- Fim do código: filtros_mapa.js ---

--- Início do código: elevators.py ---
# app/api/elevators.py
from flask import Blueprint, jsonify, request
# ImportaÃƒÂ§ÃƒÂµes antigas: from app.utils.decorators import login_required, api_response
# Nova importaÃƒÂ§ÃƒÂ£o:
from app.utils.auth_decorators import api_auth_required # Agora inclui autenticaÃƒÂ§ÃƒÂ£o E padronizaÃƒÂ§ÃƒÂ£o JSON

from app.services.sheets_service import SheetsService
from app.services.data_processor import DataProcessor
from app.services.stats_service import StatsService

elevators_api_bp = Blueprint('elevators_api', __name__)

@elevators_api_bp.route('/filtrar')
@api_auth_required # Substitui @login_required e @api_response
def api_filtrar():
    """API para filtrar dados de elevadores"""
    tipos = request.args.getlist('tipo')
    regioes = request.args.getlist('regiao')
    marcas = request.args.getlist('marca')
    empresas = request.args.getlist('empresa')
    situacoes = request.args.getlist('situacao')
    
    sheets_service = SheetsService()
    data_processor = DataProcessor()
    
    dados_raw = sheets_service.obter_dados_elevadores()
    processed_data = data_processor.process_elevators_data(dados_raw)
    
    elevators_filtered = data_processor.apply_filters(
        processed_data['registros_processados'],
        tipos=tipos,
        regioes=regioes,
        marcas=marcas,
        empresas=empresas,
        situacoes=situacoes
    )
    
    stats = StatsService.calculate_elevator_stats(elevators_filtered)
    stats_by_category = StatsService.group_by_category(elevators_filtered)
    stats.update(stats_by_category)
    
    # Retorna um dicionÃƒÂ¡rio, que api_auth_required (via json_response) irÃƒÂ¡ converter para JSON e lidar com erros
    return {
        'success': True,
        'stats': stats,
        'total_registros': len(elevators_filtered)
    }

@elevators_api_bp.route('/elevadores-parados')
@api_auth_required # Substitui @login_required e @api_response
def api_elevadores_parados():
    """API para obter elevadores parados"""
    # (Sua implementaÃƒÂ§ÃƒÂ£o atual era 'pass', adicionei um retorno de exemplo)
    # LÃƒÂ³gica para filtrar elevadores parados aqui
    return {
        'success': True,
        'message': 'Dados de elevadores parados (implementaÃƒÂ§ÃƒÂ£o especÃƒÂ­fica pendente).'
    }
--- Fim do código: elevators.py ---

--- Início do código: kpis.py ---
# app/api/kpis.py
from flask import Blueprint, jsonify, request, current_app
from app.utils.auth_decorators import api_auth_required
from app.services.sheets_service import SheetsService
from app.services.data_processor import DataProcessor
from app.blueprints.kpis import obter_kpis_cached # Importa a funÃƒÂ§ÃƒÂ£o de cache do Blueprint UI
from datetime import datetime, timedelta
import pytz

kpis_api_bp = Blueprint('kpis_api', __name__)

@kpis_api_bp.route('/kpis-filtrados')
@api_auth_required
def api_kpis_filtrados():
    """API para obter dados de KPIs filtrados."""
    start_time = datetime.now()
    
    try:
        # ObtÃƒÂ©m a lista completa de objetos KPI do cache
        all_kpis, _ = obter_kpis_cached()
        
        # Extrai parÃƒÂ¢metros de filtro da requisiÃƒÂ§ÃƒÂ£o
        data_inicio_str = request.args.get('data_inicio')
        data_fim_str = request.args.get('data_fim')
        periodo_predefinido = request.args.get('periodo_predefinido')
        status_filtro = request.args.get('status')
        categoria_filtro = request.args.get('categoria')
        edificio_filtro = request.args.get('edificio')
        equipamento_filtro = request.args.get('equipamento')

        # Converte strings de data para objetos datetime (ajustado para BRT)
        brt = pytz.timezone("America/Sao_Paulo")
        data_inicio = None
        data_fim = None

        if data_inicio_str:
            data_inicio = brt.localize(datetime.strptime(data_inicio_str, '%Y-%m-%d'))
        if data_fim_str:
            data_fim = brt.localize(datetime.strptime(data_fim_str, '%Y-%m-%d')) + timedelta(days=1, seconds=-1) # Inclui o dia todo

        # Aplica perÃƒÂ­odo predefinido se nÃƒÂ£o houver datas especÃƒÂ­ficas
        if periodo_predefinido and not (data_inicio_str or data_fim_str):
            hoje = brt.localize(datetime.now())
            if periodo_predefinido == 'ultima-semana':
                data_inicio = hoje - timedelta(weeks=1)
            elif periodo_predefinido == 'ultimo-mes':
                data_inicio = hoje - timedelta(days=30)
            elif periodo_predefinido == 'ultimos-3-meses':
                data_inicio = hoje - timedelta(days=90)
            elif periodo_predefinido == 'ultimos-6-meses':
                data_inicio = hoje - timedelta(days=180)
            elif periodo_predefinido == 'ultimo-ano':
                data_inicio = hoje - timedelta(days=365)
            elif periodo_predefinido == 'ultimos-2-anos':
                data_inicio = hoje - timedelta(days=730)
            elif periodo_predefinido == 'ultimos-5-anos':
                data_inicio = hoje - timedelta(days=1825)
            # 'todo-periodo' nÃƒÂ£o requer ajuste de data

            # Garante que data_fim esteja definida para filtros predefinidos
            if data_inicio and not data_fim:
                data_fim = hoje # AtÃƒÂ© hoje

        # Cria um DataProcessor para aplicar os filtros
        data_processor = DataProcessor()
        
        # Filtra a lista de objetos KPI
        kpis_filtrados = data_processor.apply_kpi_filters(
            all_kpis,
            data_inicio=data_inicio,
            data_fim=data_fim,
            status=status_filtro,
            categoria=categoria_filtro,
            edificio=edificio_filtro,
            equipamento=equipamento_filtro
        )
        
        # Calcula as mÃƒÂ©tricas dos KPIs filtrados
        metricas_filtradas = data_processor._calculate_kpi_metrics(kpis_filtrados)
        
        # Prepara um resumo para a tabela (se necessÃƒÂ¡rio, os 20 primeiros, como no JS)
        resumo_tabela = [kpi.to_dict() for kpi in kpis_filtrados[:20]]

        elapsed_time = (datetime.now() - start_time).total_seconds()
        print(f"Ã¢Å“â€¦ KPIs: Filtros aplicados em {elapsed_time:.2f}s: {len(kpis_filtrados)} KPIs.")
        
        return {
            'success': True,
            'metricas': metricas_filtradas,
            'resumo': resumo_tabela,
            'total_kpis': len(kpis_filtrados),
            'performance': {
                'tempo_processamento': f"{elapsed_time:.2f}s",
                'fonte_dados': 'cache'
            }
        }
    except ValueError as ve:
        current_app.logger.warning(f"Erro de validaÃƒÂ§ÃƒÂ£o na API de KPIs: {ve}")
        return {'success': False, 'message': str(ve)}, 400
    except Exception as e:
        current_app.logger.exception(f"Erro na API de KPIs: {e}")
        return {'success': False, 'message': 'Ocorreu um erro interno ao processar os KPIs.'}, 500
--- Fim do código: kpis.py ---

--- Início do código: __init__.py ---
# app/api/__init__.py
"""MÃ³dulo de APIs REST"""
--- Fim do código: __init__.py ---

--- Início do código: auth.py ---
# app/blueprints/auth.py
from flask import Blueprint, render_template, render_template_string, request, redirect, url_for, flash, jsonify, session
from app.services.auth_service import AuthService
from app.utils.auth_decorators import json_response, api_auth_required

auth_bp = Blueprint('auth', __name__, url_prefix='/v2/auth')

@auth_bp.route('/login', methods=['GET', 'POST'])
def login():
    """PÃƒÂ¡gina de login da nova arquitetura"""
    if request.method == 'POST':
        if request.is_json:
            return handle_login_api()
        else:
            return handle_login_form()
    
    return render_template_string(LOGIN_TEMPLATE)

def handle_login_form():
    """Processa login via formulÃƒÂ¡rio"""
    usuario = request.form.get('usuario', '').strip()
    senha = request.form.get('senha', '')
    ip_cliente = request.environ.get('REMOTE_ADDR', 'unknown')
    
    if not usuario or not senha:
        flash('UsuÃ¡rio e senha sÃ£o obrigatÃ³rios.', 'danger')
        return render_template_string(LOGIN_TEMPLATE)
    
    sucesso, mensagem = AuthService.authenticate(usuario, senha, ip_cliente)
    
    if sucesso:
        flash(mensagem, 'success')
        next_page = request.args.get('next')
        return redirect(next_page) if next_page else redirect(url_for('dashboard.index')) # Redireciona para o novo dashboard
    else:
        flash(mensagem, 'danger')
        return render_template_string(LOGIN_TEMPLATE)

# Agora usa o novo json_response (nÃƒÂ£o exige autenticaÃƒÂ§ÃƒÂ£o, mas padroniza a saÃƒÂ­da JSON)
@json_response 
def handle_login_api():
    """Processa login via API"""
    data = request.get_json()
    usuario = data.get('usuario', '').strip()
    senha = data.get('senha', '')
    ip_cliente = request.environ.get('REMOTE_ADDR', 'unknown')
    
    if not usuario or not senha:
        return {'success': False, 'message': 'UsuÃ¡rio e senha sÃ£o obrigatÃ³rios.'}, 400
    
    sucesso, mensagem = AuthService.authenticate(usuario, senha, ip_cliente)
    
    if sucesso:
        return {
            'success': True, 
            'message': mensagem,
            'user': AuthService.get_current_user(),
            'redirect': url_for('dashboard.index') # Redireciona para o novo dashboard
        }
    else:
        return {'success': False, 'message': mensagem}, 401

@auth_bp.route('/logout')
def logout():
    """Logout da nova arquitetura"""
    mensagem = AuthService.logout()
    
    if request.is_json:
        # Usa json_response aqui tambÃƒÂ©m, pois ÃƒÂ© uma API de logout que deve ter saÃƒÂ­da padronizada
        return json_response(lambda: {'success': True, 'message': mensagem})()
    else:
        flash(mensagem, 'info')
        return redirect(url_for('auth.login'))

@auth_bp.route('/dashboard')
# Este endpoint agora serÃƒÂ¡ protegido pelo login_required_v2
# Importante: o `auth.py` original nÃƒÂ£o tinha proteÃƒÂ§ÃƒÂ£o, mas o `dashboard.py` jÃƒÂ¡ tem.
# Se este ÃƒÂ© um dashboard temporÃƒÂ¡rio que serÃƒÂ¡ substituÃƒÂ­do, esta rota deve ser deprecada.
# Por consistÃƒÂªncia, sugiro protegÃƒÂª-la com login_required_v2 se ainda estiver em uso.
# No entanto, a descriÃƒÂ§ÃƒÂ£o sugere que `app/blueprints/dashboard.py` ÃƒÂ© o dashboard principal.
# Vou assumir que este `auth_bp.route('/dashboard')` serÃƒÂ¡ removido no futuro,
# e o dashboard real ÃƒÂ© em `app/blueprints/dashboard.py` (que jÃƒÂ¡ usa `login_required_v2`).
# Se vocÃƒÂª decidir mantÃƒÂª-lo, adicione: `@login_required_v2`.
def dashboard():
    """Dashboard temporÃƒÂ¡rio da nova arquitetura"""
    if not AuthService.is_authenticated():
        if request.is_json:
            return jsonify({'success': False, 'message': 'NÃƒÂ£o autenticado'}), 401
        else:
            flash('VocÃƒÂª precisa fazer login.', 'warning')
            return redirect(url_for('auth.login'))
    
    return render_template_string(DASHBOARD_TEMPLATE, 
                                usuario=AuthService.get_current_user())

@auth_bp.route('/status')
@api_auth_required # Agora protegida e com saÃƒÂ­da JSON padronizada
def auth_status():
    """Status da autenticaÃƒÂ§ÃƒÂ£o (API)"""
    # Retorna um dicionÃƒÂ¡rio, que api_auth_required (via json_response) irÃƒÂ¡ converter para JSON e lidar com erros
    return {
        'authenticated': AuthService.is_authenticated(),
        'user': AuthService.get_current_user(),
        'session_data': {
            'login_timestamp': session.get('login_timestamp'),
            'permanent': session.permanent
        }
    }

# ========== TEMPLATES INLINE (temporÃƒÂ¡rios) ==========

LOGIN_TEMPLATE = """
<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Login - Nova Arquitetura</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        body { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); min-height: 100vh; display: flex; align-items: center; }
        .login-container { background: white; border-radius: 15px; box-shadow: 0 15px 35px rgba(0,0,0,0.1); max-width: 400px; width: 100%; margin: 20px; }
        .login-header { background: linear-gradient(135deg, #28a745 0%, #20c997 100%); color: white; padding: 2rem; text-align: center; border-radius: 15px 15px 0 0; }
        .version-badge { position: absolute; top: 10px; right: 10px; background: rgba(255,255,255,0.2); padding: 5px 10px; border-radius: 15px; font-size: 12px; }
    </style>
</head>
<body>
    <div class="container d-flex justify-content-center">
        <div class="login-container">
            <div class="login-header position-relative">
                <div class="version-badge">v2.0</div>
                <i class="fas fa-building fa-3x mb-3"></i>
                <h3>Nova Arquitetura</h3>
                <p class="mb-0">Sistema Modular</p>
            </div>
            
            <div class="p-4">
                {% with messages = get_flashed_messages(with_categories=true) %}
                    {% if messages %}
                        {% for category, message in messages %}
                            <div class="alert alert-{{ 'danger' if category == 'danger' else 'warning' if category == 'warning' else 'success' }} alert-dismissible fade show">
                                {{ message }}
                                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                            </div>
                        {% endfor %}
                    {% endif %}
                {% endwith %}
                
                <form method="POST">
                    <div class="mb-3">
                        <label class="form-label"><i class="fas fa-user"></i> UsuÃ¡rio</label>
                        <input type="text" class="form-control" name="usuario" required>
                    </div>
                    
                    <div class="mb-3">
                        <label class="form-label"><i class="fas fa-lock"></i> Senha</label>
                        <input type="password" class="form-control" name="senha" required>
                    </div>
                    
                    <button type="submit" class="btn btn-success w-100">
                        <i class="fas fa-sign-in-alt"></i> Entrar
                    </button>
                </form>
                
                <hr>
                <div class="text-center">
                    <small class="text-muted">
                        <i class="fas fa-info-circle"></i>
                        Sistema atual: <a href="http://localhost:5000/login" >localhost:5000</a>
                    </small>
                </div>
            </div>
        </div>
    </div>
    
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
"""

DASHBOARD_TEMPLATE = """
<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard - Nova Arquitetura</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
</head>
<body class="bg-light">
    <nav class="navbar navbar-expand-lg navbar-dark bg-success">
        <div class="container">
            <a class="navbar-brand" href="#">
                <i class="fas fa-building"></i> Nova Arquitetura v2.0
            </a>
            <div class="navbar-nav ms-auto">
                <span class="navbar-text me-3">
                    <i class="fas fa-user"></i> {{ usuario }}
                </span>
                <a class="nav-link" href="{{ url_for('auth.logout') }}">
                    <i class="fas fa-sign-out-alt"></i> Sair
                </a>
            </div>
        </div>
    </nav>
    
    <div class="container mt-4">
        <div class="row">
            <div class="col-12">
                <div class="alert alert-success">
                    <h4><i class="fas fa-check-circle"></i> AutenticaÃƒÂ§ÃƒÂ£o Funcionando!</h4>
                    <p>Bem-vindo ao dashboard da nova arquitetura modular.</p>
                </div>
            </div>
        </div>
        
        <div class="row">
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header">
                        <h5><i class="fas fa-info-circle"></i> InformaÃƒÂ§ÃƒÂµes da SessÃƒÂ£o</h5>
                    </div>
                    <div class="card-body">
                        <p><strong>UsuÃƒÂ¡rio:</strong> {{ usuario }}</p>
                        <p><strong>Sistema:</strong> Nova Arquitetura v2.0</p>
                        <p><strong>Fase:</strong> 3 - AutenticaÃƒÂ§ÃƒÂ£o Modular</p>
                    </div>
                </div>
            </div>
            
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header">
                        <h5><i class="fas fa-link"></i> Links ÃƒÅ¡teis</h5>
                    </div>
                    <div class="card-body">
                        <p><a href="http://localhost:5000"  class="btn btn-primary btn-sm">
                            <i class="fas fa-external-link-alt"></i> Sistema Atual
                        </a></p>
                        <p><a href="{{ url_for('test.status') }}" class="btn btn-info btn-sm">
                            <i class="fas fa-cog"></i> Status do Sistema
                        </a></p>
                        <p><a href="{{ url_for('auth.auth_status') }}" class="btn btn-secondary btn-sm">
                            <i class="fas fa-shield-alt"></i> Status da Auth
                        </a></p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</body>
</html>
"""
--- Fim do código: auth.py ---

--- Início do código: dashboard.py ---
# app/blueprints/dashboard.py
from flask import Blueprint, render_template, jsonify, request, current_app
from app.utils.auth_decorators import login_required_v2, api_auth_required # Importa api_auth_required
from app.services.sheets_service import SheetsService
from app.services.data_processor import DataProcessor
from app.services.auth_service import AuthService
from app.models.elevator import Elevator
from typing import List
import time

dashboard_bp = Blueprint('dashboard', __name__, url_prefix='/v2')

# Ã¢Å“â€¦ CACHE GLOBAL PARA DADOS PROCESSADOS
_dados_cache = {
    'dados_raw': None,
    'processed_data': None,
    'elevators': None,
    'timestamp': None
}

def obter_dados_cached():
    """ObtÃƒÂ©m dados com cache inteligente"""
    global _dados_cache
    
    # Verifica se cache ÃƒÂ© vÃƒÂ¡lido (5 minutos)
    cache_valido = (
        _dados_cache['timestamp'] and 
        (time.time() - _dados_cache['timestamp']) < 300
    )
    
    if cache_valido and _dados_cache['elevators']:
        print("Ã°Å¸â€œÂ¦ Usando dados do cache")
        return _dados_cache['elevators'], _dados_cache['processed_data']
    
    # Recarrega dados
    print("Ã°Å¸â€â€ž Recarregando dados (cache expirado)")
    planilha_url = current_app.config.get('PLANILHA_URL')
    if not planilha_url:
        raise ValueError("URL da planilha nÃƒÂ£o configurada")
    
    sheets_service = SheetsService()
    data_processor = DataProcessor()
    
    dados_raw = sheets_service.obter_dados_elevadores(planilha_url)
    if dados_raw.empty:
        raise ValueError("Nenhum dado encontrado")
    
    processed_data = data_processor.process_elevators_data(dados_raw)
    elevators = [Elevator.from_dict(props) for props in processed_data['registros_processados']]
    
    # Atualiza cache
    _dados_cache.update({
        'dados_raw': dados_raw,
        'processed_data': processed_data,
        'elevators': elevators,
        'timestamp': time.time()
    })
    
    print(f"Ã¢Å“â€¦ Cache atualizado: {len(elevators)} elevadores")
    return elevators, processed_data


@dashboard_bp.route('/')
@dashboard_bp.route('/dashboard')
@login_required_v2 # Este ÃƒÂ© um endpoint de UI (renderiza HTML), entÃƒÂ£o login_required_v2 ÃƒÂ© apropriado.
def index():
    """Dashboard principal da nova arquitetura"""
    try:
        print("Ã°Å¸â€œÅ  Carregando dashboard...")
        elevators, processed_data = obter_dados_cached()
        
        data_processor = DataProcessor()
        stats = data_processor.calculate_stats(elevators)
        stats_detalhadas = calcular_estatisticas_detalhadas(elevators)
        
        print(f"Ã¢Å“â€¦ Dashboard carregado: {len(elevators)} elevadores, {stats['total_predios']} prÃƒÂ©dios")
        
        return render_template('v2/dashboard.html',
                             geojson_data=processed_data['geojson_data'],
                             stats=stats,
                             stats_detalhadas=stats_detalhadas,
                             tipos_unicos=processed_data['tipos_unicos'],
                             regioes_unicas=processed_data['regioes_unicas'],
                             marcas_unicas=processed_data['marcas_unicas'],
                             empresas_unicas=processed_data['empresas_unicas'],
                             usuario=AuthService.get_current_user(),
                             total_elevadores=len(elevators))
                             
    except Exception as e:
        print(f"Ã¢ÂÅ’ Erro no dashboard: {e}")
        import traceback
        traceback.print_exc()
        
        return render_template('v2/dashboard.html',
                             erro=f"Erro interno: {str(e)}",
                             usuario=AuthService.get_current_user())

@dashboard_bp.route('/api/dados-elevadores-filtrados')
@api_auth_required # Este ÃƒÂ© um endpoint de API, entÃƒÂ£o api_auth_required ÃƒÂ© mais apropriado.
def api_dados_elevadores_filtrados():
    """API OTIMIZADA para obter dados filtrados"""
    start_time = time.time()
    
    elevators, processed_data = obter_dados_cached()
    
    tipos = request.args.getlist('tipo')
    regioes = request.args.getlist('regiao')
    marcas = request.args.getlist('marca')
    empresas = request.args.getlist('empresa')
    situacoes = request.args.getlist('situacao')
    
    print(f"Ã°Å¸â€Â API Filtros: tipos={tipos}, regioes={regioes}, situacoes={situacoes}")
    
    data_processor = DataProcessor()
    elevators_filtered = data_processor.apply_filters(
        elevators,
        tipos=tipos,
        regioes=regioes,
        marcas=marcas,
        empresas=empresas,
        situacoes=situacoes
    )
    
    stats = data_processor.calculate_stats(elevators_filtered)
    stats_detalhadas = calcular_estatisticas_detalhadas(elevators_filtered)
    
    geojson_filtrado = criar_geojson_manual(elevators_filtered)
    
    elapsed_time = time.time() - start_time
    print(f"Ã¢Å“â€¦ Filtros aplicados em {elapsed_time:.2f}s: {len(elevators_filtered)} elevadores")
    
    # Retorna um dicionÃƒÂ¡rio, que api_auth_required (via json_response) irÃƒÂ¡ converter para JSON e lidar com erros
    return {
        'success': True,
        'data': {
            'geojson': geojson_filtrado,
            'stats': stats,
            'stats_detalhadas': stats_detalhadas,
            'total_registros': len(elevators_filtered),
            'performance': {
                'tempo_processamento': f"{elapsed_time:.2f}s",
                'fonte_dados': 'cache'
            }
        }
    }
    
@dashboard_bp.route('/api/dados-elevadores')
@api_auth_required # Este ÃƒÂ© um endpoint de API, entÃƒÂ£o api_auth_required ÃƒÂ© mais apropriado.
def api_dados_elevadores():
    """
    API para obter TODOS os dados de elevadores (sem filtros)
    NOVA ROTA para suportar botÃƒÂ£o "Limpar Filtros"
    """
    start_time = time.time()
    print("Ã°Å¸â€â€ž API: Carregando todos os dados (sem filtros)...")
    
    elevators, processed_data = obter_dados_cached()
    
    data_processor = DataProcessor()
    stats = data_processor.calculate_stats(elevators)
    stats_detalhadas = calcular_estatisticas_detalhadas(elevators)
    
    elapsed_time = time.time() - start_time
    print(f"Ã¢Å“â€¦ Todos os dados carregados em {elapsed_time:.2f}s: {len(elevators)} elevadores")
    
    # Retorna um dicionÃƒÂ¡rio, que api_auth_required (via json_response) irÃƒÂ¡ converter para JSON e lidar com erros
    return {
        'success': True,
        'data': {
            'geojson': processed_data['geojson_data'],
            'stats': stats,
            'stats_detalhadas': stats_detalhadas,
            'total_registros': len(elevators),
            'performance': {
                'tempo_processamento': f"{elapsed_time:.2f}s",
                'fonte_dados': 'cache'
            }
        }
    }
    
@dashboard_bp.route('/atualizar-dados', methods=['POST', 'GET'])
@api_auth_required # Este ÃƒÂ© um endpoint de API, entÃƒÂ£o api_auth_required ÃƒÂ© mais apropriado.
def atualizar_dados():
    """Atualiza cache de dados forÃƒÂ§adamente"""
    global _dados_cache
    
    _dados_cache = {
        'dados_raw': None,
        'processed_data': None,
        'elevators': None,
        'timestamp': None
    }
    
    elevators, processed_data = obter_dados_cached()
    
    # Retorna um dicionÃƒÂ¡rio, que api_auth_required (via json_response) irÃƒÂ¡ converter para JSON e lidar com erros
    return {
        'success': True,
        'message': f'Cache limpo e dados atualizados! {len(elevators)} registros processados.',
        'timestamp': time.strftime('%Y-%m-%d %H:%M:%S')
    }

def calcular_estatisticas_detalhadas(elevators):
    """
    Calcula estatÃƒÂ­sticas detalhadas CORRIGIDO
    IMPORTANTE: Usa a mesma lÃƒÂ³gica do calculate_stats para consistÃƒÂªncia
    """
    from collections import defaultdict
    
    if not elevators:
        return {
            'por_tipo': {},
            'por_regiao': {},
            'por_marca': {},
            'por_status': {},
            'elevadores_parados': []
        }
    
    # Ã¢Å“â€¦ DETECTA TIPO DE FILTRO (mesma lÃƒÂ³gica do calculate_stats)
    filtro_parados = all(e.tem_elevador_parado for e in elevators)
    filtro_suspensos = all(e.status == 'Suspenso' for e in elevators)
    filtro_ativos = all(e.status == 'Em atividade' and not e.tem_elevador_parado for e in elevators)
    
    stats = {
        'por_tipo': defaultdict(int),
        'por_regiao': defaultdict(int),
        'por_marca': defaultdict(int),
        'por_status': defaultdict(int),
        'elevadores_parados': []
    }
    
    if filtro_parados:
        # Ã¢Å“â€¦ FILTRO "PARADOS": Conta APENAS os parados
        for elevator in elevators:
            # Por tipo/regiÃƒÂ£o/marca: conta apenas elevadores parados
            stats['por_tipo'][elevator.tipo] += elevator.n_elevador_parado
            stats['por_regiao'][elevator.regiao] += elevator.n_elevador_parado
            stats['por_marca'][elevator.marca_licitacao] += elevator.n_elevador_parado
            
            # Por status: apenas parados
            stats['por_status']['Parados'] += elevator.n_elevador_parado
            
            # Detalhes dos elevadores parados
            stats['elevadores_parados'].append({
                'unidade': elevator.unidade,
                'cidade': elevator.cidade,
                'tipo': elevator.tipo,
                'regiao': elevator.regiao,
                'quantidade_parada': elevator.n_elevador_parado,
                'total_elevadores': elevator.quantidade,
                'marca': elevator.marca_licitacao
            })
            
    elif filtro_suspensos:
        # Ã¢Å“â€¦ FILTRO "SUSPENSOS": Conta APENAS os suspensos
        for elevator in elevators:
            stats['por_tipo'][elevator.tipo] += elevator.quantidade
            stats['por_regiao'][elevator.regiao] += elevator.quantidade
            stats['por_marca'][elevator.marca_licitacao] += elevator.quantidade
            stats['por_status']['Suspensos'] += elevator.quantidade
            
    elif filtro_ativos:
        # Ã¢Å“â€¦ FILTRO "ATIVOS": Conta APENAS os ativos
        for elevator in elevators:
            stats['por_tipo'][elevator.tipo] += elevator.quantidade
            stats['por_regiao'][elevator.regiao] += elevator.quantidade
            stats['por_marca'][elevator.marca_licitacao] += elevator.quantidade
            stats['por_status']['Em atividade'] += elevator.quantidade
            
    else:
        # Ã¢Å“â€¦ SEM FILTRO ou FILTRO MISTO: LÃƒÂ³gica completa
        for elevator in elevators:
            # Por tipo/regiÃƒÂ£o/marca: soma total de elevadores
            stats['por_tipo'][elevator.tipo] += elevator.quantidade
            stats['por_regiao'][elevator.regiao] += elevator.quantidade
            stats['por_marca'][elevator.marca_licitacao] += elevator.quantidade
            
            # Por status: lÃƒÂ³gica completa
            if elevator.status == 'Suspenso':
                stats['por_status']['Suspensos'] += elevator.quantidade
            elif elevator.tem_elevador_parado:
                stats['por_status']['Parados'] += elevator.n_elevador_parado
                ativos_deste_predio = elevator.quantidade - elevator.n_elevador_parado
                stats['por_status']['Em atividade'] += ativos_deste_predio
                
                # Detalhes dos elevadores parados
                stats['elevadores_parados'].append({
                    'unidade': elevator.unidade,
                    'cidade': elevator.cidade,
                    'tipo': elevator.tipo,
                    'regiao': elevator.regiao,
                    'quantidade_parada': elevator.n_elevador_parado,
                    'total_elevadores': elevator.quantidade,
                    'marca': elevator.marca_licitacao
                })
            else:
                stats['por_status']['Em atividade'] += elevator.quantidade
    
    # Converte para dict normal e ordena
    for categoria in ['por_tipo', 'por_regiao', 'por_marca']:
        stats[categoria] = dict(sorted(stats[categoria].items(), key=lambda x: x[1], reverse=True))
    
    # Status mantÃƒÂ©m ordem especÃƒÂ­fica
    stats['por_status'] = dict(stats['por_status'])
    
    print(f"Ã°Å¸â€œÅ  Stats detalhadas: {dict(stats['por_status'])}")
    
    return stats

@dashboard_bp.route('/atualizar-dados', methods=['POST', 'GET'])
@login_required_v2
def atualizar_dados():
    """Atualiza cache de dados forÃƒÂ§adamente"""
    try:
        global _dados_cache
        
        # Ã¢Å“â€¦ OTIMIZAÃƒâ€¡ÃƒÆ’O: Limpa cache para forÃƒÂ§ar reload
        _dados_cache = {
            'dados_raw': None,
            'processed_data': None,
            'elevators': None,
            'timestamp': None
        }
        
        # ForÃƒÂ§a nova obtenÃƒÂ§ÃƒÂ£o
        elevators, processed_data = obter_dados_cached()
        
        return jsonify({
            'success': True,
            'message': f'Cache limpo e dados atualizados! {len(elevators)} registros processados.',
            'timestamp': time.strftime('%Y-%m-%d %H:%M:%S')
        })
        
    except Exception as e:
        print(f"Ã¢ÂÅ’ Erro ao atualizar dados: {e}")
        return jsonify({
            'success': False,
            'message': f'Erro interno: {str(e)}'
        })

def criar_geojson_manual(elevators: List[Elevator]):
    """Cria GeoJSON otimizado"""
    features = []
    
    for elevator in elevators:
        if hasattr(elevator, 'latitude') and hasattr(elevator, 'longitude'):
            try:
                lat = float(elevator.latitude)
                lng = float(elevator.longitude)
                
                # Pula coordenadas invÃƒÂ¡lidas
                if lat == 0 or lng == 0:
                    continue
                    
                feature = elevator.to_geojson_feature()

                # Adicione uma validaÃƒÂ§ÃƒÂ£o extra caso to_geojson_feature retorne None por algum motivo
                if feature:
                    features.append(feature)

            except (ValueError, TypeError):
                continue
    
    return {
        "type": "FeatureCollection",
        "features": features
    }
--- Fim do código: dashboard.py ---

--- Início do código: kpis.py ---
# app/blueprints/kpis.py
from flask import Blueprint, render_template, current_app, jsonify, request
from app.utils.auth_decorators import login_required_v2, api_auth_required # Importamos os decoradores da v2
from app.services.sheets_service import SheetsService
from app.services.data_processor import DataProcessor
from app.services.auth_service import AuthService
from datetime import datetime
import time
import pytz # Para fusos horÃƒÂ¡rios

kpis_bp = Blueprint('kpis', __name__, url_prefix='/v2/kpis')

# Ã¢Å“â€¦ CACHE GLOBAL PARA DADOS RAW DE KPIS
_kpi_dados_cache = {
    'dados_raw': None,
    'kpis_processed_list': None, # Lista de objetos KPI processados
    'metricas_calculadas': None, # MÃƒÂ©tricas gerais calculadas a partir de todos os KPIs
    'timestamp': None
}

def obter_kpis_cached():
    """ObtÃƒÂ©m dados de KPIs com cache inteligente."""
    global _kpi_dados_cache
    
    # Verifica se cache ÃƒÂ© vÃƒÂ¡lido (5 minutos)
    # Converta para o fuso horÃƒÂ¡rio BRT para comparaÃƒÂ§ÃƒÂµes de tempo, se necessÃƒÂ¡rio
    brt = pytz.timezone("America/Sao_Paulo")
    
    cache_valido = (
        _kpi_dados_cache['timestamp'] and 
        (time.time() - _kpi_dados_cache['timestamp']) < 300 # 5 minutos
    )
    
    if cache_valido and _kpi_dados_cache['kpis_processed_list']:
        print("Ã°Å¸â€œÂ¦ KPIs: Usando dados do cache")
        return _kpi_dados_cache['kpis_processed_list'], _kpi_dados_cache['metricas_calculadas']
    
    # Recarrega dados
    print("Ã°Å¸â€â€ž KPIs: Recarregando dados (cache expirado)")
    planilha_kpis_url = current_app.config.get('PLANILHA_KPIS_URL')
    if not planilha_kpis_url:
        raise ValueError("Ã¢ÂÅ’ PLANILHA_KPIS_URL deve ser definida como variÃƒÂ¡vel de ambiente")
    
    sheets_service = SheetsService()
    data_processor = DataProcessor()
    
    dados_raw = sheets_service.obter_dados_kpis(planilha_kpis_url)
    if dados_raw.empty:
        raise ValueError("Ã¢ÂÅ’ Nenhum dado de KPIs encontrado")
    
    # process_kpis_data agora retorna List[KPI]
    kpis_processed_list = data_processor.process_kpis_data(dados_raw) 
    # _calculate_kpi_metrics espera uma List[KPI]
    metricas_calculadas = data_processor._calculate_kpi_metrics(kpis_processed_list) 
    
    # Atualiza cache
    _kpi_dados_cache.update({
        'dados_raw': dados_raw,
        'kpis_processed_list': kpis_processed_list,
        'metricas_calculadas': metricas_calculadas,
        'timestamp': time.time()
    })
    
    print(f"Ã¢Å“â€¦ KPIs: Cache atualizado com {len(kpis_processed_list)} registros.")
    return kpis_processed_list, metricas_calculadas

@kpis_bp.route('/')
@login_required_v2
def index():
    """Dashboard principal de KPIs"""
    try:
        print("Ã°Å¸â€œÅ  KPIs: Carregando dashboard...")
        
        # Apenas chamamos obter_kpis_cached. NÃƒÂ£o precisamos da lista completa aqui,
        # apenas das mÃƒÂ©tricas iniciais para popular os cards e filtros.
        _, metricas_iniciais = obter_kpis_cached() 
        
        # Obter listas ÃƒÂºnicas para preencher filtros, como categorias e edifÃƒÂ­cios
        # Podemos pegar isso das metricas_iniciais ou processar a lista completa de KPIs.
        # Para evitar processamento extra na UI, vamos extrair dos kpis_processed_list
        kpis_list, _ = obter_kpis_cached() # Obtem a lista completa para filtros
        
        categorias_unicas = sorted(list(set(k.categoria_problema for k in kpis_list if k.categoria_problema)))
        edificios_unicos = sorted(list(set(k.edificio for k in kpis_list if k.edificio)))
        equipamentos_unicos = sorted(list(set(k.equipamento for k in kpis_list if k.equipamento)))

        print(f"Ã¢Å“â€¦ KPIs: Dashboard carregado. Total chamados: {metricas_iniciais.get('total_chamados', 0)}")
        
        return render_template('v2/kpis.html',
                             metricas=metricas_iniciais,
                             categorias_unicas=categorias_unicas,
                             edificios_unicos=edificios_unicos,
                             equipamentos_unicos=equipamentos_unicos,
                             usuario=AuthService.get_current_user())
                             
    except Exception as e:
        print(f"Ã¢ÂÅ’ KPIs: Erro no dashboard: {e}")
        current_app.logger.exception(f"Erro ao carregar dashboard de KPIs: {e}") # Usando o logger
        return render_template('v2/kpis.html',
                             erro=f"Erro interno ao carregar KPIs: {str(e)}",
                             usuario=AuthService.get_current_user())

@kpis_bp.route('/atualizar-kpis', methods=['POST', 'GET'])
@api_auth_required # Protege e padroniza a resposta para esta API
def atualizar_dados_kpis():
    """Atualiza cache de dados de KPIs forÃƒÂ§adamente."""
    global _kpi_dados_cache
    
    # Limpa cache para forÃƒÂ§ar reload
    _kpi_dados_cache = {
        'dados_raw': None,
        'kpis_processed_list': None,
        'metricas_calculadas': None,
        'timestamp': None
    }
    
    # ForÃƒÂ§a nova obtenÃƒÂ§ÃƒÂ£o
    try:
        kpis_list, _ = obter_kpis_cached()
        return {
            'success': True,
            'message': f'Cache de KPIs limpo e dados atualizados! {len(kpis_list)} registros processados.',
            'timestamp': datetime.now(pytz.timezone("America/Sao_Paulo")).strftime('%Y-%m-%d %H:%M:%S')
        }
    except Exception as e:
        current_app.logger.exception(f"Erro ao atualizar cache de KPIs: {e}")
        return {
            'success': False,
            'message': f'Erro interno ao atualizar KPIs: {str(e)}'
        }, 500
--- Fim do código: kpis.py ---

--- Início do código: test.py ---
# app/blueprints/test.py
"""
Blueprint de teste - VERSÃƒÆ’O CORRIGIDA COM PREFIXO
"""
from flask import Blueprint, jsonify
from datetime import datetime

# Cria o blueprint
test_bp = Blueprint('test', __name__)

@test_bp.route('/')
def index():
    """PÃƒÂ¡gina inicial temporÃƒÂ¡ria"""
    return jsonify({
        'message': 'Nova arquitetura funcionando!',
        'timestamp': datetime.now().isoformat(),
        'routes_available': [
            '/ (esta pÃƒÂ¡gina)',
            '/test/health',
            '/test/config',
            '/test/services/models',
            '/test/services/data-processor',
            '/test/services/auth-service'
        ]
    })

# Ã¢Å“â€¦ MUDANÃƒâ€¡A: Adicionar prefixo /test/ nas rotas
@test_bp.route('/test/health')
def health_check():
    """Health check"""
    return jsonify({
        'status': 'OK',
        'message': 'Health check passou!',
        'timestamp': datetime.now().isoformat(),
        'version': '2.0-corrigido'
    })

@test_bp.route('/test/config')
def test_config():
    """Teste de config"""
    from flask import current_app
    return jsonify({
        'status': 'OK',
        'debug': current_app.config.get('DEBUG'),
        'secret_key_set': bool(current_app.config.get('SECRET_KEY')),
        'cache_active': hasattr(current_app, 'cache_service')
    })

# Ã¢Å“â€¦ ROTA ADICIONAL: Status geral
@test_bp.route('/test/status')
def status():
    """Status completo da aplicaÃƒÂ§ÃƒÂ£o"""
    from flask import current_app
    
    # Lista todas as rotas
    routes = []
    with current_app.app_context():
        for rule in current_app.url_map.iter_rules():
            if not rule.rule.startswith('/static'):
                routes.append({
                    'rule': rule.rule,
                    'methods': list(rule.methods - {'HEAD', 'OPTIONS'}),
                    'endpoint': rule.endpoint
                })
    
    return jsonify({
        'status': 'OK',
        'message': 'AplicaÃƒÂ§ÃƒÂ£o funcionando perfeitamente!',
        'timestamp': datetime.now().isoformat(),
        'version': '2.0-fase2',
        'blueprints': list(current_app.blueprints.keys()),
        'routes': routes,
        'config': {
            'debug': current_app.config.get('DEBUG'),
            'cache_timeout': current_app.config.get('CACHE_TIMEOUT'),
            'users_count': len(current_app.config.get('USUARIOS_AUTORIZADOS', {}))
        }
    })
--- Fim do código: test.py ---

--- Início do código: test_auth.py ---
# app/blueprints/test_auth.py
from flask import Blueprint, jsonify, request, session
from app.services.auth_service import AuthService
from app.utils.auth_decorators import login_required_v2, api_auth_required, json_response # Importa json_response

test_auth_bp = Blueprint('test_auth', __name__, url_prefix='/test/auth')

@test_auth_bp.route('/debug-session')
@api_auth_required # Protege este endpoint que revela informaÃƒÂ§ÃƒÂµes de sessÃƒÂ£o e padroniza a saÃƒÂ­da JSON
def debug_session():
    """Debug completo da sessÃƒÂ£o"""
    # Retorna um dicionÃƒÂ¡rio, api_auth_required (via json_response) irÃƒÂ¡ jsonify
    return {
        'session_data': dict(session),
        'session_keys': list(session.keys()),
        'usuario_logado': session.get('usuario_logado'),
        'auth_v2': session.get('auth_v2'),
        'login_timestamp': session.get('login_timestamp'),
        'session_permanent': session.permanent,
        'is_authenticated': AuthService.is_authenticated(),
        'current_user': AuthService.get_current_user()
    }

@test_auth_bp.route('/public')
@json_response # Endpoint pÃƒÂºblico, mas que deve ter resposta JSON padronizada
def public_endpoint():
    """Endpoint pÃƒÂºblico (sem autenticaÃƒÂ§ÃƒÂ£o)"""
    # Retorna um dicionÃƒÂ¡rio, json_response irÃƒÂ¡ jsonify
    return {
        'status': 'OK',
        'message': 'Endpoint pÃƒÂºblico funcionando',
        'authenticated': AuthService.is_authenticated(),
        'user': AuthService.get_current_user() if AuthService.is_authenticated() else None,
        'session_info': {
            'has_usuario_logado': 'usuario_logado' in session,
            'has_auth_v2': 'auth_v2' in session,
            'session_keys': list(session.keys())
        }
    }

@test_auth_bp.route('/protected')
@login_required_v2 # Endpoint protegido de UI (embora retorne JSON, o propÃƒÂ³sito do teste ÃƒÂ© UI-like protection)
def protected_endpoint():
    """Endpoint protegido (com autenticaÃƒÂ§ÃƒÂ£o)"""
    return jsonify({ # JÃƒÂ¡ retorna jsonify, entÃƒÂ£o json_response nÃƒÂ£o ÃƒÂ© estritamente necessÃƒÂ¡rio aqui se login_required_v2 cuida apenas do auth.
        'status': 'OK',
        'message': 'Endpoint protegido acessado com sucesso!',
        'user': AuthService.get_current_user(),
        'session_info': {
            'login_timestamp': session.get('login_timestamp'),
            'permanent': session.permanent,
            'auth_v2': session.get('auth_v2')
        }
    })

@test_auth_bp.route('/api-protected')
@api_auth_required # JÃƒÂ¡ usa e estÃƒÂ¡ correto.
def api_protected_endpoint():
    """Endpoint de API protegido"""
    # Retorna um dicionÃƒÂ¡rio, api_auth_required (via json_response) irÃƒÂ¡ jsonify
    return {
        'success': True,
        'message': 'API protegida acessada com sucesso!',
        'user': AuthService.get_current_user(),
        'timestamp': session.get('login_timestamp')
    }

@test_auth_bp.route('/login-test', methods=['POST'])
@json_response # Endpoint de API para login, nÃƒÂ£o protegido por auth_required (pois ÃƒÂ© o login), mas precisa de JSON padronizado
def login_test():
    """Endpoint para testar login via API"""
    if not request.is_json:
        return {'success': False, 'message': 'JSON required'}, 400 # json_response irÃƒÂ¡ jsonify
    
    data = request.get_json()
    usuario = data.get('usuario')
    senha = data.get('senha')
    ip_cliente = request.environ.get('REMOTE_ADDR', 'test')
    
    print(f"Ã°Å¸â€â€˜ Tentativa de login: {usuario}")
    
    sucesso, mensagem = AuthService.authenticate(usuario, senha, ip_cliente)
    
    print(f"Ã°Å¸â€â€˜ Resultado do login: {sucesso}")
    
    # Retorna um dicionÃƒÂ¡rio, json_response irÃƒÂ¡ jsonify
    return {
        'success': sucesso,
        'message': mensagem,
        'user': AuthService.get_current_user() if sucesso else None,
        'session_after_login': {
            'usuario_logado': session.get('usuario_logado'),
            'auth_v2': session.get('auth_v2'),
            'session_keys': list(session.keys())
        }
    }

@test_auth_bp.route('/logout-test', methods=['POST'])
@json_response # Endpoint de API para logout, nÃƒÂ£o protegido por auth_required, mas precisa de JSON padronizado
def logout_test():
    """Endpoint para testar logout via API"""
    print(f"Ã°Å¸Å¡Âª Tentativa de logout")
    mensagem = AuthService.logout()
    
    # Retorna um dicionÃƒÂ¡rio, json_response irÃƒÂ¡ jsonify
    return {
        'success': True,
        'message': mensagem,
        'session_after_logout': {
            'session_keys': list(session.keys()),
            'is_authenticated': AuthService.is_authenticated()
        }
    }

@test_auth_bp.route('/session-info')
@api_auth_required # Este endpoint revela informaÃƒÂ§ÃƒÂµes de sessÃƒÂ£o, entÃƒÂ£o deve ser protegido.
def session_info():
    """InformaÃƒÂ§ÃƒÂµes da sessÃƒÂ£o atual"""
    # Retorna um dicionÃƒÂ¡rio, api_auth_required (via json_response) irÃƒÂ¡ jsonify
    return {
        'session_data': dict(session),
        'authenticated': AuthService.is_authenticated(),
        'user': AuthService.get_current_user(),
        'session_permanent': session.permanent
    }
--- Fim do código: test_auth.py ---

--- Início do código: test_services.py ---
# app/blueprints/test_services.py
"""
Blueprint para testar os novos serviÃƒÂ§os
"""
from flask import Blueprint, jsonify
from app.services.data_processor import DataProcessor
from app.services.auth_service import AuthService
from app.models.elevator import Elevator
from app.models.kpi import KPI
import pandas as pd

test_services_bp = Blueprint('test_services', __name__)

@test_services_bp.route('/models')
def test_models():
    """Testa os models"""
    try:
        # Testa Elevator
        elevator_data = {
            'cidade': 'Belo Horizonte',
            'unidade': 'FÃƒÂ³rum Central',
            'endereco': 'Rua Teste, 123',
            'endereco_completo': 'Rua Teste, 123 - Centro',
            'tipo': 'Passageiro',
            'quantidade': 3,
            'marca': 'Atlas',
            'marca_licitacao': 'Atlas Schindler',
            'paradas': 10,
            'regiao': 'Metropolitana',
            'status': 'Em atividade',
            'empresa': 'Empresa Teste',
            'latitude': -19.92,
            'longitude': -43.92,
            'n_elevador_parado': 1
        }
        
        elevator = Elevator(**elevator_data)
        
        return jsonify({
            'status': 'OK',
            'elevator_test': {
                'tem_parado': elevator.tem_elevador_parado,
                'esta_suspenso': elevator.esta_suspenso,
                'elevadores_ativos': elevator.elevadores_ativos,
                'cor_marcador': elevator.cor_marcador,
                'geojson': elevator.to_geojson_feature()
            }
        })
    except Exception as e:
        return jsonify({'status': 'ERROR', 'message': str(e)}), 500

@test_services_bp.route('/data-processor')
def test_data_processor():
    """Testa o DataProcessor"""
    try:
        # Cria dados de teste
        test_data = pd.DataFrame([
            {
                'cidade': 'Belo Horizonte',
                'unidade': 'FÃƒÂ³rum Central',
                'endereco': 'Rua Teste, 123',
                'enderecoCompleto': 'Rua Teste, 123 - Centro',
                'tipo': 'Passageiro',
                'quantidade': 3,
                'marca': 'Atlas',
                'marcaLicitacao': 'Atlas Schindler',
                'paradas': 10,
                'regiao': 'Metropolitana',
                'status': 'Em atividade',
                'empresa': 'Empresa Teste',
                'latitude': '-19.92',
                'longitude': '-43.92',
                'NElevadorParado': 1
            }
        ])
        
        processor = DataProcessor()
        result = processor.process_elevators_data(test_data)
        
        return jsonify({
            'status': 'OK',
            'processed_count': len(result['elevators']),
            'geojson_features': len(result['geojson_data']['features']),
            'compatibility_count': len(result['registros_processados'])
        })
    except Exception as e:
        return jsonify({'status': 'ERROR', 'message': str(e)}), 500

@test_services_bp.route('/auth-service')
def test_auth_service():
    """Testa o AuthService (sem fazer login real)"""
    try:
        # Testa apenas se o serviÃƒÂ§o estÃƒÂ¡ funcionando
        is_auth = AuthService.is_authenticated()
        current_user = AuthService.get_current_user()
        
        return jsonify({
            'status': 'OK',
            'is_authenticated': is_auth,
            'current_user': current_user,
            'service_loaded': True
        })
    except Exception as e:
        return jsonify({'status': 'ERROR', 'message': str(e)}), 500
--- Fim do código: test_services.py ---

--- Início do código: __init__.py ---
# app/api/blueprints.py
"""
Blueprints da aplicaÃƒÂ§ÃƒÂ£o
"""
# Importa todos os blueprints para garantir que sejam registrados
from .test import test_bp
from .test_services import test_services_bp

__all__ = ['test_bp', 'test_services_bp']
--- Fim do código: __init__.py ---

--- Início do código: base.py ---
# app/config/base.py
import os
from datetime import timedelta
from werkzeug.security import generate_password_hash

class BaseConfig:
    """ConfiguraÃƒÂ§ÃƒÂµes base compartilhadas entre ambientes"""
    
    # ConfiguraÃƒÂ§ÃƒÂµes Flask
    SECRET_KEY = os.environ.get('FLASK_SECRET_KEY')
    PERMANENT_SESSION_LIFETIME = timedelta(hours=1)
    
    # URLs das planilhas - USANDO VARIÃƒÂVEIS DE AMBIENTE
    PLANILHA_URL = os.environ.get('PLANILHA_URL')
    PLANILHA_KPIS_URL = os.environ.get('PLANILHA_KPIS_URL')
    
    # Cache
    CACHE_TIMEOUT = int(os.environ.get('CACHE_TIMEOUT', '300'))  # 5 minutos
    
    # SeguranÃƒÂ§a
    MAX_TENTATIVAS_LOGIN = int(os.environ.get('MAX_TENTATIVAS_LOGIN', '5'))
    BLOQUEIO_TEMPO = int(os.environ.get('BLOQUEIO_TEMPO', '900'))  # 15 minutos
    
    def __init__(self):
        """Inicializa configuraÃƒÂ§ÃƒÂµes que dependem de mÃƒÂ©todos"""
        self.USUARIOS_AUTORIZADOS = self._get_usuarios_autorizados()
        
        # Ã¢Å“â€¦ VALIDAÃƒâ€¡ÃƒÆ’O DAS URLs OBRIGATÃƒâ€œRIAS
        if not self.PLANILHA_URL:
            raise ValueError("Ã¢ÂÅ’ PLANILHA_URL deve ser definida como variÃƒÂ¡vel de ambiente")
        if not self.PLANILHA_KPIS_URL:
            raise ValueError("Ã¢ÂÅ’ PLANILHA_KPIS_URL deve ser definida como variÃƒÂ¡vel de ambiente")
    
    def _get_usuarios_autorizados(self):
        """Carrega usuÃƒÂ¡rios das variÃƒÂ¡veis de ambiente"""
        usuarios = {}
        
        # Formato: USUARIO_1=nome:senha, USUARIO_2=nome:senha, etc.
        for i in range(1, 11):  # Suporta atÃƒÂ© 10 usuÃƒÂ¡rios
            user_env = os.environ.get(f'USUARIO_{i}')
            if user_env and ':' in user_env:
                nome, senha = user_env.split(':', 1)
                usuarios[nome] = generate_password_hash(senha)
        
        # Fallback para desenvolvimento
        if not usuarios:
            usuarios = {
                'admin': generate_password_hash('admin123'),
                'usuario': generate_password_hash('senha123')
            }
            
        print(f"Ã°Å¸â€Â {len(usuarios)} usuÃƒÂ¡rio(s) carregado(s)")
        return usuarios
    
    @classmethod
    def listar_usuarios(cls):
        """Lista usuÃƒÂ¡rios cadastrados (para debug)"""
        instance = cls()
        usuarios = instance.USUARIOS_AUTORIZADOS
        for usuario in usuarios.keys():
            print(f"   - {usuario}")
--- Fim do código: base.py ---

--- Início do código: development.py ---
# app/config/development.py
from .base import BaseConfig

class DevelopmentConfig(BaseConfig):
    """ConfiguraÃ§Ãµes para ambiente de desenvolvimento"""
    
    DEBUG = True
    TESTING = False
    
    def __init__(self):
        super().__init__()
        # Cache mais curto em desenvolvimento
        self.CACHE_TIMEOUT = 60  # 1 minuto
        
        # Logs mais verbosos
        self.LOG_LEVEL = 'DEBUG'
    
    @classmethod
    def listar_usuarios(cls):
        """Sobrescreve para mostrar informaÃ§Ãµes de desenvolvimento"""
        print("ðŸ”§ AMBIENTE DE DESENVOLVIMENTO")
        instance = cls()
        usuarios = instance.USUARIOS_AUTORIZADOS
        for usuario in usuarios.keys():
            print(f"   - {usuario}")
        print("   ðŸ’¡ Senhas padrÃ£o: admin123, senha123")
--- Fim do código: development.py ---

--- Início do código: production.py ---
# app/config/production.py
from .base import BaseConfig

class ProductionConfig(BaseConfig):
    """ConfiguraÃ§Ãµes para ambiente de produÃ§Ã£o"""
    
    DEBUG = False
    TESTING = False
    
    def __init__(self):
        super().__init__()
        # Cache mais longo em produÃ§Ã£o
        self.CACHE_TIMEOUT = 600  # 10 minutos
        
        # Logs menos verbosos
        self.LOG_LEVEL = 'INFO'
        
        # SeguranÃ§a reforÃ§ada
        self.MAX_TENTATIVAS_LOGIN = 3
        self.BLOQUEIO_TEMPO = 1800  # 30 minutos
    
    @classmethod
    def listar_usuarios(cls):
        """Sobrescreve para nÃ£o mostrar informaÃ§Ãµes sensÃ­veis"""
        instance = cls()
        usuarios = instance.USUARIOS_AUTORIZADOS
        print("ðŸ”’ AMBIENTE DE PRODUÃ‡ÃƒO")
        print(f"   ðŸ‘¥ {len(usuarios)} usuÃ¡rio(s) carregado(s)")
--- Fim do código: production.py ---

--- Início do código: __init__.py ---
# app/config/__init__.py
import os

# âœ… CARREGA .env ANTES DE TUDO
try:
    from dotenv import load_dotenv
    load_dotenv()
    print("âœ… Arquivo .env carregado com sucesso")
except ImportError:
    print("âš ï¸ python-dotenv nÃ£o instalado, usando apenas variÃ¡veis do sistema")

from .base import BaseConfig
from .development import DevelopmentConfig
from .production import ProductionConfig

def get_config():
    """Retorna a configuraÃ§Ã£o baseada no ambiente"""
    env = os.environ.get('FLASK_ENV', 'development')
    
    if env == 'production':
        return ProductionConfig()
    else:
        return DevelopmentConfig()

# Para compatibilidade com o cÃ³digo atual
Config = get_config()
--- Fim do código: __init__.py ---

--- Início do código: elevator.py ---
#app/models/elevator.py
"""
Modelo para representar um elevador
"""
from dataclasses import dataclass, asdict
from typing import Optional, Dict, Any

@dataclass
class Elevator:
    """Modelo para representar um elevador"""
    cidade: str
    unidade: str
    endereco: str
    endereco_completo: str
    tipo: str
    quantidade: int
    marca: str
    marca_licitacao: str
    paradas: int
    regiao: str
    status: str
    empresa: str
    latitude: float
    longitude: float
    n_elevador_parado: int = 0
    data_de_parada: Optional[str] = None
    previsao_de_retorno: Optional[str] = None
    
    @property
    def tem_elevador_parado(self) -> bool:
        """Verifica se hÃƒÂ¡ elevadores parados"""
        return self.n_elevador_parado > 0
    
    @property
    def esta_suspenso(self) -> bool:
        """Verifica se estÃƒÂ¡ suspenso"""
        return 'suspenso' in self.status.lower()
    
    @property
    def elevadores_ativos(self) -> int:
        """Calcula elevadores ativos"""
        if self.esta_suspenso:
            return 0
        return max(0, self.quantidade - self.n_elevador_parado)
    
    @property
    def cor_marcador(self) -> str:
        """Define cor do marcador baseado no status"""
        if self.tem_elevador_parado:
            return '#dc3545'  # Vermelho para parados
        elif self.esta_suspenso:
            return '#ffc107'  # Amarelo para suspensos
        elif 'atividade' in self.status.lower():
            return '#28a745'  # Verde para ativos
        return '#6c757d'  # Cinza padrÃƒÂ£o
    
    @property
    def tamanho_marcador(self) -> int:
        """Define tamanho do marcador baseado na quantidade"""
        if self.quantidade >= 5:
            return 10
        elif self.quantidade >= 3:
            return 8
        return 6
    
    def to_dict(self) -> Dict[str, Any]:
        output_dict = asdict(self)
        
        keys_to_remove = [
            'quantidade',
            'endereco_completo',
            'marca_licitacao',
            'n_elevador_parado',
            'data_de_parada',
            'previsao_de_retorno',
            # REMOVA AQUI 'cor_marcador' e 'tamanho_marcador'
            'cor_marcador',      # <-- REMOVER
            'tamanho_marcador',  # <-- REMOVER
        ]
        for key in keys_to_remove:
            output_dict.pop(key, None)

        output_dict.update({
            'qtd_elev': self.quantidade,
            'enderecoCompleto': self.endereco_completo,
            'marcaLicitacao': self.marca_licitacao,
            'nElevadorParado': self.n_elevador_parado,
            'dataDeParada': self.data_de_parada,
            'previsaoDeRetorno': self.previsao_de_retorno,
            'temElevadorParado': self.tem_elevador_parado,
            # ADICIONE AQUI AS VERSÃ•ES EM CAMELCASE das propriedades
            'corMarcador': self.cor_marcador,      # <-- ADICIONAR
            'tamanhoMarcador': self.tamanho_marcador # <-- ADICIONAR
        })
        return output_dict
    
    def to_geojson_feature(self) -> Dict[str, Any]:
        """Converte para feature GeoJSON"""
        return {
            "type": "Feature",
            "geometry": {
                "type": "Point",
                "coordinates": [self.longitude, self.latitude]
            },
            "properties": self.to_dict()
        }
    
    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'Elevator':
        """Cria instÃƒÂ¢ncia a partir de dicionÃƒÂ¡rio"""
        # Mapeia campos com nomes diferentes
        field_mapping = {
            'qtd_elev': 'quantidade',
            'enderecoCompleto': 'endereco_completo',
            'marcaLicitacao': 'marca_licitacao',
            'nElevadorParado': 'n_elevador_parado',
            'dataDeParada': 'data_de_parada',
            'previsaoDeRetorno': 'previsao_de_retorno',
            'NElevadorParado': 'n_elevador_parado',
            'DataDeParada': 'data_de_parada',
            'PrevisaoDeRetorno': 'previsao_de_retorno'
        }
        
        # Normaliza os dados
        normalized_data = {}
        for key, value in data.items():
            new_key = field_mapping.get(key, key)
            normalized_data[new_key] = value
        
        # Remove campos que nÃƒÂ£o existem no modelo
        valid_fields = {f.name for f in cls.__dataclass_fields__.values()}
        filtered_data = {k: v for k, v in normalized_data.items() if k in valid_fields}
        
        return cls(**filtered_data)
--- Fim do código: elevator.py ---

--- Início do código: kpi.py ---
#app/models/kpi.py
"""
Modelo para representar um KPI de manutenÃƒÂ§ÃƒÂ£o
"""
from dataclasses import dataclass, asdict
from datetime import datetime
from typing import Optional, Dict, Any
import pandas as pd

@dataclass
class KPI:
    """Modelo para representar um KPI de manutenÃƒÂ§ÃƒÂ£o"""
    edificio: str
    categoria_problema: str
    status: str
    data_solicitacao: datetime
    data_conclusao: Optional[datetime] = None
    equipamento: Optional[str] = None
    
    @property
    def tempo_reparo_horas(self) -> Optional[float]:
        """Calcula tempo de reparo em horas"""
        if self.data_conclusao and self.data_solicitacao:
            return (self.data_conclusao - self.data_solicitacao).total_seconds() / 3600
        return None
    
    @property
    def esta_concluido(self) -> bool:
        """Verifica se estÃƒÂ¡ concluÃƒÂ­do"""
        return self.status.lower() == 'concluÃƒÂ­da'
    
    @property
    def mes_ano(self) -> str:
        """Retorna perÃƒÂ­odo mÃƒÂªs/ano"""
        return self.data_solicitacao.strftime('%Y-%m')
    
    def to_dict(self) -> Dict[str, Any]:
        """Converte para dicionÃƒÂ¡rio"""
        data = asdict(self)
        # Converte datas para string para JSON
        if self.data_solicitacao:
            data['data_solicitacao'] = self.data_solicitacao.isoformat()
        if self.data_conclusao:
            data['data_conclusao'] = self.data_conclusao.isoformat()
        return data
    
    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> 'KPI':
        """Cria instÃƒÂ¢ncia a partir de dicionÃƒÂ¡rio"""
        # Converte strings de data para datetime
        if isinstance(data.get('data_solicitacao'), str):
            try:
                data['data_solicitacao'] = pd.to_datetime(data['data_solicitacao'])
            except:
                data['data_solicitacao'] = datetime.now()
        
        if isinstance(data.get('data_conclusao'), str):
            try:
                data['data_conclusao'] = pd.to_datetime(data['data_conclusao'])
            except:
                data['data_conclusao'] = None
        
        # Remove campos que nÃƒÂ£o existem no modelo
        valid_fields = {f.name for f in cls.__dataclass_fields__.values()}
        filtered_data = {k: v for k, v in data.items() if k in valid_fields}
        
        return cls(**filtered_data)
--- Fim do código: kpi.py ---

--- Início do código: __init__.py ---
#app/models/__init__.py

"""
Models da aplicaÃ§Ã£o
"""
from .elevator import Elevator
from .kpi import KPI

__all__ = ['Elevator', 'KPI']
--- Fim do código: __init__.py ---

--- Início do código: auth_service.py ---
# app/services/auth_service.py
"""
ServiÃ§o de autenticaÃ§Ã£o - VERSÃƒÆ’O CORRIGIDA
"""
from datetime import datetime, timedelta
from flask import current_app, session
from werkzeug.security import check_password_hash
from typing import Tuple
import pytz

class AuthService:
    """ServiÃ§o de autenticaÃ§Ã£o"""
    
    @staticmethod
    def authenticate(usuario: str, senha: str, ip_cliente: str) -> Tuple[bool, str]:
        """
        Autentica usuÃƒÂ¡rio
        Returns: (sucesso, mensagem)
        """
        from app.utils.auth_helpers import (
            verificar_tentativas_login, 
            registrar_tentativa_login,
            limpar_tentativas_login
        )
        
        # Verifica tentativas
        pode_tentar, bloqueado_ate = verificar_tentativas_login(ip_cliente)
        if not pode_tentar:
            tempo_restante = int((bloqueado_ate - datetime.now()).seconds / 60)
            return False, f'Muitas tentativas. Tente em {tempo_restante} minutos.'
        
        # Valida credenciais
        usuarios_autorizados = current_app.config['USUARIOS_AUTORIZADOS']
        if usuario in usuarios_autorizados:
            if check_password_hash(usuarios_autorizados[usuario], senha):
                # Login bem-sucedido
                limpar_tentativas_login(ip_cliente)
                AuthService.create_session(usuario)
                return True, f'Bem-vindo, {usuario}!'
            else:
                registrar_tentativa_login(ip_cliente)
                return False, 'UsuÃƒÂ¡rio ou senha incorretos.'
        else:
            registrar_tentativa_login(ip_cliente)
            return False, 'UsuÃƒÂ¡rio ou senha incorretos.'
    
    @staticmethod
    def create_session(usuario: str):
        """Cria sessÃ£o do usuÃƒÂ¡rio"""
        session['usuario_logado'] = usuario
        session['auth_v2'] = True  # Ã¢Å“â€¦ NOVO: Flag especÃƒÂ­fica para v2
        brt = pytz.timezone("America/Sao_Paulo")
        session['login_timestamp'] = datetime.now(brt).isoformat()
        session.permanent = True
        print(f"Ã°Å¸â€â€˜ SessÃ£o criada para {usuario} - auth_v2: {session.get('auth_v2')}")
    
    @staticmethod
    def logout() -> str:
        """Faz logout do usuÃƒÂ¡rio"""
        usuario = session.get('usuario_logado', 'UsuÃƒÂ¡rio')
        print(f"Ã°Å¸Å¡Âª Logout do usuÃƒÂ¡rio: {usuario}")
        session.clear()
        return f'Logout realizado. AtÃƒÂ© logo, {usuario}!'
    
    @staticmethod
    def is_authenticated() -> bool:
        """
        Verifica se usuÃƒÂ¡rio estÃƒÂ¡ autenticado
        Ã¢Å“â€¦ CORRIGIDO: VerificaÃ§Ã£o mais robusta
        """
        # Verifica se tem usuÃƒÂ¡rio logado E flag auth_v2
        has_user = 'usuario_logado' in session and session.get('usuario_logado')
        has_auth_flag = session.get('auth_v2', False)
        
        is_auth = has_user and has_auth_flag
        
        print(f"Ã°Å¸â€Â Verificando autenticaÃ§Ã£o:")
        print(f"   - usuario_logado: {session.get('usuario_logado')}")
        print(f"   - auth_v2 flag: {session.get('auth_v2')}")
        print(f"   - is_authenticated: {is_auth}")
        
        return is_auth
    
    @staticmethod
    def get_current_user() -> str:
        """Retorna usuÃƒÂ¡rio atual"""
        if AuthService.is_authenticated():
            return session.get('usuario_logado', '')
        return ''
--- Fim do código: auth_service.py ---

--- Início do código: cache_service.py ---
# app/services/cache_service.py
import time
from datetime import datetime
from flask import current_app

class CacheService:
    def __init__(self, default_expiration=300):
        """Inicializa o serviÃ§o de cache com um tempo de expiraÃ§Ã£o padrÃ£o de 5 minutos."""
        self.cache = {}
        self.default_expiration = default_expiration

    def set(self, key, value, expiration=None):
        """Armazena um valor no cache com a chave especificada."""
        if expiration is None:
            expiration = self.default_expiration
            
        self.cache[key] = {
            'value': value,
            'timestamp': time.time(),
            'expiration': expiration
        }
        print(f"Ã°Å¸â€œÂ¦ Cache SET: {key} (expira em {expiration}s)")

    def get(self, key):
        """Recupera um valor do cache se ainda for vÃƒÂ¡lido."""
        if key in self.cache:
            entry = self.cache[key]
            age = time.time() - entry['timestamp']
            
            if age < entry['expiration']:
                print(f"Ã°Å¸â€œÂ¦ Cache HIT: {key} (idade: {age:.1f}s)")
                return entry['value']
            else:
                # Expirado
                print(f"Ã°Å¸â€œÂ¦ Cache EXPIRED: {key} (idade: {age:.1f}s)")
                del self.cache[key]
        
        print(f"Ã¯Â¿Â½Ã¯Â¿Â½ Cache MISS: {key}")
        return None

    def delete(self, key):
        """Remove uma chave especÃƒÂ­fica do cache."""
        if key in self.cache:
            del self.cache[key]
            print(f"Ã°Å¸â€œÂ¦ Cache DELETE: {key}")

    def clear(self):
        """Limpa todo o cache."""
        keys_count = len(self.cache)
        self.cache.clear()
        print(f"Ã¯Â¿Â½Ã¯Â¿Â½ Cache CLEAR: {keys_count} chaves removidas")

    def get_stats(self):
        """Retorna estatÃƒÂ­sticas do cache."""
        now = time.time()
        active_keys = []
        expired_keys = []
        
        for key, entry in self.cache.items():
            age = now - entry['timestamp']
            if age < entry['expiration']:
                active_keys.append({
                    'key': key,
                    'age': age,
                    'expires_in': entry['expiration'] - age
                })
            else:
                expired_keys.append(key)
        
        # Remove chaves expiradas
        for key in expired_keys:
            del self.cache[key]
        
        return {
            'active_keys': len(active_keys),
            'expired_keys_removed': len(expired_keys),
            'keys_detail': active_keys
        }

    def is_expired(self, key):
        """Verifica se uma chave especÃƒÂ­fica estÃƒÂ¡ expirada."""
        if key not in self.cache:
            return True
        
        entry = self.cache[key]
        age = time.time() - entry['timestamp']
        return age >= entry['expiration']
--- Fim do código: cache_service.py ---

--- Início do código: data_processor.py ---
# app/services/data_processor.py
"""
Processador de dados refatorado com models
"""
import pandas as pd
from datetime import datetime, timedelta
from typing import List, Dict, Any, Tuple
from app.utils.helpers import safe_int, safe_str, safe_float, validate_coordinates
from app.models.elevator import Elevator
from app.models.kpi import KPI

class DataProcessor:
    def __init__(self, data=None):
        """Inicializa o processador com os dados brutos."""
        self.raw_data = data
        self.processed_data = None

    def process_elevators_data(self, data: pd.DataFrame) -> Dict[str, Any]:
        """
        Processa dados de elevadores para o mapa
        MANTÃƒâ€°M COMPATIBILIDADE com cÃƒÂ³digo atual
        """
        elevators = []
        registros_processados = []
        
        print(f"Ã°Å¸â€”ÂºÃ¯Â¸Â Processando {len(data)} registros para o mapa...")
        
        for idx, row in data.iterrows():
            try:
                # Valida coordenadas
                lat_str = safe_str(row.get('latitude', '')).strip()
                lon_str = safe_str(row.get('longitude', '')).strip()
                
                if not lat_str or not lon_str or lat_str == 'nan' or lon_str == 'nan':
                    continue
                
                is_valid, lat, lon = validate_coordinates(lat_str, lon_str)
                if not is_valid:
                    continue
                
                # Cria modelo Elevator
                elevator_data = {
                    'cidade': safe_str(row.get('cidade')),
                    'unidade': safe_str(row.get('unidade')),
                    'endereco': safe_str(row.get('endereco')),
                    'endereco_completo': safe_str(row.get('enderecoCompleto')),
                    'tipo': safe_str(row.get('tipo')),
                    'quantidade': safe_int(row.get('quantidade')),
                    'marca': safe_str(row.get('marca')),
                    'marca_licitacao': safe_str(row.get('marcaLicitacao', row.get('marca', ''))),
                    'paradas': safe_int(row.get('paradas')),
                    'regiao': safe_str(row.get('regiao')),
                    'status': safe_str(row.get('status')),
                    'empresa': safe_str(row.get('empresa', 'N/A')),
                    'latitude': lat,
                    'longitude': lon,
                    'n_elevador_parado': safe_int(row.get('NElevadorParado', 0)),
                    'data_de_parada': safe_str(row.get('DataDeParada')),
                    'previsao_de_retorno': safe_str(row.get('PrevisaoDeRetorno'))
                }
                
                elevator = Elevator(**elevator_data)
                elevators.append(elevator)
                
                # MANTÃƒâ€°M COMPATIBILIDADE: converte de volta para dict
                registro_processado = elevator.to_dict()
                registros_processados.append(registro_processado)
                
            except Exception as e:
                print(f"Ã¢ÂÅ’ Erro ao processar registro {idx}: {e}")
                continue
        
        print(f"Ã¢Å“â€¦ {len(elevators)} elevators processados")
        
        if elevators:
            # Cria GeoJSON usando os models
            features = [elevator.to_geojson_feature() for elevator in elevators]
            geojson_data = {
                "type": "FeatureCollection",
                "features": features
            }
            
            # Extrai listas ÃƒÂºnicas
            tipos_unicos = sorted(list(set([e.tipo for e in elevators])))
            regioes_unicas = sorted(list(set([e.regiao for e in elevators])))
            marcas_unicas = sorted(list(set([e.marca_licitacao for e in elevators])))
            empresas_unicas = sorted(list(set([e.empresa for e in elevators if e.empresa != 'N/A'])))
            predios_unicos = sorted(list(set([e.endereco_completo for e in elevators])))
            
            return {
                'geojson_data': geojson_data,
                'registros_processados': registros_processados,  # COMPATIBILIDADE
                'elevators': elevators,  # NOVO: lista de models
                'tipos_unicos': tipos_unicos,
                'regioes_unicas': regioes_unicas,
                'marcas_unicas': marcas_unicas,
                'empresas_unicas': empresas_unicas,
                'predios_unicos': predios_unicos
            }
        
        return {
            'geojson_data': {"type": "FeatureCollection", "features": []},
            'registros_processados': [],
            'elevators': [],
            'tipos_unicos': [],
            'regioes_unicas': [],
            'marcas_unicas': [],
            'empresas_unicas': [],
            'predios_unicos': []
        }

    def process_kpis_data(self, data: pd.DataFrame) -> Dict[str, Any]:
        """
        Processa dados de KPIs e calcula mÃƒÂ©tricas
        NOVA IMPLEMENTAÃƒâ€¡ÃƒÆ’O com models
        """
        if data.empty:
            return {}
        
        print(f"Ã°Å¸â€œÅ  Processando {len(data)} registros de KPIs...")
        
        kpis = []
        
        for idx, row in data.iterrows():
            try:
                # Converte datas
                data_solicitacao = None
                data_conclusao = None
                
                try:
                    data_solicitacao = pd.to_datetime(
                        row['data_solicitacao'], 
                        format='%d/%m/%Y %H:%M:%S', 
                        errors='coerce'
                    )
                except:
                    data_solicitacao = pd.to_datetime(row['data_solicitacao'], errors='coerce')
                
                try:
                    data_conclusao = pd.to_datetime(
                        row['data_conclusao'], 
                        format='%d/%m/%Y %H:%M:%S', 
                        errors='coerce'
                    )
                except:
                    data_conclusao = pd.to_datetime(row['data_conclusao'], errors='coerce')
                
                if pd.isna(data_solicitacao):
                    continue
                
                kpi_data = {
                    'edificio': safe_str(row.get('edificio')),
                    'categoria_problema': safe_str(row.get('categoria_problema')),
                    'status': safe_str(row.get('status')),
                    'data_solicitacao': data_solicitacao,
                    'data_conclusao': data_conclusao if not pd.isna(data_conclusao) else None,
                    'equipamento': safe_str(row.get('equipamento'))
                }
                
                kpi = KPI(**kpi_data)
                kpis.append(kpi)
                
            except Exception as e:
                print(f"Ã¢ÂÅ’ Erro ao processar KPI {idx}: {e}")
                continue
        
        # Calcula mÃƒÂ©tricas usando os models
        return kpis
    
    def _calculate_kpi_metrics(self, kpis: List[KPI]) -> Dict[str, Any]:
        """Calcula mÃƒÂ©tricas dos KPIs usando models"""
        if not kpis:
            return {}
        
        concluidos = [kpi for kpi in kpis if kpi.esta_concluido]
        
        # MÃƒÂ©tricas principais
        metricas = {
            'total_chamados': len(kpis),
            'chamados_concluidos': len(concluidos),
            'chamados_pendentes': len(kpis) - len(concluidos),
            'tempo_mediano_reparo': 0,
            'disponibilidade': (len(concluidos) / len(kpis) * 100) if kpis else 0,
        }
        
        # Tempo mediano de reparo
        tempos_reparo = [kpi.tempo_reparo_horas for kpi in concluidos if kpi.tempo_reparo_horas is not None]
        if tempos_reparo:
            import statistics
            metricas['tempo_mediano_reparo'] = statistics.median(tempos_reparo)
        
        # Chamados por mÃƒÂªs
        chamados_por_mes = {}
        for kpi in kpis:
            mes = kpi.mes_ano
            chamados_por_mes[mes] = chamados_por_mes.get(mes, 0) + 1
        metricas['chamados_por_mes'] = chamados_por_mes
        
        # Chamados por edifÃƒÂ­cio
        chamados_por_edificio = {}
        for kpi in kpis:
            edificio = kpi.edificio
            chamados_por_edificio[edificio] = chamados_por_edificio.get(edificio, 0) + 1
        
        # Ordena e pega top 15
        chamados_por_edificio = dict(
            sorted(chamados_por_edificio.items(), key=lambda x: x[1], reverse=True)[:15]
        )
        metricas['chamados_por_edificio'] = chamados_por_edificio
        
        # Categorias de problema
        categorias_problema = {}
        for kpi in kpis:
            categoria = kpi.categoria_problema
            categorias_problema[categoria] = categorias_problema.get(categoria, 0) + 1
        metricas['categorias_problema'] = categorias_problema
        
        # Tempo por categoria
        tempo_por_categoria = {}
        for categoria in categorias_problema.keys():
            tempos_categoria = [
                kpi.tempo_reparo_horas for kpi in concluidos 
                if kpi.categoria_problema == categoria and kpi.tempo_reparo_horas is not None
            ]
            if tempos_categoria:
                import statistics
                tempo_por_categoria[categoria] = statistics.median(tempos_categoria)
        
        # Ordena por tempo decrescente
        tempo_por_categoria = dict(
            sorted(tempo_por_categoria.items(), key=lambda x: x[1], reverse=True)
        )
        metricas['tempo_por_categoria'] = tempo_por_categoria
        
        # Chamados por equipamento
        chamados_por_equipamento = {}
        for kpi in kpis:
            if kpi.equipamento:
                equipamento = str(kpi.equipamento)
                chamados_por_equipamento[equipamento] = chamados_por_equipamento.get(equipamento, 0) + 1
        
        # Ordena e pega top 20
        chamados_por_equipamento = dict(
            sorted(chamados_por_equipamento.items(), key=lambda x: x[1], reverse=True)[:20]
        )
        metricas['chamados_por_equipamento'] = chamados_por_equipamento
        
        # Tempo por equipamento
        tempo_por_equipamento = {}
        for equipamento in chamados_por_equipamento.keys():
            tempos_equipamento = [
                kpi.tempo_reparo_horas for kpi in concluidos 
                if str(kpi.equipamento) == equipamento and kpi.tempo_reparo_horas is not None
            ]
            if tempos_equipamento:
                import statistics
                tempo_por_equipamento[equipamento] = statistics.median(tempos_equipamento)
        
        # Ordena por tempo decrescente
        tempo_por_equipamento = dict(
            sorted(tempo_por_equipamento.items(), key=lambda x: x[1], reverse=True)[:20]
        )
        metricas['tempo_por_equipamento'] = tempo_por_equipamento
        
        print(f"Ã¢Å“â€¦ MÃƒÂ©tricas processadas: {len(metricas)} categorias")
        return metricas

    def apply_filters(self, elevators: List[Elevator], tipos=None, regioes=None, 
                    marcas=None, empresas=None, situacoes=None) -> List[Elevator]:
        """
        Aplica filtros aos elevadores
        CORRIGIDO: LÃƒÂ³gica baseada na anÃƒÂ¡lise da planilha real
        """
        filtered = elevators.copy()
        
        if tipos:
            filtered = [e for e in filtered if e.tipo in tipos]
        
        if regioes:
            filtered = [e for e in filtered if e.regiao in regioes]
        
        if marcas:
            filtered = [e for e in filtered if e.marca_licitacao in marcas]
        
        if empresas:
            filtered = [e for e in filtered if e.empresa in empresas]
        
        if situacoes:
            situacao_filtered = []
            for situacao in situacoes:
                if situacao == 'suspensos':
                    # PrÃƒÂ©dios com status "Suspenso"
                    situacao_filtered.extend([e for e in filtered if e.status == 'Suspenso'])
                elif situacao == 'parados':
                    # Ã¢Å“â€¦ CORRIGIDO: PrÃƒÂ©dios que tÃƒÂªm elevadores parados (NElevadorParado > 0)
                    situacao_filtered.extend([e for e in filtered if e.tem_elevador_parado])
                elif situacao == 'ativos':
                    # Ã¢Å“â€¦ CORRIGIDO: PrÃƒÂ©dios com status "Em atividade" E sem elevadores parados
                    situacao_filtered.extend([e for e in filtered if e.status == 'Em atividade' and not e.tem_elevador_parado])
            
            # Remove duplicatas mantendo ordem
            seen = set()
            filtered = []
            for e in situacao_filtered:
                if e.endereco_completo not in seen:
                    seen.add(e.endereco_completo)
                    filtered.append(e)
        
        print(f"Ã°Å¸â€Â Filtros aplicados: {len(elevators)} -> {len(filtered)} elevadores")
        if situacoes:
            print(f"   SituaÃ§ÃƒÂµes filtradas: {situacoes}")
            for situacao in situacoes:
                count = sum(1 for e in filtered if (
                    (situacao == 'suspensos' and e.status == 'Suspenso') or
                    (situacao == 'parados' and e.tem_elevador_parado) or
                    (situacao == 'ativos' and e.status == 'Em atividade' and not e.tem_elevador_parado)
                ))
                print(f"   {situacao}: {count} elevadores")
        
        return filtered

    def apply_kpi_filters(self, kpis: List['KPI'], data_inicio: datetime = None, data_fim: datetime = None, 
                          status: str = None, categoria: str = None, edificio: str = None, 
                          equipamento: str = None) -> List['KPI']:
        """
        Aplica filtros a uma lista de objetos KPI.
        """
        filtered_kpis = kpis
        
        if data_inicio:
            filtered_kpis = [k for k in filtered_kpis if k.data_solicitacao >= data_inicio]
        
        if data_fim:
            filtered_kpis = [k for k in filtered_kpis if k.data_solicitacao <= data_fim]
        
        if status:
            filtered_kpis = [k for k in filtered_kpis if k.status.lower() == status.lower()]
            
        if categoria:
            filtered_kpis = [k for k in filtered_kpis if k.categoria_problema.lower() == categoria.lower()]
            
        if edificio:
            filtered_kpis = [k for k in filtered_kpis if k.edificio.lower() == edificio.lower()]

        if equipamento:
            # Garante que 'equipamento' seja string para comparaÃ§Ã£o, caso o model retorne outro tipo
            filtered_kpis = [k for k in filtered_kpis if str(k.equipamento).lower() == equipamento.lower()]
        
        print(f"Ã°Å¸â€Â KPIs: Filtros aplicados resultaram em {len(filtered_kpis)} KPIs.")
        return filtered_kpis

    def calculate_stats(self, elevators: List[Elevator]) -> Dict[str, Any]:
        """
        Calcula estatÃƒÂ­sticas dos elevadores
        CORRIGIDO: Quando filtrado por "parados", conta apenas os parados
        """
        if not elevators:
            return {
                'total_elevadores': 0,
                'total_predios': 0,
                'cidades': 0,
                'regioes': 0,
                'em_atividade': 0,
                'elevadores_suspensos': 0,
                'elevadores_parados': 0
            }
        
        # Ã¢Å“â€¦ VERIFICAR SE Ãƒâ€° UM FILTRO ESPECÃƒÂFICO
        # Se todos os elevators tÃƒÂªm parados, ÃƒÂ© filtro "parados"
        filtro_parados = all(e.tem_elevador_parado for e in elevators)
        filtro_suspensos = all(e.status == 'Suspenso' for e in elevators)
        filtro_ativos = all(e.status == 'Em atividade' and not e.tem_elevador_parado for e in elevators)
        
        total_elevadores = 0
        elevadores_suspensos = 0
        elevadores_parados = 0
        elevadores_ativos = 0
        
        if filtro_parados:
            # Ã¢Å“â€¦ FILTRO "PARADOS": Conta APENAS os parados
            for elevator in elevators:
                elevadores_parados += elevator.n_elevador_parado
            total_elevadores = elevadores_parados
            
        elif filtro_suspensos:
            # Ã¢Å“â€¦ FILTRO "SUSPENSOS": Conta APENAS os suspensos
            for elevator in elevators:
                elevadores_suspensos += elevator.quantidade
            total_elevadores = elevadores_suspensos
            
        elif filtro_ativos:
            # Ã¢Å“â€¦ FILTRO "ATIVOS": Conta APENAS os ativos
            for elevator in elevators:
                elevadores_ativos += elevator.quantidade
            total_elevadores = elevadores_ativos
            
        else:
            # Ã¢Å“â€¦ SEM FILTRO ou FILTRO MISTO: LÃƒÂ³gica completa
            for elevator in elevators:
                total_elevadores += elevator.quantidade
                
                if elevator.status == 'Suspenso':
                    elevadores_suspensos += elevator.quantidade
                elif elevator.tem_elevador_parado:
                    elevadores_parados += elevator.n_elevador_parado
                    elevadores_ativos += (elevator.quantidade - elevator.n_elevador_parado)
                else:
                    elevadores_ativos += elevator.quantidade
        
        stats = {
            'total_elevadores': total_elevadores,
            'total_predios': len(set(e.endereco_completo for e in elevators)),
            'cidades': len(set(e.cidade for e in elevators)),
            'regioes': len(set(e.regiao for e in elevators)),
            'em_atividade': elevadores_ativos,
            'elevadores_suspensos': elevadores_suspensos,
            'elevadores_parados': elevadores_parados
        }
        
        print(f"Ã°Å¸â€œÅ  Stats calculados: Total={total_elevadores}, Ativos={elevadores_ativos}, Suspensos={elevadores_suspensos}, Parados={elevadores_parados}")
        
        return stats
--- Fim do código: data_processor.py ---

--- Início do código: sheets_service.py ---
# app/services/sheets_service.py
from sheets_api import SheetsAPI

class SheetsService:
    """ServiÃ§o para interaÃ§Ã£o com Google Sheets usando a API existente"""
    
    def __init__(self):
        self.sheets_api = SheetsAPI()
    
    def obter_dados_elevadores(self, planilha_url):
        """ObtÃƒÂ©m dados de elevadores da planilha"""
        print(f"Ã°Å¸â€â€” Tentando acessar: {planilha_url}")
        return self.sheets_api.obter_dados_elevadores(planilha_url)
    
    def obter_dados_kpis(self, planilha_url):
        """ObtÃƒÂ©m dados de KPIs da planilha"""
        print(f"Ã°Å¸â€â€” Tentando acessar KPIs: {planilha_url}")
        return self.sheets_api.obter_dados_kpis(planilha_url)
    
    def get_sheet_data(self, url, range_name='A1:Z1000'):
        """MÃƒÂ©todo genÃƒÂ©rico para obter dados de planilha"""
        # Usa o mÃƒÂ©todo apropriado baseado no contexto
        return self.sheets_api.obter_dados_elevadores(url)
    
    def update_sheet_data(self, url, range_name, values):
        """Atualiza dados na planilha (funcionalidade futura)"""
        print(f"Ã¢Å¡Â Ã¯Â¸Â Funcionalidade de atualizaÃ§Ã£o nÃ£o implementada ainda")
        return None
--- Fim do código: sheets_service.py ---

--- Início do código: stats_service.py ---
# app/services/stats_service.py
from typing import List, Dict, Any
from app.models.elevator import Elevator
from collections import defaultdict

class StatsService:
    """ServiÃ§o para cÃƒÂ¡lculo de estatÃƒÂ­sticas"""
    
    @staticmethod
    def calculate_elevator_stats(elevators: List[Elevator]) -> Dict[str, Any]:
        """Calcula estatÃƒÂ­sticas dos elevadores"""
        total_elevadores = sum(e.quantidade for e in elevators)
        elevadores_suspensos = sum(e.quantidade for e in elevators if e.esta_suspenso)
        elevadores_parados = sum(e.n_elevador_parado for e in elevators)
        elevadores_ativos = total_elevadores - elevadores_suspensos - elevadores_parados
        
        return {
            'total_elevadores': total_elevadores,
            'total_predios': len(set(e.endereco_completo for e in elevators)),
            'cidades': len(set(e.cidade for e in elevators)),
            'regioes': len(set(e.regiao for e in elevators)),
            'em_atividade': elevadores_ativos,
            'suspensos': elevadores_suspensos,
            'elevadores_parados': elevadores_parados
        }
    
    @staticmethod
    def group_by_category(elevators: List[Elevator]) -> Dict[str, Dict[str, int]]:
        """Agrupa elevadores por categoria"""
        stats = {
            'por_tipo': defaultdict(int),
            'por_regiao': defaultdict(int),
            'por_marca': defaultdict(int),
            'por_status': defaultdict(int)
        }
        
        for elevator in elevators:
            stats['por_tipo'][elevator.tipo] += elevator.quantidade
            stats['por_regiao'][elevator.regiao] += elevator.quantidade
            stats['por_marca'][elevator.marca_licitacao] += elevator.quantidade
            
            if elevator.esta_suspenso:
                stats['por_status']['Suspenso'] += elevator.quantidade
            else:
                stats['por_status']['Em atividade'] += elevator.elevadores_ativos
                if elevator.tem_elevador_parado:
                    stats['por_status']['Parados'] += elevator.n_elevador_parado
        
        return {k: dict(v) for k, v in stats.items()}
--- Fim do código: stats_service.py ---

--- Início do código: __init__.py ---
# app/services/__init__.py
"""MÃ³dulo de serviÃ§os de negÃ³cio"""

from .sheets_service import SheetsService
from .cache_service import CacheService
from .data_processor import DataProcessor

__all__ = [
    'SheetsService',
    'CacheService', 
    'DataProcessor'
]
--- Fim do código: __init__.py ---

--- Início do código: auth_decorators.py ---
# app/utils/auth_decorators.py
from functools import wraps
from flask import session, flash, redirect, url_for, request, jsonify
from app.services.auth_service import AuthService
import traceback # Importa para logging de erros detalhado

# NOVO: Decorador para padronizar respostas JSON e tratamento de erros para qualquer API
def json_response(f):
    """Decorator para padronizar respostas de API e tratamento de erros."""
    @wraps(f)
    def decorated_function(*args, **kwargs):
        try:
            result = f(*args, **kwargs)
            if isinstance(result, dict):
                return jsonify(result)
            # Se a funÃ§Ã£o jÃƒÂ¡ retornar um objeto Response (como jsonify), apenas o retorna.
            return result
        except Exception as e:
            # Loga o traceback completo para depuraÃ§Ã£o
            print(f"Ã¢ÂÅ’ Erro na API em {f.__name__}: {e}")
            traceback.print_exc()
            return jsonify({
                'success': False,
                'error': str(e),
                'message': 'Ocorreu um erro interno na API.' # Mensagem amigÃƒÂ¡vel para o usuÃƒÂ¡rio
            }), 500
    return decorated_function

# Modificado: api_auth_required agora inclui a funcionalidade de json_response
def api_auth_required(f):
    """
    Decorator especÃƒÂ­fico para APIs que requer autenticaÃ§Ã£o e padroniza a resposta JSON.
    """
    @wraps(f)
    def decorated_function(*args, **kwargs):
        print(f"Ã°Å¸â€â€™ API Auth check para {request.endpoint}")
        
        is_authenticated = AuthService.is_authenticated()
        print(f"Ã°Å¸â€Â API Auth resultado: {is_authenticated}")
        
        if not is_authenticated:
            # Retorna uma resposta JSON padronizada para falha de autenticaÃ§Ã£o
            return jsonify({
                'success': False,
                'error': 'Authentication required',
                'message': 'AutenticaÃ§Ã£o necessÃƒÂ¡ria para acessar este recurso.',
                'code': 'AUTH_REQUIRED',
                'login_url': url_for('auth.login'), # URL de login da v2
                'debug_info': {
                    'session_keys': list(session.keys()),
                    'usuario_logado': session.get('usuario_logado'),
                    'auth_v2': session.get('auth_v2')
                }
            }), 401
        
        # Se autenticado, aplica a lÃƒÂ³gica de json_response ao resultado da funÃ§Ã£o
        # Isso garante a padronizaÃ§Ã£o JSON e tratamento de erros para respostas bem-sucedidas.
        return json_response(f)(*args, **kwargs)
    return decorated_function

# Os decoradores login_required_v2 e admin_required_v2 (se existir) permanecem inalterados,
# pois sÃ£o projetados principalmente para rotas de UI que retornam HTML ou redirecionam.

# Mantenha os decoradores existentes abaixo, que sÃ£o para UI:
def login_required_v2(f):
    """
    Decorator para autenticaÃ§Ã£o da nova arquitetura - VERSÃƒÆ’O FINAL
    """
    @wraps(f)
    def decorated_function(*args, **kwargs):
        print(f"Ã¯Â¿Â½Ã¯Â¿Â½ Verificando autenticaÃ§Ã£o para {request.endpoint}")
        print(f"Ã°Å¸â€Â Request path: {request.path}")
        print(f"Ã°Å¸â€Â Request headers: {dict(request.headers)}")
        print(f"Ã¯Â¿Â½Ã¯Â¿Â½ Is JSON: {request.is_json}")
        print(f"Ã¯Â¿Â½Ã¯Â¿Â½ Content-Type: {request.content_type}")
        print(f"Ã°Å¸â€Â Accept: {request.headers.get('Accept', '')}")
        
        is_authenticated = AuthService.is_authenticated()
        print(f"Ã°Å¸â€Â Resultado da verificaÃ§Ã£o: {is_authenticated}")
        
        if not is_authenticated:
            print(f"Ã¢ÂÅ’ UsuÃƒÂ¡rio nÃ£o autenticado, bloqueando acesso")
            
            is_api_request = (
                request.is_json or 
                request.path.startswith('/api/') or
                request.path.startswith('/test/auth/') or  # Nossos endpoints de teste
                'application/json' in request.headers.get('Accept', '') or
                'application/json' in request.headers.get('Content-Type', '')
            )
            
            print(f"Ã°Å¸â€Â Ãƒâ€° requisiÃ§Ã£o de API: {is_api_request}")
            
            if is_api_request:
                return jsonify({
                    'success': False,
                    'message': 'AutenticaÃ§Ã£o necessÃƒÂ¡ria',
                    'login_url': url_for('auth.login'),
                    'debug_info': {
                        'session_keys': list(session.keys()),
                        'usuario_logado': session.get('usuario_logado'),
                        'auth_v2': session.get('auth_v2')
                    }
                }), 401
            else:
                flash('VocÃƒÂª precisa fazer login para acessar esta pÃƒÂ¡gina.', 'warning')
                return redirect(url_for('auth.login', next=request.url))
        
        print(f"Ã¢Å“â€¦ UsuÃƒÂ¡rio autenticado, permitindo acesso")
        return f(*args, **kwargs)
    return decorated_function

def admin_required_v2(f):
    """
    Decorator para verificar se ÃƒÂ© admin (futuro)
    """
    @wraps(f)
    def decorated_function(*args, **kwargs):
        if not AuthService.is_authenticated():
            if request.is_json or 'application/json' in request.headers.get('Accept', ''):
                return jsonify({'success': False, 'message': 'AutenticaÃ§Ã£o necessÃƒÂ¡ria'}), 401
            else:
                flash('Acesso negado.', 'danger')
                return redirect(url_for('auth.login'))
        
        # TODO: Implementar lÃƒÂ³gica de verificaÃ§Ã£o de admin
        # Por enquanto, apenas garante que esteja autenticado
        
        return f(*args, **kwargs)
    return decorated_function
--- Fim do código: auth_decorators.py ---

--- Início do código: auth_helpers.py ---
# app/utils/auth_helpers.py
from datetime import datetime, timedelta
from flask import current_app

# Cache para controle de tentativas de login
tentativas_login = {}

def verificar_tentativas_login(ip):
    """Verifica se o IP nÃ£o excedeu o limite de tentativas"""
    agora = datetime.now()
    
    if ip in tentativas_login:
        tentativas = tentativas_login[ip]
        
        # Remove tentativas antigas (mais de BLOQUEIO_TEMPO segundos)
        tentativas['historico'] = [
            t for t in tentativas['historico'] 
            if (agora - t).seconds < current_app.config['BLOQUEIO_TEMPO']
        ]
        
        # Verifica se excedeu o limite
        if len(tentativas['historico']) >= current_app.config['MAX_TENTATIVAS_LOGIN']:
            return False, tentativas['historico'][0] + timedelta(seconds=current_app.config['BLOQUEIO_TEMPO'])
    
    return True, None

def registrar_tentativa_login(ip):
    """Registra uma tentativa de login falhada"""
    agora = datetime.now()
    
    if ip not in tentativas_login:
        tentativas_login[ip] = {'historico': []}
    
    tentativas_login[ip]['historico'].append(agora)

def limpar_tentativas_login(ip):
    """Limpa tentativas de login para um IP especÃƒÂ­fico"""
    if ip in tentativas_login:
        del tentativas_login[ip]

def get_tempo_restante_bloqueio(ip):
    """Retorna tempo restante de bloqueio em minutos"""
    if ip not in tentativas_login:
        return 0
    
    agora = datetime.now()
    tentativas = tentativas_login[ip]
    
    if tentativas['historico']:
        ultimo_bloqueio = tentativas['historico'][0] + timedelta(seconds=current_app.config['BLOQUEIO_TEMPO'])
        if ultimo_bloqueio > agora:
            return int((ultimo_bloqueio - agora).seconds / 60)
    
    return 0
--- Fim do código: auth_helpers.py ---

--- Início do código: helpers.py ---
# app/utils/helpers.py
from datetime import datetime, timedelta
from flask import current_app
import pandas as pd

def format_datetime(value, format='%Y-%m-%d %H:%M:%S'):
    """Formata um objeto datetime para uma string"""
    if not value:
        return ''
    return value.strftime(format)

def is_valid_email(email):
    """Valida se o email fornecido tem um formato vÃƒÂ¡lido"""
    import re
    pattern = r'^[\w\.-]+@[\w\.-]+\.\w+'
    return re.match(pattern, email) is not None

def safe_int(value, default=0):
    """Converte valor para int de forma segura"""
    try:
        return int(value) if pd.notna(value) else default
    except (ValueError, TypeError):
        return default

def safe_float(value, default=0.0):
    """Converte valor para float de forma segura"""
    try:
        return float(value) if pd.notna(value) else default
    except (ValueError, TypeError):
        return default

def safe_str(value, default=''):
    """Converte valor para string de forma segura"""
    try:
        return str(value) if pd.notna(value) else default
    except (ValueError, TypeError):
        return default

def validate_coordinates(lat, lon):
    """Valida se as coordenadas sÃ£o vÃƒÂ¡lidas"""
    try:
        lat_float = float(lat)
        lon_float = float(lon)
        
        # Valida range geral
        if not (-90 <= lat_float <= 90 and -180 <= lon_float <= 180):
            return False, None, None
        
        # Valida range do Brasil
        if not (-35 <= lat_float <= 5 and -75 <= lon_float <= -30):
            return False, None, None
            
        return True, lat_float, lon_float
    except (ValueError, TypeError):
        return False, None, None

def calculate_time_difference(start_date, end_date, unit='hours'):
    """Calcula diferenÃ§a entre duas datas"""
    if not start_date or not end_date:
        return None
    
    try:
        diff = end_date - start_date
        
        if unit == 'hours':
            return diff.total_seconds() / 3600
        elif unit == 'days':
            return diff.days
        elif unit == 'minutes':
            return diff.total_seconds() / 60
        else:
            return diff.total_seconds()
    except:
        return None
--- Fim do código: helpers.py ---

--- Início do código: __init__.py ---
# app/utils/__init__.py
"""MÃƒÂ³dulo de utilitÃƒÂ¡rios e helpers"""

# AGORA IMPORTAMOS OS NOVOS DECORADORES DA V2
from .auth_decorators import login_required_v2, admin_required_v2, api_auth_required, json_response

from .helpers import (
    format_datetime, 
    is_valid_email, 
    safe_int, 
    safe_float, 
    safe_str,
    validate_coordinates,
    calculate_time_difference
)
from .auth_helpers import (
    verificar_tentativas_login,
    registrar_tentativa_login,
    limpar_tentativas_login,
    get_tempo_restante_bloqueio
)

__all__ = [
    # Decorators V2
    'login_required_v2', # NOVO: Decorador para rotas de UI
    'admin_required_v2', # NOVO: Decorador para rotas de admin (futuro)
    'api_auth_required', # NOVO: Decorador para APIs protegidas
    'json_response',     # NOVO: Decorador para padronizar respostas JSON
    
    # Helpers
    'format_datetime',
    'is_valid_email',
    'safe_int',
    'safe_float', 
    'safe_str',
    'validate_coordinates',
    'calculate_time_difference',
    
    # Auth helpers
    'verificar_tentativas_login',
    'registrar_tentativa_login',
    'limpar_tentativas_login',
    'get_tempo_restante_bloqueio'
]
--- Fim do código: __init__.py ---

--- Início do código: factory.py ---
# app/factory.py
from flask import Flask
from flask_caching import Cache
import os

# Importa as configuraÃ§ÃƒÂµes do seu aplicativo
from app.config import get_config
# Importa o CacheService
from app.services.cache_service import CacheService # Adicionado import

cache = Cache()

def create_app():
    """Factory para criar instÃƒÂ¢ncia da aplicaÃ§Ã£o Flask"""
    print("Ã°Å¸Ââ€”Ã¯Â¸Â Criando aplicaÃ§Ã£o (Fase 4)...")
    
    template_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', 'templates'))
    static_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', 'static'))
    
    print(f"Ã°Å¸â€œÂ Template dir: {template_dir}")
    print(f"Ã°Å¸â€œÂ Static dir: {static_dir}")
    
    app = Flask(__name__, 
                template_folder=template_dir,
                static_folder=static_dir)
    
    print("Ã¢Å¡â„¢Ã¯Â¸Â Carregando configuraÃ§Ã£o...")
    config = get_config()
    app.config.from_object(config)
    
    app.config['SESSION_PERMANENT'] = True
    
    if not app.config.get('SECRET_KEY'):
        app.config['SECRET_KEY'] = 'dev-key-for-testing'
    
    planilha_url = app.config.get('PLANILHA_URL')
    if planilha_url:
        print(f"Ã¢Å“â€¦ PLANILHA_URL configurada: {planilha_url[:50]}...")
    else:
        print("Ã¢Å¡Â Ã¯Â¸Â PLANILHA_URL nÃ£o configurada - dashboard pode nÃ£o funcionar")
    
    print(f"DEBUG mode: {app.config.get('DEBUG', False)}")
    
    print("Inicializando extensÃƒÂµes...")
    init_extensions(app)
    
    print("Registrando blueprints...")
    register_blueprints(app) # Chama a funÃ§Ã£o que registra TODOS os blueprints
    
    print("Registrando context processors...")
    register_context_processors(app)
    
    print("Ã¢Å“â€¦ AplicaÃ§Ã£o criada com sucesso (Fase 4)!")
    return app

# A funÃ§Ã£o get_config jÃƒÂ¡ estava OK no seu factory.py
def get_config():
    """ObtÃƒÂ©m configuraÃ§Ã£o"""
    try:
        from app.config import get_config as get_app_config
        return get_app_config()
    except ImportError as e:
        print(f"Ã¢Å¡Â Ã¯Â¸Â Erro ao importar config: {e}")
        class MinimalConfig:
            DEBUG = True
            SECRET_KEY = 'dev-key-minimal'
            CACHE_TIMEOUT = 300
            USUARIOS_AUTORIZADOS = {}
            SESSION_PERMANENT = True
            PERMANENT_SESSION_LIFETIME = 3600
            PLANILHA_URL = None
            PLANILHA_KPIS_URL = None # Adicionado para evitar erro se kpis_api_bp for ativado
        return MinimalConfig()

def init_extensions(app):
    """Inicializa extensÃƒÂµes"""
    cache.init_app(app)
    try:
        if not hasattr(app, 'cache_service'):
            app.cache_service = CacheService(app.config.get('CACHE_TIMEOUT', 300))
        print("Ã¢Å“â€¦ Cache service inicializado")
    except Exception as e:
        print(f"Ã¢Å¡Â Ã¯Â¸Â Erro ao inicializar cache: {e}")

# CORRIGIDO: Registro de TODOS os Blueprints
def register_blueprints(app):
    """Registra todos os blueprints"""
    blueprints_registered = 0
    
    # BLUEPRINTS (app/blueprints)
    try:
        from app.blueprints.test import test_bp
        app.register_blueprint(test_bp)
        blueprints_registered += 1
        print("Ã¢Å“â€¦ Blueprint 'test' registrado")
    except Exception as e:
        print(f"Ã¢ÂÅ’ Erro ao registrar blueprint 'test': {e}")
    
    try:
        from app.blueprints.test_services import test_services_bp
        app.register_blueprint(test_services_bp, url_prefix='/test/services')
        blueprints_registered += 1
        print("Ã¢Å“â€¦ Blueprint 'test_services' registrado")
    except Exception as e:
        print(f"Ã¢ÂÅ’ Erro ao registrar blueprint 'test_services': {e}")
    
    try:
        from app.blueprints.auth import auth_bp
        app.register_blueprint(auth_bp)
        blueprints_registered += 1
        print("Ã¢Å“â€¦ Blueprint 'auth' registrado")
    except Exception as e:
        print(f"Ã¢ÂÅ’ Erro ao registrar blueprint 'auth': {e}")
    
    try:
        from app.blueprints.test_auth import test_auth_bp
        app.register_blueprint(test_auth_bp)
        blueprints_registered += 1
        print("Ã¢Å“â€¦ Blueprint 'test_auth' registrado")
    except Exception as e:
        print(f"Ã¢ÂÅ’ Erro ao registrar blueprint 'test_auth': {e}")
    
    try:
        from app.blueprints.dashboard import dashboard_bp
        app.register_blueprint(dashboard_bp)
        blueprints_registered += 1
        print("Ã¢Å“â€¦ Blueprint 'dashboard' registrado")
    except Exception as e:
        print(f"Ã¢ÂÅ’ Erro ao registrar blueprint 'dashboard': {e}")

    # BLUEPRINTS DE API (app/api) - ADICIONADOS AQUI
    try:
        from app.api.elevators import elevators_api_bp
        app.register_blueprint(elevators_api_bp, url_prefix='/api')
        blueprints_registered += 1
        print("Ã¢Å“â€¦ Blueprint 'elevators_api' registrado")
    except Exception as e:
        print(f"Ã¢ÂÅ’ Erro ao registrar blueprint 'elevators_api': {e}")

    # BLUEPRINT DE KPIS (UI)
    try:
        from app.blueprints.kpis import kpis_bp
        app.register_blueprint(kpis_bp) # Sem prefixo, usa o url_prefix definido no Blueprint (/v2/kpis)
        blueprints_registered += 1
        print("Ã¢Å“â€¦ Blueprint 'kpis' (UI) registrado")
    except Exception as e:
        print(f"Ã¢ÂÅ’ Erro ao registrar blueprint 'kpis' (UI): {e}")

    # BLUEPRINT DE KPIS (API)
    try:
        from app.api.kpis import kpis_api_bp
        app.register_blueprint(kpis_api_bp, url_prefix='/api') # Registra a API de KPIs sob /api
        blueprints_registered += 1
        print("Ã¢Å“â€¦ Blueprint 'kpis_api' registrado")
    except Exception as e:
        print(f"Ã¢ÂÅ’ Erro ao registrar blueprint 'kpis_api': {e}")
    
    print(f"Ã°Å¸â€œÅ  Total de blueprints registrados: {blueprints_registered}")

# A funÃ§Ã£o register_context_processors jÃƒÂ¡ estava OK no seu factory.py
def register_context_processors(app):
    """Context processors globais"""
    @app.context_processor
    def inject_user_info():
        from flask import session
        return {
            'usuario_logado': session.get('usuario_logado'),
            'login_timestamp': session.get('login_timestamp')
        }
    print("Ã¢Å“â€¦ Context processors registrados")
--- Fim do código: factory.py ---

--- Início do código: __init__.py ---
# app/__init__.py
# Este arquivo agora pode ficar quase vazio, ou apenas importar a funÃ§Ã£o fÃƒÂ¡brica
# para que 'from app import create_app' funcione.
from .factory import create_app 
--- Fim do código: __init__.py ---

--- Início do código: app_new.py ---
"""
Nova aplicaÃ§Ã£o usando Application Factory - VERSÃƒO DEBUG
"""
from app.factory import create_app

print("ðŸš€ Iniciando app_new.py...")

try:
    app = create_app()
    print("âœ… App criada com sucesso")
    
    # Lista rotas para debug
    print("\nðŸ“‹ ROTAS DISPONÃVEIS:")
    with app.app_context():
        for rule in app.url_map.iter_rules():
            print(f"   {list(rule.methods)} {rule.rule}")
    
    if __name__ == '__main__':
        print("\nðŸš€ Iniciando servidor na porta 5001...")
        print("ðŸ”— Acesse: http://localhost:5001/")
        print("ðŸ”— Health: http://localhost:5001/test/health")
        app.run(debug=True, port=5001, host='127.0.0.1')
        
except Exception as e:
    print(f"âŒ Erro crÃ­tico: {e}")
    import traceback
    traceback.print_exc()
--- Fim do código: app_new.py ---

--- Início do código: sheets_api.py ---
import gspread
from google.oauth2.service_account import Credentials
import pandas as pd
import json

class SheetsAPI:
    def __init__(self, credenciais_path='credenciais.json'):
        try:
            # Mostra o email de serviÃ§o para verificaÃ§Ã£o
            with open(credenciais_path, 'r') as f:
                creds_data = json.load(f)
                print(f"ðŸ”‘ Email de serviÃ§o: {creds_data['client_email']}")
            
            # ConfiguraÃ§Ã£o das credenciais
            scope = [
                'https://spreadsheets.google.com/feeds',
                'https://www.googleapis.com/auth/drive'
            ]
            
            creds = Credentials.from_service_account_file(
                credenciais_path, scopes=scope
            )
            self.client = gspread.authorize(creds)
            print("âœ… AutenticaÃ§Ã£o realizada com sucesso!")
            
        except Exception as e:
            print(f"âŒ Erro na autenticaÃ§Ã£o: {e}")
            raise
    
    def testar_conexao(self):
        """Testa se consegue listar planilhas"""
        try:
            planilhas = self.client.list_spreadsheet_files()
            print(f"ðŸ“Š Planilhas acessÃ­veis: {len(planilhas)}")
            for p in planilhas[:3]:  # Mostra apenas as 3 primeiras
                print(f"   - {p['name']}")
            return True
        except Exception as e:
            print(f"âŒ Erro ao listar planilhas: {e}")
            return False
    
    def obter_dados_elevadores(self, planilha_url):
        """ObtÃ©m dados da planilha do Google Sheets"""
        try:
            print(f"ðŸ”— Tentando acessar: {planilha_url}")
            
            # Abre a planilha pela URL
            sheet = self.client.open_by_url(planilha_url)
            print(f"ðŸ“‹ Planilha aberta: {sheet.title}")
            
            # Lista as abas disponÃ­veis
            worksheets = sheet.worksheets()
            print(f"ðŸ“‘ Abas encontradas: {[w.title for w in worksheets]}")
            
            # Pega a primeira aba
            worksheet = worksheets[0]
            print(f"ðŸ“„ Usando aba: {worksheet.title}")
            
            # ObtÃ©m os dados
            dados = worksheet.get_all_records()
            print(f"ðŸ“Š Registros encontrados: {len(dados)}")
            
            if len(dados) > 0:
                print(f"ðŸ” Colunas: {list(dados[0].keys())}")
            
            df = pd.DataFrame(dados)
            return df
            
        except gspread.exceptions.SpreadsheetNotFound:
            print("âŒ Planilha nÃ£o encontrada. Verifique a URL e permissÃµes.")
            return pd.DataFrame()
        except gspread.exceptions.APIError as e:
            print(f"âŒ Erro da API: {e}")
            print("ðŸ’¡ Dicas:")
            print("   - Verifique se a planilha foi compartilhada com o email de serviÃ§o")
            print("   - Confirme se a URL estÃ¡ correta")
            print("   - Tente aguardar alguns minutos e tente novamente")
            return pd.DataFrame()
        except Exception as e:
            print(f"âŒ Erro inesperado: {e}")
            return pd.DataFrame()

    def obter_dados_kpis(self, planilha_url):
        """ObtÃ©m dados de KPIs de manutenÃ§Ã£o da planilha do Google Sheets"""
        try:
            print(f"ðŸ”— Tentando acessar planilha de KPIs: {planilha_url}")
            
            # Abre a planilha pela URL
            sheet = self.client.open_by_url(planilha_url)
            print(f"ðŸ“‹ Planilha de KPIs aberta: {sheet.title}")
            
            # Lista as abas disponÃ­veis
            worksheets = sheet.worksheets()
            print(f"ï¿½ï¿½ Abas encontradas: {[w.title for w in worksheets]}")
            
            # Pega a primeira aba
            worksheet = worksheets[0]
            print(f"ðŸ“„ Usando aba: {worksheet.title}")
            
            # ObtÃ©m os dados
            dados = worksheet.get_all_records()
            print(f"ðŸ“Š Registros de KPIs encontrados: {len(dados)}")
            
            if len(dados) > 0:
                print(f"ðŸ” Colunas KPIs: {list(dados[0].keys())}")
            
            df = pd.DataFrame(dados)
            return df
            
        except gspread.exceptions.SpreadsheetNotFound:
            print("âŒ Planilha de KPIs nÃ£o encontrada. Verifique a URL e permissÃµes.")
            return pd.DataFrame()
        except gspread.exceptions.APIError as e:
            print(f"âŒ Erro da API ao acessar KPIs: {e}")
            return pd.DataFrame()
        except Exception as e:
            print(f"âŒ Erro inesperado ao acessar KPIs: {e}")
            return pd.DataFrame()

# Teste da conexÃ£o
if __name__ == "__main__":
    print("ðŸš€ Iniciando teste da API...")
    
    try:
        api = SheetsAPI()
        
        # Primeiro, testa a conexÃ£o geral
        if api.testar_conexao():
            print("\n" + "="*50)
            print("âœ… ConexÃ£o com Google Sheets funcionando!")
            print("="*50)
            
            # Agora testa com sua planilha especÃ­fica
            url_planilha = input("\nðŸ“ Cole a URL da sua planilha aqui: ").strip()
            
            if url_planilha and url_planilha != "SUA_URL_DA_PLANILHA_AQUI":
                print(f"\nðŸ”„ Testando acesso Ã  planilha...")
                dados = api.obter_dados_elevadores(url_planilha)
                
                if not dados.empty:
                    print(f"\nðŸŽ‰ SUCESSO! Dados carregados:")
                    print(f"   - {len(dados)} registros")
                    print(f"   - {len(dados.columns)} colunas")
                    print(f"\nðŸ“‹ Primeiras 3 linhas:")
                    print(dados.head(3))
                else:
                    print("\nâŒ Nenhum dado foi carregado.")
            else:
                print("\nâš ï¸  URL nÃ£o fornecida. Teste manual necessÃ¡rio.")
        else:
            print("\nâŒ Falha na conexÃ£o bÃ¡sica com Google Sheets.")
            
    except Exception as e:
        print(f"\nðŸ’¥ Erro crÃ­tico: {e}")
--- Fim do código: sheets_api.py ---

--- Início do código: dashboard.html ---
<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard v2.0 - Sistema de Elevadores</title>
    
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <!-- Leaflet CSS -->
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css">
    
    <style>
        body { background-color: #f8f9fa; }
        .navbar-brand { font-weight: bold; }
        .version-badge { 
            background: linear-gradient(45deg, #28a745, #20c997); 
            color: white; 
            padding: 4px 8px; 
            border-radius: 12px; 
            font-size: 12px; 
            margin-left: 10px;
        }
        .card { 
            border: none; 
            box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075); 
            margin-bottom: 1rem; 
        }
        .card-header { 
            background-color: #fff; 
            border-bottom: 1px solid #dee2e6; 
            font-weight: 600; 
        }
        .stats-card { transition: transform 0.2s; }
        .stats-card:hover { transform: translateY(-2px); }
        .map-container { 
            height: 500px; 
            border-radius: 0.375rem; 
            overflow: hidden; 
        }
        .filter-section { 
            max-height: 300px; 
            overflow-y: auto; 
        }
        .comparison-banner {
            background: linear-gradient(135deg, #17a2b8, #138496);
            color: white;
            padding: 15px;
            border-radius: 10px;
            margin-bottom: 20px;
        }
        /* NOVO: Estilos para estatÃƒÂ­sticas detalhadas */
        .stats-list {
            max-height: 200px;
            overflow-y: auto;
            font-size: 14px;
        }
        .stats-list > div {
            padding: 2px 0;
            border-bottom: 1px solid #f0f0f0;
        }
        .stats-list > div:last-child {
            border-bottom: none;
        }
        #stats-detalhadas .card-body {
            transition: all 0.3s ease;
        }
    </style>
</head>
<body>
    <!-- Navbar -->
    <nav class="navbar navbar-expand-lg navbar-dark bg-success">
        <div class="container-fluid">
            <a class="navbar-brand" href="#">
                <i class="fas fa-building"></i> Sistema de Elevadores
                <span class="version-badge">v2.0 Modular</span>
            </a>
            
            <div class="navbar-nav ms-auto">
                <span class="navbar-text me-3">
                    <i class="fas fa-user"></i> {{ usuario }}
                </span>
                <a class="nav-link" href="{{ url_for('auth.logout') }}">
                    <i class="fas fa-sign-out-alt"></i> Sair
                </a>
            </div>
        </div>
    </nav>

    <div class="container-fluid mt-3">
        <!-- Banner de ComparaÃ§Ã£o -->
        <div class="comparison-banner">
            <div class="row align-items-center">
                <div class="col-md-8">
                    <h5><i class="fas fa-rocket"></i> Nova Arquitetura Modular</h5>
                    <p class="mb-0">VocÃª estÃ¡ usando a versÃ£o 2.0 com arquitetura modular. 
                    Compare com o <a href="http://localhost:5000"  class="text-white"><u>sistema atual</u></a></p>
                </div>
                <div class="col-md-4 text-end">
                    <button class="btn btn-light btn-sm" onclick="atualizarDados()">
                        <i class="fas fa-sync-alt"></i> Atualizar Dados
                    </button>
                </div>
            </div>
        </div>

        {% if erro %}
        <!-- Erro -->
        <div class="alert alert-danger">
            <h4><i class="fas fa-exclamation-triangle"></i> Erro</h4>
            <p>{{ erro }}</p>
            <button class="btn btn-danger" onclick="location.reload()">
                <i class="fas fa-redo"></i> Tentar Novamente
            </button>
        </div>
        {% else %}
        
       <!-- Cards de EstatÃƒÂ­sticas -->
        <div class="row mb-4 stats-row" id="stats-cards">
            <div class="col-md-12">
                <div class="d-flex flex-wrap justify-content-between">
                    <div class="flex-fill mx-1">
                        <div class="card stats-card bg-primary text-white">
                            <div class="card-body text-center py-2">
                                <i class="fas fa-building fa-lg mb-1"></i>
                                <h5 id="stat-predios">{{ stats.total_predios if stats else 0 }}</h5>
                                <p class="mb-0 small">PrÃ©dios</p>
                            </div>
                        </div>
                    </div>
                    
                    <div class="flex-fill mx-1">
                        <div class="card stats-card bg-success text-white">
                            <div class="card-body text-center py-2">
                                <i class="fas fa-elevator fa-lg mb-1"></i>
                                <h5 id="stat-elevadores">{{ stats.total_elevadores if stats else 0 }}</h5>
                                <p class="mb-0 small">Elevadores</p>
                            </div>
                        </div>
                    </div>
                    
                    <div class="flex-fill mx-1">
                        <div class="card stats-card bg-info text-white">
                            <div class="card-body text-center py-2">
                                <i class="fas fa-map-marker-alt fa-lg mb-1"></i>
                                <h5 id="stat-cidades">{{ stats.cidades if stats else 0 }}</h5>
                                <p class="mb-0 small">Cidades</p>
                            </div>
                        </div>
                    </div>
                    
                    <div class="flex-fill mx-1">
                        <div class="card stats-card bg-secondary text-white">
                            <div class="card-body text-center py-2">
                                <i class="fas fa-map fa-lg mb-1"></i>
                                <h5 id="stat-regioes">{{ stats.regioes if stats else 0 }}</h5>
                                <p class="mb-0 small">RegiÃµes</p>
                            </div>
                        </div>
                    </div>
                    
                    <div class="flex-fill mx-1">
                        <div class="card stats-card bg-success text-white">
                            <div class="card-body text-center py-2">
                                <i class="fas fa-check-circle fa-lg mb-1"></i>
                                <h5 id="stat-ativos">{{ stats.em_atividade if stats else 0 }}</h5>
                                <p class="mb-0 small">Ativos</p>
                            </div>
                        </div>
                    </div>
                    
                    <div class="flex-fill mx-1">
                        <div class="card stats-card bg-warning text-white">
                            <div class="card-body text-center py-2">
                                <i class="fas fa-times-circle fa-lg mb-1"></i>
                                <h5 id="stat-suspensos">{{ stats.elevadores_suspensos if stats else 0 }}</h5>
                                <p class="mb-0 small">Suspensos</p>
                            </div>
                        </div>
                    </div>

                    <div class="flex-fill mx-1">
                        <div class="card stats-card bg-danger text-white">
                             <div class="card-body text-center py-2">
                                <i class="fas fa-exclamation-triangle fa-lg mb-1"></i>
                                 <h5 id="stat-parados">{{ stats.elevadores_parados if stats else 0 }}</h5>
                                 <p class="mb-0 small">Parados</p>
                             </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>


        <div class="row">
            <!-- Mapa -->
            <div class="col-md-9">
                <div class="card">
                    <div class="card-header">
                        <h5><i class="fas fa-map-marked-alt"></i> Mapa dos Elevadores</h5>
                    </div>
                    <div class="card-body p-0">
                        <div id="mapa" class="map-container"></div>
                    </div>
                </div>
                
                <!-- NOVO: EstatÃ­Â­sticas Detalhadas (abaixo do mapa, mesma coluna) -->
                <div class="card mt-3">
                    <div class="card-header">
                        <h5><i class="fas fa-chart-bar"></i> EstatÃ­sticas Detalhadas</h5>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <!-- Por Tipo -->
                            <div class="col-md-3">
                                <h6><i class="fas fa-building"></i> Por Tipo</h6>
                                <div id="stats-por-tipo" class="stats-list">
                                    {% if stats_detalhadas and stats_detalhadas.por_tipo %}
                                        {% for tipo, quantidade in stats_detalhadas.por_tipo.items() %}
                                        <div class="d-flex justify-content-between">
                                            <span>{{ tipo }}:</span>
                                            <strong>{{ quantidade }}</strong>
                                        </div>
                                        {% endfor %}
                                    {% else %}
                                        <div class="text-muted">Carregando...</div>
                                    {% endif %}
                                </div>
                            </div>
                            
                            <!-- Por RegiÃ£o -->
                            <div class="col-md-3">
                                <h6><i class="fas fa-map"></i> Por RegiÃ£o</h6>
                                <div id="stats-por-regiao" class="stats-list">
                                    {% if stats_detalhadas and stats_detalhadas.por_regiao %}
                                        {% for regiao, quantidade in stats_detalhadas.por_regiao.items() %}
                                        <div class="d-flex justify-content-between">
                                            <span>{{ regiao }}:</span>
                                            <strong>{{ quantidade }}</strong>
                                        </div>
                                        {% endfor %}
                                    {% else %}
                                        <div class="text-muted">Carregando...</div>
                                    {% endif %}
                                </div>
                            </div>
                            
                            <!-- Por Marca -->
                            <div class="col-md-3">
                                <h6><i class="fas fa-tag"></i> Por Marca</h6>
                                <div id="stats-por-marca" class="stats-list">
                                    {% if stats_detalhadas and stats_detalhadas.por_marca %}
                                        {% for marca, quantidade in stats_detalhadas.por_marca.items() %}
                                        <div class="d-flex justify-content-between">
                                            <span>{{ marca }}:</span>
                                            <strong>{{ quantidade }}</strong>
                                        </div>
                                        {% endfor %}
                                    {% else %}
                                        <div class="text-muted">Carregando...</div>
                                    {% endif %}
                                </div>
                            </div>
                            
                            <!-- Por Status -->
                            <div class="col-md-3">
                                <h6><i class="fas fa-traffic-light"></i> Por Status</h6>
                                <div id="stats-por-status" class="stats-list">
                                    {% if stats_detalhadas and stats_detalhadas.por_status %}
                                        {% for status, quantidade in stats_detalhadas.por_status.items() %}
                                        <div class="d-flex justify-content-between">
                                            <span class="{% if status == 'Em atividade' %}text-success{% elif status == 'Parados' %}text-danger{% else %}text-warning{% endif %}">
                                                {{ status }}:
                                            </span>
                                            <strong>{{ quantidade }}</strong>
                                        </div>
                                        {% endfor %}
                                    {% else %}
                                        <div class="text-muted">Carregando...</div>
                                    {% endif %}
                                </div>
                            </div>
                        </div>
                        
                        <!-- NOVO: Elevadores Parados (se houver) -->
                        <div class="row mt-4" id="elevadores-parados-section" style="display: none;">
                            <div class="col-12">
                                <h6><i class="fas fa-exclamation-triangle text-danger"></i> Elevadores Parados</h6>
                                <div class="table-responsive">
                                    <table class="table table-sm table-striped">
                                        <thead>
                                            <tr>
                                                <th>Unidade</th>
                                                <th>Cidade</th>
                                                <th>Tipo</th>
                                                <th>RegiÃ£o</th>
                                                <th>Parados</th>
                                                <th>Total</th>
                                                <th>Marca</th>
                                            </tr>
                                        </thead>
                                        <tbody id="elevadores-parados-tbody">
                                            <!-- Preenchido via JavaScript -->
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Filtros (agora com altura total) -->
            <div class="col-md-3">
                <div class="card h-100">
                    <div class="card-header">
                        <h5><i class="fas fa-filter"></i> Filtros</h5>
                    </div>
                    <div class="card-body">
                        <!-- Contador de Resultados -->
                        <div class="alert alert-info" id="contador-resultados">
                            <strong>Total:</strong> 
                            <span id="total-elevadores-filtro">{{ stats.total_elevadores if stats else 0 }}</span> elevadores em 
                            <span id="total-locais-filtro">{{ stats.total_predios if stats else 0 }}</span> locais
                        </div>

                        <!-- BotÃƒÂµes de AÃ§Ã£o -->
                        <div class="mb-3">
                            <div class="row">
                                <div class="col-6">
                                    <button class="btn btn-success btn-sm w-100 mb-2" onclick="aplicarFiltros()">
                                        <i class="fas fa-search"></i> Aplicar
                                    </button>
                                </div>
                                <div class="col-6">
                                    <button class="btn btn-info btn-sm w-100 mb-2" onclick="selecionarTodos()">
                                        <i class="fas fa-check-double"></i> Todos
                                    </button>
                                </div>
                            </div>
                            <button class="btn btn-secondary btn-sm w-100" onclick="limparFiltros()">
                                <i class="fas fa-eraser"></i> Limpar Filtros
                            </button>
                        </div>

                        <!-- Filtros por Tipo -->
                        {% if tipos_unicos %}
                        <div class="mb-3">
                            <h6><i class="fas fa-building"></i> Tipo</h6>
                            <div class="filter-section">
                                {% for tipo in tipos_unicos %}
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" 
                                           id="check-tipo-{{ loop.index }}" value="{{ tipo }}">
                                    <label class="form-check-label" for="check-tipo-{{ loop.index }}">
                                        {{ tipo }}
                                    </label>
                                </div>
                                {% endfor %}
                            </div>
                        </div>
                        {% endif %}

                        <!-- Filtros por RegiÃ£o -->
                        {% if regioes_unicas %}
                        <div class="mb-3">
                            <h6><i class="fas fa-map"></i> RegiÃ£o</h6>
                            <div class="filter-section">
                                {% for regiao in regioes_unicas %}
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" 
                                           id="check-regiao-{{ loop.index }}" value="{{ regiao }}">
                                    <label class="form-check-label" for="check-regiao-{{ loop.index }}">
                                        {{ regiao }}
                                    </label>
                                </div>
                                {% endfor %}
                            </div>
                        </div>
                        {% endif %}

                        <!-- Filtros por SituaÃ§Ã£o -->
                        <div class="mb-3">
                            <h6><i class="fas fa-traffic-light"></i> SituaÃ§Ã£o</h6>
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" 
                                       id="check-situacao-ativos" value="ativos">
                                <label class="form-check-label" for="check-situacao-ativos">
                                    <span class="text-success">Ã¢â€”Â</span> Ativos
                                </label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" 
                                       id="check-situacao-suspensos" value="suspensos">
                                <label class="form-check-label" for="check-situacao-suspensos">
                                    <span class="text-warning">Ã¢â€”Â</span> Suspensos
                                </label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" 
                                       id="check-situacao-parados" value="parados">
                                <label class="form-check-label" for="check-situacao-parados">
                                    <span class="text-danger">Ã¢â€”Â</span> Parados
                                </label>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        {% endif %}
    </div>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"></script>
    <script>
    // Dados iniciais do GeoJSON passados do backend via Jinja2
    const initialGeojsonData = {{ geojson_data | tojson if geojson_data else '{"type": "FeatureCollection", "features": []}' }};
    const initialStats = {{ stats | tojson if stats else '{}' }};
    const initialDetailedStats = {{ stats_detalhadas | tojson if stats_detalhadas else '{}' }};
    // Se houver outras variÃƒÂ¡veis Jinja2 usadas diretamente no JavaScript, passe-as aqui tambÃƒÂ©m.
    
    // VariÃƒÂ¡veis globais para os tipos ÃƒÂºnicos, regiÃƒÂµes ÃƒÂºnicas, etc.
    // O Jinja2 jÃƒÂ¡ as estÃƒÂ¡ passando para o template.
    // Para acessÃƒÂ¡-las no JS externo, vocÃƒÂª pode passÃƒÂ¡-las como no exemplo abaixo,
    // ou fazer chamadas de API para obtÃƒÂª-las se elas mudarem dinamicamente.
    // Por enquanto, vamos considerar que sÃ£o carregadas uma vez.
    const uniqueTypes = {{ tipos_unicos | tojson | safe }};
    const uniqueRegions = {{ regioes_unicas | tojson | safe }};
    const uniqueBrands = {{ marcas_unicas | tojson | safe }};
    const uniqueCompanies = {{ empresas_unicas | tojson | safe }};
</script>

<!-- Script customizado para o dashboard v2 -->
<script src="{{ url_for('static', filename='js/dashboard_v2.js') }}"></script>

</body>
</html>
--- Fim do código: dashboard.html ---

--- Início do código: kpis.html ---
{% extends "base.html" %}

{# CORRIGIDO: Certifique-se de que hÃƒÂ¡ APENAS UMA definiÃ§Ã£o de block title #}
{% block title %}KPIs de ManutenÃ§Ã£o - Sistema de Elevadores TJ/MG{% endblock %}

{% block extra_head %}
<!-- Chart.js -->
{# CORRIGIDO: URLs atualizadas para Chart.js v3.x e seus adaptadores #}
<script src="https://cdn.jsdelivr.net/npm/chart.js@3.7.0/dist/chart.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns@3.0.0/dist/chartjs-adapter-date-fns.bundle.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/date-fns@2.30.0/index.min.js"></script>
{# Opcional: Se precisar de um locale especÃƒÂ­fico para date-fns, pode adicionar aqui. #}
{# Chart.js v3 usa a config global para locale do date-fns adapter. #}
<script>
    // Configura locale global para Chart.js date-fns adapter
    Chart.defaults.plugins.tooltip.usePointStyle = true; // Estilo de tooltip mais moderno
    Chart.defaults.font.family = "'Segoe UI', 'Roboto', 'Helvetica Neue', Arial, sans-serif";
    Chart.defaults.color = '#333'; // Cor padrÃ£o do texto nos grÃƒÂ¡ficos
</script>
{% endblock %}

{% block content %}
<div class="row">
    <div class="col-12">
        <h1 class="mb-4">
            <i class="fas fa-chart-line"></i> 
            KPIs de ManutenÃ§Ã£o - Elevadores TJ/MG
        </h1>
    </div>
</div>

{% if erro %}
    <div class="alert alert-danger" role="alert">
        <i class="fas fa-exclamation-triangle"></i> {{ erro }}
    </div>
{% else %}
    <!-- Filtros AvanÃ§ados -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5><i class="fas fa-filter"></i> Filtros</h5>
                    <div>
                        <button class="btn btn-success btn-sm me-2" onclick="aplicarFiltros()">
                            <i class="fas fa-search"></i> Aplicar Filtros
                        </button>
                        <button class="btn btn-secondary btn-sm me-2" onclick="limparFiltrosKPIs()">
                            <i class="fas fa-eraser"></i> Limpar
                        </button>
                        <button class="btn btn-info btn-sm" onclick="atualizarDados()"> {# Esta funÃ§Ã£o chamarÃƒÂ¡ o /v2/kpis/atualizar-kpis #}
                            <i class="fas fa-sync-alt"></i> Atualizar
                        </button>
                    </div>
                </div>
                <div class="card-body">
                    <!-- Primeira linha: Filtros de Data -->
                    <div class="row mb-3">
                        <div class="col-md-3">
                            <label class="form-label"><i class="fas fa-calendar"></i> Data de InÃƒÂ­cio</label>
                            <input type="date" class="form-control" id="data-inicio">
                        </div>
                        <div class="col-md-3">
                            <label class="form-label"><i class="fas fa-calendar"></i> Data de Fim</label>
                            <input type="date" class="form-control" id="data-fim">
                        </div>
                        <div class="col-md-6">
                            <label class="form-label"><i class="fas fa-clock"></i> PerÃƒÂ­odo Predefinido</label>
                            <select class="form-select" id="filtro-periodo" onchange="selecionarPeriodoPredefinido()">
                                <option value="">Selecione um perÃƒÂ­odo...</option>
                                <option value="ultima-semana">ÃƒÅ¡ltima Semana</option>
                                <option value="ultimo-mes">ÃƒÅ¡ltimo MÃƒÂªs</option>
                                <option value="ultimos-3-meses">ÃƒÅ¡ltimos 3 Meses</option>
                                <option value="ultimos-6-meses">ÃƒÅ¡ltimos 6 Meses</option>
                                <option value="ultimo-ano">ÃƒÅ¡ltimo Ano</option>
                                <option value="ultimos-2-anos">ÃƒÅ¡ltimos 2 Anos</option>
                                <option value="ultimos-5-anos">ÃƒÅ¡ltimos 5 Anos</option>
                                <option value="todo-periodo">Todo o PerÃƒÂ­odo</option>
                            </select>
                        </div>
                    </div>
                    
                    <!-- Segunda linha: Outros filtros -->
                    <div class="row">
                        <!-- Filtro por Status -->
                        <div class="col-md-3">
                            <label class="form-label"><i class="fas fa-tasks"></i> Status</label>
                            <select class="form-select" id="filtro-status">
                                <option value="">Todos os status</option>
                                <option value="ConcluÃƒÂ­da">ConcluÃƒÂ­da</option>
                                <option value="Confirmada">Confirmada</option>
                                <option value="Pendente">Pendente</option> {# NOVO: Adicione Pendente se seu status incluir #}
                            </select>
                        </div>
                        
                        <!-- Filtro por Categoria -->
                        <div class="col-md-3">
                            <label class="form-label"><i class="fas fa-tags"></i> Categoria</label>
                            <select class="form-select" id="filtro-categoria">
                                <option value="">Todas as categorias</option>
                                <!-- Preenchido dinamicamente via JavaScript -->
                            </select>
                        </div>
                        
                        <!-- Filtro por EdifÃƒÂ­cio -->
                        <div class="col-md-3"> {# CORRIGIDO: Reduzido para 3 para adicionar Equipamento #}
                            <label class="form-label"><i class="fas fa-building"></i> EdifÃƒÂ­cio</label>
                            <select class="form-select" id="filtro-edificio">
                                <option value="">Todos os edifÃƒÂ­cios</option>
                                <!-- Preenchido dinamicamente via JavaScript -->
                            </select>
                        </div>

                        <!-- NOVO: Filtro por Elevador (Equipamento) -->
                        <div class="col-md-3">
                            <label class="form-label"><i class="fas fa-elevator"></i> Elevador (Equipamento)</label>
                            <select class="form-select" id="filtro-equipamento">
                                <option value="">Todos os elevadores</option>
                                <!-- Preenchido dinamicamente via JavaScript -->
                            </select>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Cards de KPIs Principais -->
    <div class="row mb-4" id="kpis-cards">
        <div class="col-md-3">
            <div class="card bg-primary text-white">
                <div class="card-body text-center">
                    <i class="fas fa-clipboard-list fa-2x mb-2"></i>
                    <h3 id="total-chamados">{{ metricas.total_chamados or 0 }}</h3>
                    <p class="mb-0">Total de Chamados</p>
                </div>
            </div>
        </div>
        
        <div class="col-md-3">
            <div class="card bg-success text-white">
                <div class="card-body text-center">
                    <i class="fas fa-check-circle fa-2x mb-2"></i>
                    <h3 id="chamados-concluidos">{{ metricas.chamados_concluidos or 0 }}</h3>
                    <p class="mb-0">Chamados ConcluÃƒÂ­dos</p>
                </div>
            </div>
        </div>
        
        <div class="col-md-3">
            <div class="card bg-warning text-white">
                <div class="card-body text-center">
                    <i class="fas fa-clock fa-2x mb-2"></i>
                    <h3 id="tempo-mediano">{{ "%.1f"|format(metricas.tempo_mediano_reparo or 0) }}h</h3>
                    <p class="mb-0">Tempo Mediano de Reparo</p>
                </div>
            </div>
        </div>
        
        <div class="col-md-3">
            <div class="card bg-info text-white">
                <div class="card-body text-center">
                    <i class="fas fa-percentage fa-2x mb-2"></i>
                    <h3 id="disponibilidade">{{ "%.1f"|format(metricas.disponibilidade or 0) }}%</h3>
                    <p class="mb-0">Taxa de ConclusÃ£o</p>
                </div>
            </div>
        </div>
    </div>

    <!-- Indicador de Filtros Ativos -->
    <div class="row mb-3" id="filtros-ativos" style="display: none;">
        <div class="col-12">
            <div class="alert alert-info">
                <i class="fas fa-filter"></i> 
                <strong>Filtros ativos:</strong> 
                <span id="descricao-filtros"></span>
                <button class="btn btn-sm btn-outline-primary ms-2" onclick="limparFiltrosKPIs()">
                    <i class="fas fa-times"></i> Remover filtros
                </button>
            </div>
        </div>
    </div>

    <!-- GrÃƒÂ¡ficos -->
    <div class="row">
        <!-- GrÃƒÂ¡fico de Chamados por MÃƒÂªs -->
        <div class="col-md-6 mb-4">
            <div class="card">
                <div class="card-header">
                    <h5><i class="fas fa-chart-line"></i> Chamados por MÃƒÂªs</h5>
                    <small class="text-muted">Clique nos pontos para filtrar por mÃƒÂªs</small>
                </div>
                <div class="card-body">
                    <canvas id="grafico-chamados-mes" height="300"></canvas>
                </div>
            </div>
        </div>

        <!-- GrÃƒÂ¡fico de Categorias de Problema -->
        <div class="col-md-6 mb-4">
            <div class="card">
                <div class="card-header">
                    <h5><i class="fas fa-chart-pie"></i> Categorias de Problemas</h5>
                    <small class="text-muted">Clique nas fatias para filtrar por categoria</small>
                </div>
                <div class="card-body">
                    <canvas id="grafico-categorias" height="300"></canvas>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <!-- GrÃƒÂ¡fico de EdifÃƒÂ­cios Mais ProblemÃƒÂ¡ticos -->
        <div class="col-md-6 mb-4">
            <div class="card">
                <div class="card-header">
                    <h5><i class="fas fa-chart-bar"></i> EdifÃƒÂ­cios com Mais Chamados</h5>
                    <small class="text-muted">Clique nas barras para filtrar por edifÃƒÂ­cio</small>
                </div>
                <div class="card-body">
                    <canvas id="grafico-edificios" height="300"></canvas>
                </div>
            </div>
        </div>

        <!-- GrÃƒÂ¡fico de Tempo por Categoria -->
        <div class="col-md-6 mb-4">
            <div class="card">
                <div class="card-header">
                    <h5><i class="fas fa-stopwatch"></i> Tempo Mediano por Categoria</h5>
                    <small class="text-muted">Clique nas barras para filtrar por categoria</small>
                </div>
                <div class="card-body">
                    <canvas id="grafico-tempo-categoria" height="300"></canvas>
                </div>
            </div>
        </div>
    </div>

    <!-- NOVO: SEÃƒâ€¡ÃƒÆ’O DE GRÃƒÂFICOS DE ELEVADORES -->
    <div class="row">
        <!-- GrÃƒÂ¡fico de Chamados por Elevador -->
        <div class="col-md-6 mb-4">
            <div class="card">
                <div class="card-header">
                    <h5><i class="fas fa-elevator"></i> Chamados por Elevador</h5>
                    <small class="text-muted">Clique nas barras para filtrar por elevador especÃƒÂ­fico</small>
                </div>
                <div class="card-body">
                    <canvas id="grafico-chamados-elevador" height="300"></canvas>
                </div>
            </div>
        </div>

        <!-- GrÃƒÂ¡fico de Tempo Mediano por Elevador -->
        <div class="col-md-6 mb-4">
            <div class="card">
                <div class="card-header">
                    <h5><i class="fas fa-clock"></i> Tempo Mediano de Atendimento por Elevador</h5>
                    <small class="text-muted">Clique nas barras para filtrar por elevador especÃƒÂ­fico</small>
                </div>
                <div class="card-body">
                    <canvas id="grafico-tempo-elevador" height="300"></canvas>
                </div>
            </div>
        </div>
    </div>

    <!-- Tabela de Resumo Filtrado -->
    <div class="row">
        <div class="card">
            <div class="card-header">
                <h5><i class="fas fa-table"></i> Resumo dos Dados Filtrados</h5>
            </div>
            <div class="card-body">
                <div id="loading-resumo" class="text-center" style="display: none;">
                    <i class="fas fa-spinner fa-spin"></i> Carregando dados...
                </div>
                <div id="tabela-resumo">
                    <p class="text-muted text-center">Use os filtros acima ou clique nos grÃƒÂ¡ficos para ver dados especÃƒÂ­ficos.</p>
                </div>
            </div>
        </div>
    </div>
{% endif %}

<script>
// Dados para JavaScript
const dadosKPIsOriginais = {{ metricas|tojson|safe }};
let dadosKPIsFiltrados = dadosKPIsOriginais;
let graficos = {};
let filtrosAtivos = {};

// NOVO: VariÃƒÂ¡veis para preencher os selects de filtro
const categoriasUnicas = {{ categorias_unicas|tojson|safe }};
const edificiosUnicos = {{ edificios_unicos|tojson|safe }};
const equipamentosUnicos = {{ equipamentos_unicos|tojson|safe }}; // NOVO

console.log('Ã°Å¸â€œÅ  Dados de KPIs recebidos:', dadosKPIsOriginais);
console.log('Ã¢Å¡â„¢Ã¯Â¸Â Categorias ÃƒÅ¡nicas:', categoriasUnicas);
console.log('Ã¢Å¡â„¢Ã¯Â¸Â EdifÃƒÂ­cios ÃƒÅ¡nicos:', edificiosUnicos);
console.log('Ã¢Å¡â„¢Ã¯Â¸Â Equipamentos ÃƒÅ¡nicos:', equipamentosUnicos); // NOVO


// Inicializa grÃƒÂ¡ficos quando a pÃƒÂ¡gina carrega
document.addEventListener('DOMContentLoaded', function() {
    console.log('Ã°Å¸â€œâ€ž DOM carregado, criando grÃƒÂ¡ficos de KPIs...');
    preencherFiltros();
    criarGraficos();
});

function preencherFiltros() {
    // Preenche filtro de categorias
    const selectCategoria = document.getElementById('filtro-categoria');
    categoriasUnicas.forEach(categoria => {
        const option = document.createElement('option');
        option.value = categoria;
        option.textContent = categoria;
        selectCategoria.appendChild(option);
    });
    
    // Preenche filtro de edifÃƒÂ­cios
    const selectEdificio = document.getElementById('filtro-edificio');
    edificiosUnicos.forEach(edificio => {
        const option = document.createElement('option');
        option.value = edificio;
        option.textContent = edificio.length > 50 ? edificio.substring(0, 50) + '...' : edificio;
        selectEdificio.appendChild(option);
    });

    // NOVO: Preenche filtro de equipamentos (Elevadores)
    const selectEquipamento = document.getElementById('filtro-equipamento');
    equipamentosUnicos.forEach(equipamento => {
        const option = document.createElement('option');
        option.value = equipamento;
        option.textContent = equipamento;
        selectEquipamento.appendChild(option);
    });
}

// Ã°Å¸â€œâ€¦ NOVA FUNÃƒâ€¡ÃƒÆ’O: Selecionar perÃƒÂ­odo predefinido
function selecionarPeriodoPredefinido() {
    const periodo = document.getElementById('filtro-periodo').value;
    
    if (periodo && periodo !== 'todo-periodo') {
        // Limpa datas personalizadas quando seleciona perÃƒÂ­odo predefinido
        document.getElementById('data-inicio').value = '';
        document.getElementById('data-fim').value = '';
    }
    
    console.log('Ã°Å¸â€œâ€¦ PerÃƒÂ­odo predefinido selecionado:', periodo);
}

function criarGraficos() {
    // Destroi grÃƒÂ¡ficos existentes
    Object.values(graficos).forEach(grafico => {
        if (grafico) grafico.destroy();
    });
    
    // Cria novos grÃƒÂ¡ficos
    criarGraficoChamadosPorMes();
    criarGraficoCategorias();
    criarGraficoEdificios();
    criarGraficoTempoPorCategoria();
    
    // NOVOS GRÃƒÂFICOS DE ELEVADORES
    criarGraficoChamadosPorElevador();
    criarGraficoTempoMedianoPorElevador();
}

function criarGraficoChamadosPorMes() {
    const ctx = document.getElementById('grafico-chamados-mes');
    if (!ctx) return;
    
    const dados = dadosKPIsFiltrados.chamados_por_mes || {};
    const labels = Object.keys(dados).sort();
    const values = labels.map(label => dados[label]);
    
    graficos.chamadosMes = new Chart(ctx, {
        type: 'line',
        data: {
            labels: labels,
            datasets: [{
                label: 'Chamados',
                data: values,
                borderColor: '#007bff',
                backgroundColor: 'rgba(0, 123, 255, 0.1)',
                borderWidth: 3,
                fill: true,
                tension: 0.4,
                pointBackgroundColor: '#007bff',
                pointBorderColor: '#fff',
                pointBorderWidth: 2,
                pointRadius: 6,
                pointHoverRadius: 8
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    display: false
                }
            },
            scales: {
                x: {
                    type: 'time', {# CORRIGIDO: Use escala de tempo para melhor visualizaÃ§Ã£o #}
                    time: {
                        unit: 'month',
                        tooltipFormat: 'MMM yyyy'
                    },
                    adapters: {
                        date: {
                            // Certifique-se de que o locale 'pt-BR' estÃƒÂ¡ disponÃƒÂ­vel para date-fns
                            // Se nÃ£o estiver funcionando, pode ser necessÃƒÂ¡rio importar explicitamente o locale do date-fns
                            // No entanto, Chart.js adapta globalmente, entÃ£o deve funcionar.
                        }
                    }
                },
                y: {
                    beginAtZero: true,
                    ticks: {
                        stepSize: 1
                    }
                }
            },
            onClick: (event, elements) => {
                if (elements.length > 0) {
                    const index = elements[0].index;
                    const mesAno = labels[index];
                    filtrarPorMes(mesAno);
                }
            },
            onHover: (event, elements) => {
                event.native.target.style.cursor = elements.length > 0 ? 'pointer' : 'default';
            }
        }
    });
}

function criarGraficoCategorias() {
    const ctx = document.getElementById('grafico-categorias');
    if (!ctx) return;
    
    const dados = dadosKPIsFiltrados.categorias_problema || {};
    
    // Ã°Å¸â€â€ž ORDENAÃƒâ€¡ÃƒÆ’O DECRESCENTE
    const entries = Object.entries(dados).sort((a, b) => b[1] - a[1]);
    const labels = entries.map(entry => entry[0]);
    const values = entries.map(entry => entry[1]);
    
    const cores = [
        '#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', 
        '#9966FF', '#FF9F40', '#FF6384', '#C9CBCF',
        '#E0BBE4', '#957DAD', '#D291BC', '#FFC72C'
    ];
    
    graficos.categorias = new Chart(ctx, {
        type: 'doughnut',
        data: {
            labels: labels,
            datasets: [{
                data: values,
                backgroundColor: cores.slice(0, labels.length),
                borderWidth: 2,
                borderColor: '#fff',
                hoverBorderWidth: 4
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    position: 'bottom'
                }
            },
            onClick: (event, elements) => {
                if (elements.length > 0) {
                    const index = elements[0].index;
                    const categoria = labels[index];
                    filtrarPorCategoria(categoria);
                }
            },
            onHover: (event, elements) => {
                event.native.target.style.cursor = elements.length > 0 ? 'pointer' : 'default';
            }
        }
    });
}

// Ã°Å¸â€â€ž MODIFICADO: GrÃƒÂ¡fico de EdifÃƒÂ­cios com ordenaÃ§Ã£o decrescente garantida
function criarGraficoEdificios() {
    const ctx = document.getElementById('grafico-edificios');
    if (!ctx) return;
    
    const dados = dadosKPIsFiltrados.chamados_por_edificio || {};
    
    // Ã°Å¸â€â€ž ORDENAÃƒâ€¡ÃƒÆ’O DECRESCENTE EXPLÃƒÂCITA (garantindo que funcione mesmo se backend nÃ£o ordenar)
    const entries = Object.entries(dados)
        .sort((a, b) => b[1] - a[1])  // Ordena por valor decrescente
        .slice(0, 10); // Top 10
    
    const labels = entries.map(entry => entry[0]);
    const values = entries.map(entry => entry[1]);
    
    console.log('Ã°Å¸ÂÂ¢ Dados de edifÃƒÂ­cios ordenados:', entries);
    
    graficos.edificios = new Chart(ctx, {
        type: 'bar',
        data: {
            labels: labels.map(label => label.length > 20 ? label.substring(0, 20) + '...' : label),
            datasets: [{
                label: 'Chamados',
                data: values,
                backgroundColor: '#28a745',
                borderColor: '#1e7e34',
                borderWidth: 1,
                hoverBackgroundColor: '#34ce57'
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    display: false
                }
            },
            scales: {
                y: {
                    beginAtZero: true,
                    ticks: {
                        stepSize: 1
                    }
                },
                x: {
                    ticks: {
                        maxRotation: 45
                    }
                }
            },
            onClick: (event, elements) => {
                if (elements.length > 0) {
                    const index = elements[0].index;
                    const edificio = labels[index];
                    filtrarPorEdificio(edificio);
                }
            },
            onHover: (event, elements) => {
                event.native.target.style.cursor = elements.length > 0 ? 'pointer' : 'default';
            }
        }
    });
}

// Ã°Å¸â€â€ž MODIFICADO: GrÃƒÂ¡fico de Tempo por Categoria com ordenaÃ§Ã£o decrescente garantida
function criarGraficoTempoPorCategoria() {
    const ctx = document.getElementById('grafico-tempo-categoria');
    if (!ctx) return;
    
    const dados = dadosKPIsFiltrados.tempo_por_categoria || {};
    
    // Ã°Å¸â€â€ž ORDENAÃƒâ€¡ÃƒÆ’O DECRESCENTE EXPLÃƒÂCITA (garantindo que funcione mesmo se backend nÃ£o ordenar)
    const entries = Object.entries(dados)
        .sort((a, b) => b[1] - a[1]); // Ordena por valor decrescente
    
    const labels = entries.map(entry => entry[0]);
    const values = entries.map(entry => Math.round(entry[1] * 10) / 10);
    
    console.log('Ã¢ÂÂ±Ã¯Â¸Â Dados de tempo por categoria ordenados:', entries);
    
    graficos.tempoCategoria = new Chart(ctx, {
        type: 'bar',
        data: {
            labels: labels,
            datasets: [{
                label: 'Tempo Mediano (horas)',
                data: values,
                backgroundColor: '#ffc107',
                borderColor: '#e0a800',
                borderWidth: 1,
                hoverBackgroundColor: '#ffcd39'
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    display: false
                }
            },
            scales: {
                y: {
                    beginAtZero: true,
                    ticks: {
                        callback: function(value) {
                            return value + 'h';
                        }
                    }
                }
            },
            onClick: (event, elements) => {
                if (elements.length > 0) {
                    const index = elements[0].index;
                    const categoria = labels[index];
                    filtrarPorCategoria(categoria);
                }
            },
            onHover: (event, elements) => {
                event.native.target.style.cursor = elements.length > 0 ? 'pointer' : 'default';
            }
        }
    });
}

// NOVO: GrÃƒÂ¡fico de Chamados por Elevador
function criarGraficoChamadosPorElevador() {
    const ctx = document.getElementById('grafico-chamados-elevador');
    if (!ctx) return;
    
    const dados = dadosKPIsFiltrados.chamados_por_equipamento || {};
    
    // OrdenaÃ§Ã£o decrescente e limitaÃ§Ã£o aos top 15 elevadores
    const entries = Object.entries(dados)
        .sort((a, b) => b[1] - a[1])
        .slice(0, 15); // Top 15 elevadores
    
    const labels = entries.map(entry => String(entry[0]));
    const values = entries.map(entry => entry[1]);
    
    console.log('Ã°Å¸Ââ€”Ã¯Â¸Â Dados de chamados por elevador ordenados:', entries);
    
    graficos.chamadosElevador = new Chart(ctx, {
        type: 'bar',
        data: {
            labels: labels,
            datasets: [{
                label: 'Chamados',
                data: values,
                backgroundColor: '#007bff',
                borderColor: '#0056b3',
                borderWidth: 1,
                hoverBackgroundColor: '#0056b3'
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    display: false
                },
                tooltip: {
                    callbacks: {
                        title: function(context) {
                            return 'Elevador: ' + context[0].label;
                        },
                        label: function(context) {
                            return 'Chamados: ' + context.parsed.y;
                        }
                    }
                }
            },
            scales: {
                y: {
                    beginAtZero: true,
                    ticks: {
                        stepSize: 1
                    }
                },
                x: {
                    ticks: {
                        maxRotation: 45,
                        font: {
                            size: 10
                        }
                    }
                }
            },
            onClick: (event, elements) => {
                if (elements.length > 0) {
                    const index = elements[0].index;
                    const elevador = String(labels[index]);
                    filtrarPorEquipamento(elevador); {# CORRIGIDO: Chamando filtrarPorEquipamento #}
                }
            },
            onHover: (event, elements) => {
                event.native.target.style.cursor = elements.length > 0 ? 'pointer' : 'default';
            }
        }
    });
}

// NOVO: GrÃƒÂ¡fico de Tempo Mediano por Elevador
function criarGraficoTempoMedianoPorElevador() {
    const ctx = document.getElementById('grafico-tempo-elevador');
    if (!ctx) return;
    
    const dados = dadosKPIsFiltrados.tempo_por_equipamento || {};
    
    // OrdenaÃ§Ã£o decrescente e limitaÃ§Ã£o aos top 15 elevadores
    const entries = Object.entries(dados)
        .sort((a, b) => b[1] - a[1])
        .slice(0, 15); // Top 15 elevadores
    
    const labels = entries.map(entry => String(entry[0]));
    const values = entries.map(entry => Math.round(entry[1] * 10) / 10);
    
    console.log('Ã¢ÂÂ° Dados de tempo por elevador ordenados:', entries);
    
    graficos.tempoElevador = new Chart(ctx, {
        type: 'bar',
        data: {
            labels: labels,
            datasets: [{
                label: 'Tempo Mediano (horas)',
                data: values,
                backgroundColor: '#17a2b8',
                borderColor: '#138496',
                borderWidth: 1,
                hoverBackgroundColor: '#138496'
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    display: false
                },
                tooltip: {
                    callbacks: {
                        title: function(context) {
                            return 'Elevador: ' + context[0].label;
                        },
                        label: function(context) {
                            return 'Tempo Mediano: ' + context.parsed.y + 'h';
                        }
                    }
                }
            },
            scales: {
                y: {
                    beginAtZero: true,
                    ticks: {
                        callback: function(value) {
                            return value + 'h';
                        }
                    }
                },
                x: {
                    ticks: {
                        maxRotation: 45,
                        font: {
                            size: 10
                        }
                    }
                }
            },
            onClick: (event, elements) => {
                if (elements.length > 0) {
                    const index = elements[0].index;
                    const elevador = String(labels[index]);
                    filtrarPorEquipamento(elevador); {# CORRIGIDO: Chamando filtrarPorEquipamento #}
                }
            },
            onHover: (event, elements) => {
                event.native.target.style.cursor = elements.length > 0 ? 'pointer' : 'default';
            }
        }
    });
}

// FunÃ§ÃƒÂµes de filtro por clique nos grÃƒÂ¡ficos
function filtrarPorMes(mesAno) {
    console.log('Ã°Å¸â€œâ€¦ Filtrando por mÃƒÂªs:', mesAno);
    // Para filtro por mÃƒÂªs, precisamos ajustar data_inicio e data_fim
    const [ano, mes] = mesAno.split('-');
    const dataInicioMes = `${ano}-${mes}-01`;
    const ultimoDiaMes = new Date(ano, parseInt(mes), 0).getDate();
    const dataFimMes = `${ano}-${mes}-${ultimoDiaMes}`;

    document.getElementById('data-inicio').value = dataInicioMes;
    document.getElementById('data-fim').value = dataFimMes;
    document.getElementById('filtro-periodo').value = ''; // Limpa perÃƒÂ­odo predefinido

    filtrosAtivos.data_inicio = dataInicioMes;
    filtrosAtivos.data_fim = dataFimMes;
    delete filtrosAtivos.periodo_predefinido;
    delete filtrosAtivos.mes; // Remove filtro de mÃƒÂªs para evitar conflito

    aplicarFiltrosInterativos();
}

function filtrarPorCategoria(categoria) {
    console.log('Ã°Å¸ÂÂ·Ã¯Â¸Â Filtrando por categoria:', categoria);
    document.getElementById('filtro-categoria').value = categoria;
    filtrosAtivos.categoria = categoria;
    aplicarFiltrosInterativos();
}

function filtrarPorEdificio(edificio) {
    console.log('Ã°Å¸ÂÂ¢ Filtrando por edifÃƒÂ­cio:', edificio);
    document.getElementById('filtro-edificio').value = edificio;
    filtrosAtivos.edificio = edificio;
    aplicarFiltrosInterativos();
}

// NOVO: Filtrar por elevador especÃƒÂ­fico (equipamento)
function filtrarPorEquipamento(equipamento) {
    console.log('Ã°Å¸Ââ€”Ã¯Â¸Â Filtrando por equipamento:', equipamento);
    document.getElementById('filtro-equipamento').value = equipamento;
    filtrosAtivos.equipamento = equipamento;
    aplicarFiltrosInterativos();
}

function aplicarFiltros() {
    const dataInicio = document.getElementById('data-inicio').value;
    const dataFim = document.getElementById('data-fim').value;
    const periodo = document.getElementById('filtro-periodo').value;
    const status = document.getElementById('filtro-status').value;
    const categoria = document.getElementById('filtro-categoria').value;
    const edificio = document.getElementById('filtro-edificio').value;
    const equipamento = document.getElementById('filtro-equipamento').value; {# NOVO #}
    
    console.log('Ã°Å¸â€Â Aplicando filtros:', {
        dataInicio, dataFim, periodo, status, categoria, edificio, equipamento
    });
    
    // Ã°Å¸â€œâ€¦ VALIDAÃƒâ€¡ÃƒÆ’O DE DATAS
    if (dataInicio && dataFim && new Date(dataInicio) > new Date(dataFim)) {
        alert('A data de inÃƒÂ­cio nÃ£o pode ser posterior ÃƒÂ  data de fim.');
        return;
    }
    
    // MAPEAMENTO CORRETO DOS PARÃƒâ€šMETROS
    filtrosAtivos = {
        data_inicio: dataInicio,
        data_fim: dataFim,
        periodo_predefinido: periodo,
        status: status,
        categoria: categoria,
        edificio: edificio,
        equipamento: equipamento {# NOVO #}
    };
    
    // Remove filtros vazios
    Object.keys(filtrosAtivos).forEach(key => {
        if (!filtrosAtivos[key]) {
            delete filtrosAtivos[key];
        }
    });
    
    console.log('Ã°Å¸â€Â§ Filtros ativos apÃƒÂ³s limpeza:', filtrosAtivos);
    
    aplicarFiltrosInterativos();
}

function aplicarFiltrosInterativos() {
    console.log('Ã°Å¸â€Â Aplicando filtros interativos:', filtrosAtivos);
    
    // Monta parÃƒÂ¢metros para API
    const params = new URLSearchParams();
    Object.keys(filtrosAtivos).forEach(key => {
        if (filtrosAtivos[key]) {
            params.append(key, filtrosAtivos[key]);
        }
    });
    
    // Mostra loading
    const loadingElement = document.getElementById('loading-resumo');
    if (loadingElement) loadingElement.style.display = 'block';
    
    // Faz requisiÃ§Ã£o para API
    fetch('/api/kpis-filtrados?' + params.toString())
        .then(response => {
            if (!response.ok) {
                // Se a resposta nÃ£o for 2xx, tenta ler como JSON de erro
                return response.json().then(errorData => {
                    throw new Error(errorData.message || 'Erro na API');
                });
            }
            return response.json();
        })
        .then(data => {
            if (loadingElement) loadingElement.style.display = 'none';
            
            if (data.success) {
                // Atualiza dados filtrados
                dadosKPIsFiltrados = data.metricas;
                
                // Atualiza cards
                atualizarCards(data.metricas);
                
                // Recria grÃƒÂ¡ficos
                criarGraficos();
                
                // Mostra indicador de filtros ativos
                mostrarFiltrosAtivos();
                
                // Atualiza tabela de resumo
                atualizarTabelaResumo(data.resumo);
            } else {
                alert('Erro ao aplicar filtros: ' + (data.message || 'Erro desconhecido.'));
                console.error('API Error:', data);
            }
        })
        .catch(error => {
            if (loadingElement) loadingElement.style.display = 'none';
            console.error('Ã¢ÂÅ’ Erro ao aplicar filtros:', error);
            alert('Erro na requisiÃ§Ã£o de filtros: ' + error.message + '. Verifique o console para mais detalhes.');
        });
}

function atualizarCards(metricas) {
    document.getElementById('total-chamados').textContent = metricas.total_chamados || 0;
    document.getElementById('chamados-concluidos').textContent = metricas.chamados_concluidos || 0;
    document.getElementById('tempo-mediano').textContent = (metricas.tempo_mediano_reparo || 0).toFixed(1) + 'h';
    document.getElementById('disponibilidade').textContent = (metricas.disponibilidade || 0).toFixed(1) + '%';
}

function mostrarFiltrosAtivos() {
    const filtrosAtivosDiv = document.getElementById('filtros-ativos');
    const descricaoFiltros = document.getElementById('descricao-filtros');
    
    const filtrosTexto = [];
    
    // MELHORIA: DescriÃ§Ã£o mais clara dos filtros
    const dataInicio = document.getElementById('data-inicio').value;
    const dataFim = document.getElementById('data-fim').value;
    const periodo = document.getElementById('filtro-periodo').value;
    
    if (dataInicio || dataFim) {
        let textoData = 'PerÃƒÂ­odo: ';
        if (dataInicio && dataFim) {
            textoData += `${dataInicio} a ${dataFim}`;
        } else if (dataInicio) {
            textoData += `a partir de ${dataInicio}`;
        } else {
            textoData += `atÃƒÂ© ${dataFim}`;
        }
        filtrosTexto.push(textoData);
    } else if (periodo) {
        const periodos = {
            'ultima-semana': 'ÃƒÅ¡ltima Semana',
            'ultimo-mes': 'ÃƒÅ¡ltimo MÃƒÂªs',
            'ultimos-3-meses': 'ÃƒÅ¡ltimos 3 Meses',
            'ultimos-6-meses': 'ÃƒÅ¡ltimos 6 Meses',
            'ultimo-ano': 'ÃƒÅ¡ltimo Ano',
            'ultimos-2-anos': 'ÃƒÅ¡ltimos 2 Anos',
            'ultimos-5-anos': 'ÃƒÅ¡ltimos 5 Anos',
            'todo-periodo': 'Todo o PerÃƒÂ­odo'
        };
        filtrosTexto.push(`PerÃƒÂ­odo: ${periodos[periodo]}`);
    }
    
    Object.keys(filtrosAtivos).forEach(key => {
        if (filtrosAtivos[key] && !['data_inicio', 'data_fim', 'periodo_predefinido'].includes(key)) {
             const nomesFiltros = {
                'equipamento': 'Elevador', // NOVO
                'categoria': 'Categoria',
                'edificio': 'EdifÃƒÂ­cio',
                'status': 'Status'
            };
            const nomeAmigavel = nomesFiltros[key] || key;
            filtrosTexto.push(`${nomeAmigavel}: ${filtrosAtivos[key]}`);
        }
    });
    
    if (filtrosTexto.length > 0) {
        descricaoFiltros.textContent = filtrosTexto.join(' | ');
        filtrosAtivosDiv.style.display = 'block';
    } else {
        filtrosAtivosDiv.style.display = 'none';
    }
}

function atualizarTabelaResumo(resumo) {
    const container = document.getElementById('tabela-resumo');
    if (!resumo || resumo.length === 0) {
        container.innerHTML = '<p class="text-muted text-center">Nenhum dado encontrado com os filtros aplicados.</p>';
        return;
    }
    
    let html = `
        <div class="table-responsive">
            <table class="table table-striped table-hover">
                <thead class="table-dark">
                    <tr>
                        <th>Categoria</th>
                        <th>EdifÃƒÂ­cio</th>
                        <th>Equipamento</th> {# NOVO: Coluna adicionada #}
                        <th>Status</th>
                        <th>Data SolicitaÃ§Ã£o</th>
                        <th>Tempo Reparo (h)</th>
                    </tr>
                </thead>
                <tbody>
    `;
    
    resumo.slice(0, 20).forEach(item => { // Mostra apenas os primeiros 20
        html += `
            <tr>
                <td><span class="badge bg-secondary">${item.categoria_problema}</span></td>
                <td>${item.edificio}</td>
                <td>${item.equipamento || '-'}</td> {# NOVO: Dados do equipamento #}
                <td><span class="badge ${item.status === 'ConcluÃƒÂ­da' ? 'bg-success' : 'bg-warning'}">${item.status}</span></td>
                <td>${item.data_solicitacao}</td>
                <td>${item.tempo_reparo_horas ? item.tempo_reparo_horas.toFixed(1) : '-'}</td> {# CORRIGIDO: Usar tempo_reparo_horas #}
            </tr>
        `;
    });
    
    html += `
                </tbody>
            </table>
        </div>
        ${resumo.length > 20 ? `<p class="text-muted text-center">Mostrando 20 de ${resumo.length} registros</p>` : ''}
    `;
    
    container.innerHTML = html;
}

function limparFiltrosKPIs() {
    // Ã°Å¸â€œâ€¦ LIMPA TODOS OS FILTROS (incluindo datas)
    document.getElementById('data-inicio').value = '';
    document.getElementById('data-fim').value = '';
    document.getElementById('filtro-periodo').value = '';
    document.getElementById('filtro-status').value = '';
    document.getElementById('filtro-categoria').value = '';
    document.getElementById('filtro-edificio').value = '';
    document.getElementById('filtro-equipamento').value = ''; {# NOVO #}
    
    // Limpa filtros ativos
    filtrosAtivos = {};
    
    // Restaura dados originais
    dadosKPIsFiltrados = dadosKPIsOriginais;
    
    // Atualiza cards
    atualizarCards(dadosKPIsOriginais);
    
    // Recria grÃƒÂ¡ficos
    criarGraficos();
    
    // Esconde indicador de filtros
    document.getElementById('filtros-ativos').style.display = 'none';
    
    // Limpa tabela de resumo
    document.getElementById('tabela-resumo').innerHTML = '<p class="text-muted text-center">Use os filtros acima ou clique nos grÃƒÂ¡ficos para ver dados especÃƒÂ­ficos.</p>';
    
    console.log('Ã°Å¸Â§Â¹ Filtros de KPIs limpos');
}

function atualizarDados() {
    const btn = event.target;
    const originalText = btn.innerHTML;
    btn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Atualizando...';
    btn.disabled = true;
    
    // Chamada para a API do Blueprint de KPIs para atualizar o cache
    fetch('/v2/kpis/atualizar-kpis', { method: 'POST' })
        .then(response => {
            if (!response.ok) {
                return response.json().then(errorData => {
                    throw new Error(errorData.message || 'Erro na API');
                });
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                alert('Dados de KPIs atualizados!\n' + data.message);
                // ApÃƒÂ³s atualizar o cache, recarregar a pÃƒÂ¡gina para buscar os novos dados
                location.reload(); 
            } else {
                alert('Erro ao atualizar KPIs: ' + data.message);
            }
        })
        .catch(error => alert('Erro na requisiÃ§Ã£o de atualizaÃ§Ã£o de KPIs: ' + error.message))
        .finally(() => {
            btn.innerHTML = originalText;
            btn.disabled = false;
        });
}

function debugFiltros() {
    console.log('Ã°Å¸â€Â DEBUG - Estado atual dos filtros:');
    console.log('   Data inÃƒÂ­cio:', document.getElementById('data-inicio').value);
    console.log('   Data fim:', document.getElementById('data-fim').value);
    console.log('   PerÃƒÂ­odo:', document.getElementById('filtro-periodo').value);
    console.log('   Status:', document.getElementById('filtro-status').value);
    console.log('   Categoria:', document.getElementById('filtro-categoria').value);
    console.log('   EdifÃƒÂ­cio:', document.getElementById('filtro-edificio').value);
    console.log('   Equipamento:', document.getElementById('filtro-equipamento').value);
    console.log('   Filtros ativos:', filtrosAtivos);
    console.log('   Dados originais:', dadosKPIsOriginais);
    console.log('   Dados filtrados:', dadosKPIsFiltrados);
}

</script>
{% endblock %}
--- Fim do código: kpis.html ---

--- Início do código: base.html ---
<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{% block title %}Sistema de Elevadores - TJ/MG{% endblock %}</title>
    
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <!-- CSS customizado -->
    <link rel="stylesheet" href="{{ url_for('static', filename='css/style.css') }}">
    
    {% block extra_head %}{% endblock %}
</head>
<body>
    <nav class="navbar navbar-expand-lg navbar-dark bg-primary">
        <div class="container">
            <a class="navbar-brand" href="{{ url_for('dashboard.index') }}">
                <i class="fas fa-building"></i> TJ/MG - Elevadores
            </a>
            
            <div class="navbar-nav ms-auto d-flex align-items-center">
                <a class="nav-link" href="{{ url_for('dashboard.index') }}">
                    <i class="fas fa-home"></i> Dashboard
                </a>
                <!-- Ã°Å¸â€ â€¢ NOVO BOTÃƒÆ’O KPIs -->
                <a class="nav-link" href="{{ url_for('kpis.index') }}">
                    <i class="fas fa-chart-line"></i> KPIs
                </a>
                <button class="btn btn-outline-light btn-sm ms-2" onclick="atualizarDados()">
                    <i class="fas fa-sync-alt"></i> Atualizar
                </button>
                
                <!-- InformaÃ§ÃƒÂµes do usuÃƒÂ¡rio logado -->
                {% if usuario_logado %}
                <div class="nav-item dropdown ms-3">
                    <a class="nav-link dropdown-toggle d-flex align-items-center" href="#" id="userDropdown" role="button" data-bs-toggle="dropdown">
                        <i class="fas fa-user-circle me-2"></i>
                        <span>{{ usuario_logado }}</span>
                    </a>
                    <ul class="dropdown-menu dropdown-menu-end">
                        <li>
                            <span class="dropdown-item-text">
                                <small class="text-muted">
                                    <i class="fas fa-clock"></i> 
                                    Logado desde {{ login_timestamp[:19] if login_timestamp else 'N/A' }}
                                </small>
                            </span>
                        </li>
                        <li><hr class="dropdown-divider"></li>
                        <li>
                            <a class="dropdown-item text-danger" href="{{ url_for('auth.logout') }}">
                                <i class="fas fa-sign-out-alt"></i> Sair
                            </a>
                        </li>
                    </ul>
                </div>
                {% endif %}
            </div>
        </div>
    </nav>

    <!-- Mensagens Flash -->
    {% with messages = get_flashed_messages(with_categories=true) %}
        {% if messages %}
            <div class="container mt-3">
                {% for category, message in messages %}
                    <div class="alert alert-{{ 'danger' if category == 'danger' else 'warning' if category == 'warning' else 'info' if category == 'info' else 'success' }} alert-dismissible fade show" role="alert">
                        <i class="fas fa-{{ 'exclamation-triangle' if category in ['danger', 'warning'] else 'info-circle' if category == 'info' else 'check-circle' }}"></i>
                        {{ message }}
                        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                    </div>
                {% endfor %}
            </div>
        {% endif %}
    {% endwith %}

    <!-- ConteÃƒÂºdo principal -->
    <main class="container-fluid mt-4">
        {% block content %}{% endblock %}
    </main>

    <!-- Footer -->
    <footer class="bg-light text-center py-3 mt-5">
        <div class="container">
            <small class="text-muted">
                Sistema de Mapeamento de Elevadores - Tribunal de JustiÃ§a de Minas Gerais
                {% if usuario_logado %}
                    | UsuÃƒÂ¡rio: {{ usuario_logado }}
                {% endif %}
            </small>
        </div>
    </footer>

    <!-- Bootstrap JS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <!-- jQuery -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    
    <!-- Ã°Å¸â€ â€¢ JAVASCRIPT GLOBAL PARA FUNÃƒâ€¡ÃƒÆ’O ATUALIZAR -->
    <script>
    function atualizarDados() {
        const btn = event.target;
        const originalText = btn.innerHTML;
        btn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Atualizando...';
        btn.disabled = true;
        
        // Verifica se estamos na pÃƒÂ¡gina de KPIs
        const isKPIsPage = window.location.pathname === '/kpis';
        const endpoint = isKPIsPage ? '/atualizar-kpis' : '/atualizar';
        const tipoAtualizacao = isKPIsPage ? 'KPIs' : 'Dados';
        
        console.log(`Ã°Å¸â€â€ž Atualizando ${tipoAtualizacao} via ${endpoint}`);
        
        fetch(endpoint)
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert(`${tipoAtualizacao} atualizados com sucesso!\n\n${data.message}`);
                    location.reload();
                } else {
                    alert(`Erro ao atualizar ${tipoAtualizacao}:\n${data.message}`);
                }
            })
            .catch(error => {
                console.error('Ã¢ÂÅ’ Erro na requisiÃ§Ã£o:', error);
                alert(`Erro na requisiÃ§Ã£o de ${tipoAtualizacao}. Verifique a conexÃ£o.`);
            })
            .finally(() => {
                btn.innerHTML = originalText;
                btn.disabled = false;
            });
    }
    </script>
    
    {% block extra_scripts %}{% endblock %}
</body>
</html>
--- Fim do código: base.html ---

--- Início do código: index_nativo.html ---
{% extends "base.html" %}

{% block title %}Dashboard - Sistema de Elevadores TJ/MG{% endblock %}

{% block extra_head %}
<!-- Leaflet CSS -->
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
{% endblock %}

{% block content %}
<div class="row">
    <div class="col-12">
        <h1 class="mb-4">
            <i class="fas fa-building"></i> 
            Sistema de Mapeamento de Elevadores - TJ/MG
        </h1>
    </div>
</div>

{% if erro %}
    <div class="alert alert-danger" role="alert">
        <i class="fas fa-exclamation-triangle"></i> {{ erro }}
    </div>
{% else %}
    <!-- Cards de EstatÃƒÂ­sticas -->
    <div class="row mb-4 stats-row" id="stats-cards">
        <div class="col-md-2">
            <div class="card bg-primary text-white">
                <div class="card-body text-center">
                    <i class="fas fa-building fa-2x mb-2"></i>
                    <h3 id="stat-predios">{{ stats.total_predios }}</h3>
                    <p class="mb-0">PrÃƒÂ©dios</p>
                </div>
            </div>
        </div>
        
        <div class="col-md-2">
            <div class="card bg-success text-white">
                <div class="card-body text-center">
                    <i class="fas fa-elevator fa-2x mb-2"></i>
                    <h3 id="stat-elevadores">{{ stats.total_elevadores }}</h3>
                    <p class="mb-0">Elevadores</p>
                </div>
            </div>
        </div>
        
        <div class="col-md-2">
            <div class="card bg-info text-white">
                <div class="card-body text-center">
                    <i class="fas fa-map-marker-alt fa-2x mb-2"></i>
                    <h3 id="stat-cidades">{{ stats.cidades }}</h3>
                    <p class="mb-0">Cidades</p>
                </div>
            </div>
        </div>
        
        <div class="col-md-2">
            <div class="card bg-secondary text-white">
                <div class="card-body text-center">
                    <i class="fas fa-map fa-2x mb-2"></i>
                    <h3 id="stat-regioes">{{ stats.regioes }}</h3>
                    <p class="mb-0">RegiÃƒÂµes</p>
                </div>
            </div>
        </div>
        
        <div class="col-md-2">
            <div class="card bg-success text-white">
                <div class="card-body text-center">
                    <i class="fas fa-check-circle fa-2x mb-2"></i>
                    <h3 id="stat-ativos">{{ stats.em_atividade }}</h3>
                    <p class="mb-0">Ativos</p>
                </div>
            </div>
        </div>
        
        <div class="col-md-2">
            <div class="card bg-warning text-white">
                <div class="card-body text-center">
                    <i class="fas fa-times-circle fa-2x mb-2"></i>
                    <h3 id="stat-suspensos">{{ stats.suspensos }}</h3>
                    <p class="mb-0">Suspensos</p>
                </div>
            </div>
        </div>

        <div class="col-md-2">
            <div class="card bg-danger text-white">
                 <div class="card-body text-center">
                    <i class="fas fa-exclamation-triangle fa-2x mb-2"></i>
                     <h3 id="stat-parados">{{ stats.elevadores_parados }}</h3>
                     <p class="mb-0">Parados</p>
                 </div>
            </div>
        </div>
    </div>

    <!-- Mapa Nativo -->
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5><i class="fas fa-map"></i> Mapa Interativo com Filtros</h5>
                    <button class="btn btn-info btn-sm" onclick="atualizarDados()">
                        <i class="fas fa-sync-alt"></i> Atualizar Dados
                    </button>
                </div>
                <div class="card-body p-0" style="position: relative; height: 600px;">
                    <!-- Container do mapa -->
                    <div id="mapa" style="width: 100%; height: 100%;"></div>
                    
                    <!-- Filtros posicionados sobre o mapa -->
                    <div id="filtros-container" style="
                        position: absolute;
                        top: 10px;
                        left: 10px;
                        background: white;
                        padding: 15px;
                        border-radius: 8px;
                        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
                        z-index: 1000;
                        max-width: 300px;
                        max-height: 550px;
                        overflow-y: auto;
                        font-family: Arial, sans-serif;
                        font-size: 14px;
                    ">
                        <h5 style="margin: 0 0 15px 0; color: #333; text-align: center;">Ã°Å¸â€Â Filtros</h5>

                        <!-- Contador -->
                        <div id="contador-resultados" style="
                            background: #e8f4fd;
                            padding: 10px;
                            border-radius: 6px;
                            margin-bottom: 15px;
                            text-align: center;
                            font-weight: bold;
                            color: #1976d2;
                            border: 2px solid #bbdefb;
                        ">
                            <div>Ã°Å¸â€œÅ  <span id="total-elevadores-filtro">{{ stats.total_elevadores }}</span> elevadores</div>
                            <div style="font-size: 12px; margin-top: 3px;">
                                em <span id="total-locais-filtro">{{ stats.total_predios }}</span> locais
                            </div>
                        </div>

                        <!-- BotÃƒÂµes -->
                        <div style="display: flex; gap: 5px; margin-bottom: 15px;">
                            <button onclick="selecionarTodos()" style="
                                flex: 1; padding: 6px; background: #4caf50; color: white;
                                border: none; border-radius: 4px; cursor: pointer;
                                font-size: 12px; font-weight: bold;
                            ">Ã¢Å“â€¦ Todos</button>
                            <button onclick="limparFiltros()" style="
                                flex: 1; padding: 6px; background: #f44336; color: white;
                                border: none; border-radius: 4px; cursor: pointer;
                                font-size: 12px; font-weight: bold;
                            ">Ã°Å¸â€”â€˜Ã¯Â¸Â Limpar</button>
                        </div>

                        <!-- Filtro por Tipo -->
                        <div style="margin-bottom: 15px; border: 1px solid #e0e0e0; border-radius: 6px; padding: 10px;">
                            <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 8px;">
                                <label style="font-weight: bold; color: #555;">Ã°Å¸â€œâ€¹ Tipo</label>
                                <button onclick="toggleCategoria('tipo')" style="background: none; border: none; font-size: 16px; cursor: pointer; color: #666;" id="toggle-tipo">Ã¢Å¾â€“</button>
                            </div>
                            <div id="filtros-tipo" style="max-height: 100px; overflow-y: auto;">
                                {% for tipo in tipos_unicos %}
                                <div style="margin: 5px 0; display: flex; align-items: center;">
                                    <input type="checkbox" id="check-tipo-{{ loop.index }}" value="{{ tipo }}" 
                                           onchange="aplicarFiltros()" style="margin-right: 8px;">
                                    <label for="check-tipo-{{ loop.index }}" style="cursor: pointer; flex: 1; font-size: 13px;">
                                        {{ tipo }}
                                    </label>
                                </div>
                                {% endfor %}
                            </div>
                        </div>

                        <!-- Filtro por RegiÃ£o -->
                        <div style="margin-bottom: 15px; border: 1px solid #e0e0e0; border-radius: 6px; padding: 10px;">
                            <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 8px;">
                                <label style="font-weight: bold; color: #555;">Ã°Å¸â€”ÂºÃ¯Â¸Â RegiÃ£o</label>
                                <button onclick="toggleCategoria('regiao')" style="background: none; border: none; font-size: 16px; cursor: pointer; color: #666;" id="toggle-regiao">Ã¢Å¾â€“</button>
                            </div>
                            <div id="filtros-regiao" style="max-height: 100px; overflow-y: auto;">
                                {% for regiao in regioes_unicas %}
                                <div style="margin: 5px 0; display: flex; align-items: center;">
                                    <input type="checkbox" id="check-regiao-{{ loop.index }}" value="{{ regiao }}" 
                                           onchange="aplicarFiltros()" style="margin-right: 8px;">
                                    <label for="check-regiao-{{ loop.index }}" style="cursor: pointer; flex: 1; font-size: 13px;">
                                        {{ regiao }}
                                    </label>
                                </div>
                                {% endfor %}
                            </div>
                        </div>

                        <!-- Filtro por Marca -->
                        <div style="margin-bottom: 15px; border: 1px solid #e0e0e0; border-radius: 6px; padding: 10px;">
                            <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 8px;">
                                <label style="font-weight: bold; color: #555;">Ã°Å¸ÂÂ­ Marca</label>
                                <button onclick="toggleCategoria('marca')" style="background: none; border: none; font-size: 16px; cursor: pointer; color: #666;" id="toggle-marca">Ã¢Å¾â€“</button>
                            </div>
                            <div id="filtros-marca" style="max-height: 100px; overflow-y: auto;">
                                {% for marca in marcas_unicas %}
                                <div style="margin: 5px 0; display: flex; align-items: center;">
                                    <input type="checkbox" id="check-marca-{{ loop.index }}" value="{{ marca }}" 
                                           onchange="aplicarFiltros()" style="margin-right: 8px;">
                                    <label for="check-marca-{{ loop.index }}" style="cursor: pointer; flex: 1; font-size: 13px;">
                                        {{ marca }}
                                    </label>
                                </div>
                                {% endfor %}
                            </div>
                        </div>

                        <!-- Filtro por Empresa -->
                        {% if empresas_unicas %}
                        <div style="margin-bottom: 15px; border: 1px solid #e0e0e0; border-radius: 6px; padding: 10px;">
                            <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 8px;">
                                <label style="font-weight: bold; color: #555;">Ã°Å¸ÂÂ¢ Empresa</label>
                                <button onclick="toggleCategoria('empresa')" style="background: none; border: none; font-size: 16px; cursor: pointer; color: #666;" id="toggle-empresa">Ã¢Å¾â€“</button>
                            </div>
                            <div id="filtros-empresa" style="max-height: 100px; overflow-y: auto;">
                                {% for empresa in empresas_unicas %}
                                <div style="margin: 5px 0; display: flex; align-items: center;">
                                    <input type="checkbox" id="check-empresa-{{ loop.index }}" value="{{ empresa }}" 
                                           onchange="aplicarFiltros()" style="margin-right: 8px;">
                                    <label for="check-empresa-{{ loop.index }}" style="cursor: pointer; flex: 1; font-size: 13px;">
                                        {{ empresa }}
                                    </label>
                                </div>
                                {% endfor %}
                            </div>
                        </div>
                        {% endif %}
                        <!-- Filtro por SituaÃ§Ã£o -->
                        <div style="margin-bottom: 15px; border: 1px solid #e0e0e0; border-radius: 6px; padding: 10px;">
                            <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 8px;">
                                <label style="font-weight: bold; color: #555;">Ã¢Å¡Â¡ SituaÃ§Ã£o</label>
                                <button onclick="toggleCategoria('situacao')" style="background: none; border: none; font-size: 16px; cursor: pointer; color: #666;" id="toggle-situacao">Ã¢Å¾â€“</button>
                            </div>
                            <div id="filtros-situacao" style="max-height: 100px; overflow-y: auto;">
                                <div style="margin: 5px 0; display: flex; align-items: center;">
                                    <input type="checkbox" id="check-situacao-1" value="ativos" 
                                           onchange="aplicarFiltros()" style="margin-right: 8px;">
                                    <label for="check-situacao-1" style="cursor: pointer; flex: 1; font-size: 13px;">
                                        Ã°Å¸Å¸Â¢ Elevadores Ativos
                                    </label>
                                </div>
                                <div style="margin: 5px 0; display: flex; align-items: center;">
                                    <input type="checkbox" id="check-situacao-2" value="suspensos" 
                                           onchange="aplicarFiltros()" style="margin-right: 8px;">
                                    <label for="check-situacao-2" style="cursor: pointer; flex: 1; font-size: 13px;">
                                        Ã°Å¸Å¸Â¡ Elevadores Suspensos
                                    </label>
                                </div>
                                <div style="margin: 5px 0; display: flex; align-items: center;">
                                    <input type="checkbox" id="check-situacao-3" value="parados" 
                                           onchange="aplicarFiltros()" style="margin-right: 8px;">
                                    <label for="check-situacao-3" style="cursor: pointer; flex: 1; font-size: 13px;">
                                        Ã°Å¸â€Â´ Elevadores Parados
                                    </label>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- EstatÃƒÂ­sticas Detalhadas -->
    <div class="row mt-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5><i class="fas fa-chart-bar"></i> EstatÃƒÂ­sticas Detalhadas</h5>
                </div>
                <div class="card-body">
                    <div id="loading-stats" class="text-center" style="display: none;">
                        <i class="fas fa-spinner fa-spin"></i> Atualizando estatÃƒÂ­sticas...
                    </div>
                    <div id="stats-detalhadas">
                        <p class="text-muted">Use os filtros no mapa para ver estatÃƒÂ­sticas especÃƒÂ­ficas.</p>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Elevadores Parados -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5><i class="fas fa-exclamation-triangle text-danger"></i> Elevadores Parados</h5>
                    <span id="badge-total-parados" class="badge bg-danger">0</span>
                </div>
                <div class="card-body">
                    <div id="loading-elevadores-parados" class="text-center" style="display: none;">
                        <i class="fas fa-spinner fa-spin"></i> Carregando elevadores parados...
                    </div>
                    <div id="lista-elevadores-parados">
                        <p class="text-muted text-center">
                            <i class="fas fa-info-circle"></i> 
                            Use os filtros no mapa para ver elevadores parados especÃƒÂ­ficos ou carregue a pÃƒÂ¡gina para ver todos.
                        </p>
                    </div>
                </div>
            </div>
        </div>
    </div>
{% endif %}

<!-- Leaflet JS -->
<script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>

<script>
// Dados para JavaScript
const dadosOriginais = {{ geojson_data|safe }};
let dadosFiltrados = dadosOriginais;
let mapa = null;
let layerGroup = null;

console.log('Ã°Å¸Å¡â‚¬ Inicializando mapa nativo...');
console.log('Ã°Å¸â€œÅ  Dados recebidos:', dadosOriginais);

// Armazena valores originais dos stats
window.statsOriginais = {
    'stat-predios': {{ stats.total_predios }},
    'stat-elevadores': {{ stats.total_elevadores }},
    'stat-cidades': {{ stats.cidades }},
    'stat-regioes': {{ stats.regioes }},
    'stat-ativos': {{ stats.em_atividade }},
    'stat-suspensos': {{ stats.suspensos }},
    'stat-parados': {{ stats.elevadores_parados }}
};

// Inicializa o mapa quando a pÃƒÂ¡gina carrega
document.addEventListener('DOMContentLoaded', function() {
    console.log('Ã°Å¸â€œâ€ž DOM carregado, criando mapa...');
    
    // Cria o mapa
    mapa = L.map('mapa').setView([-19.92, -43.92], 6);
    
    // Adiciona tile layer
    L.tileLayer('https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}{r}.png', {
        attribution: 'Ã‚Â© OpenStreetMap contributors, Ã‚Â© CartoDB',
        maxZoom: 19
    }).addTo(mapa);
    
    // Cria grupo de camadas para os marcadores
    layerGroup = L.layerGroup().addTo(mapa);
    
    console.log('Ã¢Å“â€¦ Mapa criado com sucesso!');
    
    // Adiciona marcadores iniciais
    adicionarMarcadores(dadosOriginais);
    carregarElevadoresParadosIniciais();
});

// FunÃ§Ã£o para adicionar marcadores
function adicionarMarcadores(geojson) {
    if (!geojson.features || !layerGroup) {
        console.log('Ã¢Å¡Â Ã¯Â¸Â Sem features ou layerGroup para adicionar');
        return;
    }
    
    console.log(`Ã¢Å¾â€¢ Adicionando ${geojson.features.length} marcadores...`);
    
    geojson.features.forEach((feature, index) => {
        const props = feature.properties;
        const coords = feature.geometry.coordinates;
        const latlng = [coords[1], coords[0]]; // Leaflet usa [lat, lng]
        
        // Ã°Å¸Å½Â¨ NOVA LÃƒâ€œGICA DE CORES - PRIORIDADE: Parados > Suspensos > Ativos
        let cor = '#6c757d'; // Cinza padrÃ£o
        
        if (props.temElevadorParado || (props.nElevadorParado && props.nElevadorParado > 0)) {
            cor = '#dc3545'; // Ã°Å¸â€Â´ Vermelho para elevadores parados
        } else if (props.status && props.status.toLowerCase().includes('suspenso')) {
            cor = '#ffc107'; // Ã°Å¸Å¸Â¡ Amarelo para suspensos  
        } else if (props.status && props.status.toLowerCase().includes('atividade')) {
            cor = '#28a745'; // Ã°Å¸Å¸Â¢ Verde para ativos
        }
        
        // Define tamanho baseado na quantidade
        const radius = props.qtd_elev >= 5 ? 8 : (props.qtd_elev >= 3 ? 6 : 4);
        
        // Cria o marcador
        const marker = L.circleMarker(latlng, {
            radius: radius,
            fillColor: cor,
            color: cor,
            weight: 2,
            opacity: 1,
            fillOpacity: 0.8
        });
        
        // Ã°Å¸â€œÂ TOOLTIP ATUALIZADO
        let tooltipText = `${props.cidade} - ${props.tipo}<br/>
            ${props.qtd_elev} elevadores - ${props.marcaLicitacao}<br/>
            ${props.regiao} - ${props.status}`;
        
        if (props.nElevadorParado && props.nElevadorParado > 0) {
            tooltipText += `<br/><strong style="color: #dc3545;">Ã¢Å¡Â Ã¯Â¸Â ${props.nElevadorParado} parado(s)</strong>`;
        }
        
        marker.bindTooltip(tooltipText, {sticky: true});
        
        // Ã°Å¸â€œÂ POPUP ATUALIZADO
        let popupContent = `<div style="font-family: Arial, sans-serif;">
                <h4 style="margin: 0 0 10px 0; color: #333;">${props.unidade}</h4>
                <p><strong>Cidade:</strong> ${props.cidade}</p>
                <p><strong>EndereÃ§o:</strong> ${props.endereco}</p>
                <p><strong>Tipo:</strong> ${props.tipo}</p>
                <p><strong>Elevadores:</strong> ${props.qtd_elev}</p>
                <p><strong>Paradas:</strong> ${props.paradas}</p>
                <p><strong>Marca:</strong> ${props.marca}</p>
                <p><strong>Empresa:</strong> ${props.empresa}</p>
                <p><strong>Status:</strong> ${props.status}</p>`;
        
        // Ã°Å¸â€ â€¢ ADICIONA INFORMAÃƒâ€¡Ãƒâ€¢ES DE ELEVADORES PARADOS
        if (props.nElevadorParado && props.nElevadorParado > 0) {
            popupContent += `
                <hr style="margin: 10px 0;">
                <p style="color: #dc3545;"><strong>Ã¢Å¡Â Ã¯Â¸Â Elevadores Parados:</strong> ${props.nElevadorParado}</p>`;
        }
        if ((props.nElevadorParado && props.nElevadorParado > 0) || props.status && props.status.toLowerCase().includes('suspenso')) {    
            if (props.dataDeParada) {
                popupContent += `<p style="color: #dc3545;"><strong>Ã°Å¸â€œâ€¦ Data da Parada:</strong> ${props.dataDeParada}</p>`;
            }
            
            if (props.previsaoDeRetorno) {
                popupContent += `<p style="color: #dc3545;"><strong>Ã°Å¸â€â€ž PrevisÃ£o de Retorno:</strong> ${props.previsaoDeRetorno}</p>`;
            }
        }
        
        popupContent += '</div>';
        
        marker.bindPopup(popupContent, {maxWidth: 350});
        
        // Adiciona ao grupo de camadas
        layerGroup.addLayer(marker);
        
        if (index < 3) {
            console.log(`Ã¢Å“â€¦ Marcador ${index + 1} adicionado: ${props.unidade} (Cor: ${cor})`);
        }
    });
    
    console.log(`Ã°Å¸Å½â€° ${geojson.features.length} marcadores adicionados com sucesso!`);
}

// FunÃ§Ã£o para obter valores selecionados
function obterSelecionados(categoria) {
    const checkboxes = document.querySelectorAll(`input[id^="check-${categoria}-"]:checked`);
    const valores = Array.from(checkboxes).map(cb => cb.value);
    console.log(`Ã°Å¸â€Â Filtros selecionados para ${categoria}:`, valores);
    return valores;
}

// FunÃ§Ã£o para aplicar filtros
// FunÃ§Ã£o para aplicar filtros - COM SITUAÃƒâ€¡ÃƒÆ’O
function aplicarFiltros() {
    console.log('Ã°Å¸Å½Â¯ ========== APLICANDO FILTROS ==========');
    
    const tiposSelecionados = obterSelecionados('tipo');
    const regioesSelecionadas = obterSelecionados('regiao');
    const marcasSelecionadas = obterSelecionados('marca');
    const empresasSelecionadas = obterSelecionados('empresa');
    const situacoesSelecionadas = obterSelecionados('situacao'); // Ã°Å¸â€ â€¢ NOVO FILTRO

    console.log('Ã°Å¸â€œâ€¹ Resumo dos filtros:', {
        tipos: tiposSelecionados,
        regioes: regioesSelecionadas,
        marcas: marcasSelecionadas,
        empresas: empresasSelecionadas,
        situacoes: situacoesSelecionadas // Ã°Å¸â€ â€¢ NOVO
    });

    if (!dadosOriginais || !dadosOriginais.features) {
        console.error('Ã¢ÂÅ’ Dados originais nÃ£o disponÃƒÂ­veis');
        return;
    }

    // Filtra os dados
    const featuresOriginal = dadosOriginais.features.length;
    
    dadosFiltrados = {
        ...dadosOriginais,
        features: dadosOriginais.features.filter(feature => {
            const props = feature.properties;
            
            const passaTipo = tiposSelecionados.length === 0 || tiposSelecionados.includes(props.tipo);
            const passaRegiao = regioesSelecionadas.length === 0 || regioesSelecionadas.includes(props.regiao);
            const passaMarca = marcasSelecionadas.length === 0 || marcasSelecionadas.includes(props.marcaLicitacao);
            const passaEmpresa = empresasSelecionadas.length === 0 || empresasSelecionadas.includes(props.empresa);
            
            // Ã°Å¸â€ â€¢ NOVA LÃƒâ€œGICA DE FILTRO POR SITUAÃƒâ€¡ÃƒÆ’O
            let passaSituacao = true;
            if (situacoesSelecionadas.length > 0) {
                passaSituacao = false;
                
                // Verifica cada situaÃ§Ã£o selecionada
                situacoesSelecionadas.forEach(situacao => {
                    if (situacao === 'ativos') {
                        // Ativos: status ativo E sem elevadores parados
                        if (props.status && props.status.toLowerCase().includes('atividade') && 
                            (!props.nElevadorParado || props.nElevadorParado === 0)) {
                            passaSituacao = true;
                        }
                    } else if (situacao === 'suspensos') {
                        // Suspensos: status suspenso
                        if (props.status && props.status.toLowerCase().includes('suspenso')) {
                            passaSituacao = true;
                        }
                    } else if (situacao === 'parados') {
                        // Parados: tem elevadores parados
                        if (props.nElevadorParado && props.nElevadorParado > 0) {
                            passaSituacao = true;
                        }
                    }
                });
            }
            
            return passaTipo && passaRegiao && passaMarca && passaEmpresa && passaSituacao;
        })
    };

    const featuresFiltradas = dadosFiltrados.features.length;
    console.log(`Ã°Å¸â€œÅ  Filtragem concluÃƒÂ­da: ${featuresOriginal} Ã¢â€ â€™ ${featuresFiltradas} features`);

    // Atualiza o mapa
    atualizarMapa();
    
    // Atualiza contador
    atualizarContadorFiltros();
    
    // Atualiza estatÃƒÂ­sticas
    atualizarEstatisticasDashboard();
    
    console.log('Ã¢Å“â€¦ ========== FILTROS APLICADOS ==========');
}

// FunÃ§Ã£o para atualizar o mapa
function atualizarMapa() {
    console.log('Ã°Å¸â€”ÂºÃ¯Â¸Â ========== ATUALIZANDO MAPA ==========');
    
    if (!layerGroup) {
        console.error('Ã¢ÂÅ’ LayerGroup nÃ£o disponÃƒÂ­vel');
        return;
    }

    // Limpa todos os marcadores
    layerGroup.clearLayers();
    console.log('Ã°Å¸Â§Â¹ Marcadores removidos');

    // Adiciona novos marcadores filtrados
    adicionarMarcadores(dadosFiltrados);
    
    console.log('Ã¢Å“â€¦ ========== MAPA ATUALIZADO ==========');
}

// FunÃ§Ã£o para atualizar contador
function atualizarContadorFiltros() {
    if (!dadosFiltrados.features) return;
    
    const totalElevadores = dadosFiltrados.features.reduce((total, feature) => {
        return total + feature.properties.qtd_elev;
    }, 0);

    const totalLocais = dadosFiltrados.features.length;

    const elemElevadores = document.getElementById('total-elevadores-filtro');
    const elemLocais = document.getElementById('total-locais-filtro');
    
    if (elemElevadores) elemElevadores.textContent = totalElevadores;
    if (elemLocais) elemLocais.textContent = totalLocais;

    const contadorElement = document.getElementById('contador-resultados');
    if (contadorElement) {
        if (totalElevadores === 0) {
            contadorElement.style.background = '#ffebee';
            contadorElement.style.color = '#c62828';
            contadorElement.style.borderColor = '#ef9a9a';
        } else {
            contadorElement.style.background = '#e8f5e8';
            contadorElement.style.color = '#2e7d32';
            contadorElement.style.borderColor = '#a5d6a7';
        }
    }
    
    console.log(`Ã¯Â¿Â½Ã¯Â¿Â½ Contador atualizado: ${totalElevadores} elevadores em ${totalLocais} locais`);
}

// FunÃ§Ã£o para atualizar estatÃƒÂ­sticas da dashboard - COM SITUAÃƒâ€¡ÃƒÆ’O
function atualizarEstatisticasDashboard() {
    const tiposSelecionados = obterSelecionados('tipo');
    const regioesSelecionadas = obterSelecionados('regiao');
    const marcasSelecionadas = obterSelecionados('marca');
    const empresasSelecionadas = obterSelecionados('empresa');
    const situacoesSelecionadas = obterSelecionados('situacao'); // Ã°Å¸â€ â€¢ NOVO

    // Se nenhum filtro ativo, limpa todos os filtros
    if (tiposSelecionados.length === 0 && regioesSelecionadas.length === 0 && 
        marcasSelecionadas.length === 0 && empresasSelecionadas.length === 0 &&
        situacoesSelecionadas.length === 0) { // Ã°Å¸â€ â€¢ INCLUIR NOVO FILTRO
        console.log('Ã¢ÂÂ­Ã¯Â¸Â Nenhum filtro ativo, limpando todos os filtros');
        limparFiltros();
        return;
    }

    // Monta parÃƒÂ¢metros
    const params = new URLSearchParams();
    tiposSelecionados.forEach(tipo => params.append('tipo', tipo));
    regioesSelecionadas.forEach(regiao => params.append('regiao', regiao));
    marcasSelecionadas.forEach(marca => params.append('marca', marca));
    empresasSelecionadas.forEach(empresa => params.append('empresa', empresa));
    situacoesSelecionadas.forEach(situacao => params.append('situacao', situacao)); // Ã°Å¸â€ â€¢ NOVO

    console.log('Ã°Å¸â€œÂ¡ Fazendo requisiÃ§Ã£o para API...');

    // ... resto da funÃ§Ã£o permanece igual
    // Mostra loading
    const loadingElement = document.getElementById('loading-stats');
    if (loadingElement) loadingElement.style.display = 'block';

    // Faz requisiÃ§Ã£o
    fetch('/api/filtrar?' + params.toString())
        .then(response => response.json())
        .then(data => {
            if (loadingElement) loadingElement.style.display = 'none';
            
            console.log('Ã°Å¸â€œÂ¡ Resposta da API:', data);
            
            if (data.success) {
                // Atualiza cards
                const elementos = {
                    'stat-predios': data.stats.total_predios,
                    'stat-elevadores': data.stats.total_elevadores,
                    'stat-cidades': data.stats.cidades,
                    'stat-regioes': data.stats.regioes,
                    'stat-ativos': data.stats.em_atividade,
                    'stat-suspensos': data.stats.suspensos,
                    'stat-parados':data.stats.elevadores_parados
                };
                
                for (let id in elementos) {
                    const elem = document.getElementById(id);
                    if (elem) {
                        elem.textContent = elementos[id];
                        console.log(`Ã°Å¸â€œÅ  Card ${id} atualizado para:`, elementos[id]);
                    }
                }
                // Ã¢Å“â€¦ Sincroniza contador dos filtros com os mesmos valores da API
                const elemLocaisFiltro = document.getElementById('total-locais-filtro');
                const elemElevadoresFiltro = document.getElementById('total-elevadores-filtro');

                if (elemLocaisFiltro) elemLocaisFiltro.textContent = data.stats.total_predios;
                if (elemElevadoresFiltro) elemElevadoresFiltro.textContent = data.stats.total_elevadores;

                // Atualiza estatÃƒÂ­sticas detalhadas
                mostrarEstatisticasDetalhadas(data.stats);
                atualizarElevadoresParados();
            }
        })
        .catch(error => {
            if (loadingElement) loadingElement.style.display = 'none';
            console.error('Ã¢ÂÅ’ Erro ao carregar estatÃƒÂ­sticas:', error);
        });
}

// FunÃ§Ã£o para mostrar estatÃƒÂ­sticas detalhadas
function mostrarEstatisticasDetalhadas(stats) {
    const container = document.getElementById('stats-detalhadas');
    if (!container) return;
    
    let html = '<div class="row">';
    
    const categorias = [
        {titulo: 'Por Tipo', dados: stats.por_tipo},
        {titulo: 'Por RegiÃ£o', dados: stats.por_regiao},
        {titulo: 'Por Marca', dados: stats.por_marca},
        {titulo: 'Por Status', dados: stats.por_status}
    ];
    
    categorias.forEach(categoria => {
        html += `<div class="col-md-3"><h6>${categoria.titulo}</h6><ul class="list-unstyled">`;
        for (let [key, value] of Object.entries(categoria.dados)) {
            html += `<li><strong>${key}:</strong> ${value}</li>`;
        }
        html += '</ul></div>';
    });
    
    html += '</div>';
    container.innerHTML = html;
}

// FunÃ§ÃƒÂµes auxiliares
function limparFiltros() {
    console.log('Ã°Å¸Â§Â¹ Limpando todos os filtros...');
    
    const checkboxes = document.querySelectorAll('input[type="checkbox"]');
    checkboxes.forEach(cb => cb.checked = false);
    
    dadosFiltrados = dadosOriginais;
    atualizarMapa();
    atualizarContadorFiltros();
    
    // Restaura valores originais dos cards
    const valoresOriginais = window.statsOriginais || {};
    for (let id in valoresOriginais) {
        const elem = document.getElementById(id);
        if (elem) elem.textContent = valoresOriginais[id];
    }
    
    // Ã¢Å“â€¦ Sincroniza contador de filtros com valores originais
    const elemLocaisFiltro = document.getElementById('total-locais-filtro');
    const elemElevadoresFiltro = document.getElementById('total-elevadores-filtro');

    if (elemLocaisFiltro) elemLocaisFiltro.textContent = valoresOriginais['stat-predios'];
    if (elemElevadoresFiltro) elemElevadoresFiltro.textContent = valoresOriginais['stat-elevadores'];

    const statsContainer = document.getElementById('stats-detalhadas');
    if (statsContainer) {
        statsContainer.innerHTML = '<p class="text-muted">Use os filtros no mapa para ver estatÃƒÂ­sticas especÃƒÂ­ficas.</p>';
    }
    
    console.log('Ã¢Å“â€¦ Filtros limpos');
    carregarElevadoresParadosIniciais();
}

function selecionarTodos() {
    console.log('Ã¢Å“â€¦ Selecionando todos os filtros...');
    
    const checkboxes = document.querySelectorAll('input[type="checkbox"]');
    checkboxes.forEach(cb => cb.checked = true);
    aplicarFiltros();
}

function toggleCategoria(categoria) {
    const div = document.getElementById(`filtros-${categoria}`);
    const button = document.getElementById(`toggle-${categoria}`);

    if (div && button) {
        if (div.style.display === 'none') {
            div.style.display = 'block';
            button.textContent = 'Ã¢Å¾â€“';
        } else {
            div.style.display = 'none';
            button.textContent = 'Ã¢Å¾â€¢';
        }
    }
}

function atualizarDados() {
    const btn = event.target;
    const originalText = btn.innerHTML;
    btn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Atualizando...';
    btn.disabled = true;
    
    // Verifica se estamos na pÃƒÂ¡gina de KPIs
    const isKPIsPage = window.location.pathname === '/kpis';
    const endpoint = isKPIsPage ? '/atualizar-kpis' : '/atualizar';
    
    fetch(endpoint)
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                alert((isKPIsPage ? 'KPIs' : 'Dados') + ' atualizados!\n' + data.message);
                location.reload();
            } else {
                alert('Erro: ' + data.message);
            }
        })
        .catch(error => {
            alert('Erro na requisiÃ§Ã£o');
        })
        .finally(() => {
            btn.innerHTML = originalText;
            btn.disabled = false;
        });
}
// ========== FUNÃƒâ€¡Ãƒâ€¢ES PARA ELEVADORES PARADOS ==========

// FunÃ§Ã£o para carregar elevadores parados iniciais
function carregarElevadoresParadosIniciais() {
    console.log('Ã°Å¸â€Â´ Carregando elevadores parados iniciais...');
    
    if (!dadosOriginais || !dadosOriginais.features) {
        console.log('Ã¢Å¡Â Ã¯Â¸Â Dados nÃ£o disponÃƒÂ­veis para elevadores parados');
        return;
    }
    
    const elevadoresParados = [];
    
    dadosOriginais.features.forEach(feature => {
        const props = feature.properties;
        if (props.nElevadorParado && props.nElevadorParado > 0) {
            elevadoresParados.push({
                cidade: props.cidade,
                unidade: props.unidade,
                tipo: props.tipo,
                quantidade: props.nElevadorParado,
                empresa: props.empresa,
                dataDeParada: props.dataDeParada,
                previsaoDeRetorno: props.previsaoDeRetorno,
                qtd_total_elevadores: props.qtd_elev
            });
        }
    });
    
    // Ordena por cidade e unidade
    elevadoresParados.sort((a, b) => {
        if (a.cidade !== b.cidade) return a.cidade.localeCompare(b.cidade);
        return a.unidade.localeCompare(b.unidade);
    });
    
    console.log(`Ã°Å¸â€Â´ ${elevadoresParados.length} elevadores parados encontrados inicialmente`);
    
    mostrarElevadoresParados(elevadoresParados);
}

// FunÃ§Ã£o para atualizar elevadores parados via API
function atualizarElevadoresParados() {
    const tiposSelecionados = obterSelecionados('tipo');
    const regioesSelecionadas = obterSelecionados('regiao');
    const marcasSelecionadas = obterSelecionados('marca');
    const empresasSelecionadas = obterSelecionados('empresa');
    const situacoesSelecionadas = obterSelecionados('situacao');

    // Se nenhum filtro ativo, usa dados iniciais
    if (tiposSelecionados.length === 0 && regioesSelecionadas.length === 0 && 
        marcasSelecionadas.length === 0 && empresasSelecionadas.length === 0 &&
        situacoesSelecionadas.length === 0) {
        console.log('Ã¢ÂÂ­Ã¯Â¸Â Nenhum filtro ativo, usando dados iniciais de elevadores parados');
        carregarElevadoresParadosIniciais();
        return;
    }

    // Monta parÃƒÂ¢metros
    const params = new URLSearchParams();
    tiposSelecionados.forEach(tipo => params.append('tipo', tipo));
    regioesSelecionadas.forEach(regiao => params.append('regiao', regiao));
    marcasSelecionadas.forEach(marca => params.append('marca', marca));
    empresasSelecionadas.forEach(empresa => params.append('empresa', empresa));
    situacoesSelecionadas.forEach(situacao => params.append('situacao', situacao));

    console.log('Ã°Å¸â€œÂ¡ Fazendo requisiÃ§Ã£o para API de elevadores parados...');

    // Mostra loading
    const loadingElement = document.getElementById('loading-elevadores-parados');
    if (loadingElement) loadingElement.style.display = 'block';

    // Faz requisiÃ§Ã£o
    fetch('/api/elevadores-parados?' + params.toString())
        .then(response => response.json())
        .then(data => {
            if (loadingElement) loadingElement.style.display = 'none';
            
            console.log('Ã°Å¸â€œÂ¡ Resposta da API elevadores parados:', data);
            
            if (data.success) {
                mostrarElevadoresParados(data.elevadores_parados);
            }
        })
        .catch(error => {
            if (loadingElement) loadingElement.style.display = 'none';
            console.error('Ã¢ÂÅ’ Erro ao carregar elevadores parados:', error);
        });
}

// FunÃ§Ã£o para exibir lista de elevadores parados
function mostrarElevadoresParados(elevadoresParados) {
    const container = document.getElementById('lista-elevadores-parados');
    const badge = document.getElementById('badge-total-parados');
    
    if (!container) return;
    
    // Atualiza badge com total
    if (badge) {
        badge.textContent = elevadoresParados.length;
    }
    
    if (elevadoresParados.length === 0) {
        container.innerHTML = `
            <div class="alert alert-success text-center">
                <i class="fas fa-check-circle"></i>
                <strong>Ãƒâ€œtimas notÃƒÂ­cias!</strong> Nenhum elevador parado encontrado com os filtros aplicados.
            </div>
        `;
        return;
    }
    
    let html = `
        <div class="alert alert-warning">
            <i class="fas fa-exclamation-triangle"></i>
            <strong>${elevadoresParados.length} elevador(es) parado(s)</strong> encontrado(s) com os filtros aplicados.
        </div>
        <div class="table-responsive">
            <table class="table table-striped table-hover">
                <thead class="table-dark">
                    <tr>
                        <th><i class="fas fa-map-marker-alt"></i> Cidade</th>
                        <th><i class="fas fa-building"></i> Unidade</th>
                        <th><i class="fas fa-elevator"></i> Tipo</th>
                        <th><i class="fas fa-hashtag"></i> Parados</th>
                        <th><i class="fas fa-industry"></i> Empresa</th>
                        <th><i class="fas fa-calendar-times"></i> Data Parada</th>
                        <th><i class="fas fa-calendar-check"></i> PrevisÃ£o Retorno</th>
                    </tr>
                </thead>
                <tbody>
    `;
    
    elevadoresParados.forEach((elevador, index) => {
        const dataParada = elevador.dataDeParada || '<span class="text-muted">-</span>';
        const previsaoRetorno = elevador.previsaoDeRetorno || '<span class="text-muted">-</span>';
        
        // Ã¢Å“â€¦ VERSÃƒÆ’O MELHORADA
        const tipoLimpo = elevador.tipo.toLowerCase().trim();
        const badgeColor = tipoLimpo === "montacarga" ? "bg-secondary":
                        tipoLimpo === "passageiro" ? "bg-info":
                        tipoLimpo === "plataforma" ? "bg-success":
                        "bg-primary";
        
        html += `
            <tr>
                <td><strong>${elevador.cidade}</strong></td>
                <td>${elevador.unidade}</td>
                <td>
                    <span class="badge ${badgeColor}">${elevador.tipo}</span>
                </td>
                <td>
                    <span class="badge bg-danger">${elevador.quantidade}</span>
                    <small class="text-muted d-block">de ${elevador.qtd_total_elevadores} total</small>
                </td>
                <td>${elevador.empresa}</td>
                <td>${dataParada}</td>
                <td>${previsaoRetorno}</td>
            </tr>
        `;
    });
    
    html += `
                </tbody>
            </table>
        </div>
        <div class="mt-3">
            <small class="text-muted">
                <i class="fas fa-info-circle"></i>
                Lista atualizada automaticamente conforme os filtros aplicados no mapa.
            </small>
        </div>
    `;
    
    container.innerHTML = html;
    
    console.log(`Ã¢Å“â€¦ Lista de elevadores parados atualizada: ${elevadoresParados.length} itens`);
}
</script>
{% endblock %}
--- Fim do código: index_nativo.html ---

--- Início do código: kpis.html ---
{% extends "base.html" %}

{% block title %}KPIs de ManutenÃ§Ã£o - Sistema de Elevadores TJ/MG{% endblock %}

{% block extra_head %}
<!-- Chart.js -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://cdn.jsdelivr.net/npm/date-fns@2.29.3/index.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns@2.0.0/dist/chartjs-adapter-date-fns.bundle.min.js"></script>
{% endblock %}

{% block content %}
<div class="row">
    <div class="col-12">
        <h1 class="mb-4">
            <i class="fas fa-chart-line"></i> 
            KPIs de ManutenÃ§Ã£o - Elevadores TJ/MG
        </h1>
    </div>
</div>

{% if erro %}
    <div class="alert alert-danger" role="alert">
        <i class="fas fa-exclamation-triangle"></i> {{ erro }}
    </div>
{% else %}
    <!-- Filtros AvanÃ§ados -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5><i class="fas fa-filter"></i> Filtros</h5>
                    <div>
                        <button class="btn btn-success btn-sm me-2" onclick="aplicarFiltros()">
                            <i class="fas fa-search"></i> Aplicar Filtros
                        </button>
                        <button class="btn btn-secondary btn-sm me-2" onclick="limparFiltrosKPIs()">
                            <i class="fas fa-eraser"></i> Limpar
                        </button>
                        <button class="btn btn-info btn-sm" onclick="atualizarDados()">
                            <i class="fas fa-sync-alt"></i> Atualizar
                        </button>
                    </div>
                </div>
                <div class="card-body">
                    <!-- Primeira linha: Filtros de Data -->
                    <div class="row mb-3">
                        <div class="col-md-3">
                            <label class="form-label"><i class="fas fa-calendar"></i> Data de InÃƒÂ­cio</label>
                            <input type="date" class="form-control" id="data-inicio">
                        </div>
                        <div class="col-md-3">
                            <label class="form-label"><i class="fas fa-calendar"></i> Data de Fim</label>
                            <input type="date" class="form-control" id="data-fim">
                        </div>
                        <div class="col-md-6">
                            <label class="form-label"><i class="fas fa-clock"></i> PerÃƒÂ­odo Predefinido</label>
                            <select class="form-select" id="filtro-periodo" onchange="selecionarPeriodoPredefinido()">
                                <option value="">Selecione um perÃƒÂ­odo...</option>
                                <option value="ultima-semana">ÃƒÅ¡ltima Semana</option>
                                <option value="ultimo-mes">ÃƒÅ¡ltimo MÃƒÂªs</option>
                                <option value="ultimos-3-meses">ÃƒÅ¡ltimos 3 Meses</option>
                                <option value="ultimos-6-meses">ÃƒÅ¡ltimos 6 Meses</option>
                                <option value="ultimo-ano">ÃƒÅ¡ltimo Ano</option>
                                <option value="ultimos-2-anos">ÃƒÅ¡ltimos 2 Anos</option>
                                <option value="ultimos-5-anos">ÃƒÅ¡ltimos 5 Anos</option>
                                <option value="todo-periodo">Todo o PerÃƒÂ­odo</option>
                            </select>
                        </div>
                    </div>
                    
                    <!-- Segunda linha: Outros filtros -->
                    <div class="row">
                        <!-- Filtro por Status -->
                        <div class="col-md-3">
                            <label class="form-label"><i class="fas fa-tasks"></i> Status</label>
                            <select class="form-select" id="filtro-status">
                                <option value="">Todos os status</option>
                                <option value="ConcluÃƒÂ­da">ConcluÃƒÂ­da</option>
                                <option value="Confirmada">Confirmada</option>
                            </select>
                        </div>
                        
                        <!-- Filtro por Categoria -->
                        <div class="col-md-3">
                            <label class="form-label"><i class="fas fa-tags"></i> Categoria</label>
                            <select class="form-select" id="filtro-categoria">
                                <option value="">Todas as categorias</option>
                                <!-- Preenchido dinamicamente via JavaScript -->
                            </select>
                        </div>
                        
                        <!-- Filtro por EdifÃƒÂ­cio -->
                        <div class="col-md-6">
                            <label class="form-label"><i class="fas fa-building"></i> EdifÃƒÂ­cio</label>
                            <select class="form-select" id="filtro-edificio">
                                <option value="">Todos os edifÃƒÂ­cios</option>
                                <!-- Preenchido dinamicamente via JavaScript -->
                            </select>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Cards de KPIs Principais -->
    <div class="row mb-4" id="kpis-cards">
        <div class="col-md-3">
            <div class="card bg-primary text-white">
                <div class="card-body text-center">
                    <i class="fas fa-clipboard-list fa-2x mb-2"></i>
                    <h3 id="total-chamados">{{ metricas.total_chamados or 0 }}</h3>
                    <p class="mb-0">Total de Chamados</p>
                </div>
            </div>
        </div>
        
        <div class="col-md-3">
            <div class="card bg-success text-white">
                <div class="card-body text-center">
                    <i class="fas fa-check-circle fa-2x mb-2"></i>
                    <h3 id="chamados-concluidos">{{ metricas.chamados_concluidos or 0 }}</h3>
                    <p class="mb-0">Chamados ConcluÃƒÂ­dos</p>
                </div>
            </div>
        </div>
        
        <div class="col-md-3">
            <div class="card bg-warning text-white">
                <div class="card-body text-center">
                    <i class="fas fa-clock fa-2x mb-2"></i>
                    <h3 id="tempo-mediano">{{ "%.1f"|format(metricas.tempo_mediano_reparo or 0) }}h</h3>
                    <p class="mb-0">Tempo Mediano de Reparo</p>
                </div>
            </div>
        </div>
        
        <div class="col-md-3">
            <div class="card bg-info text-white">
                <div class="card-body text-center">
                    <i class="fas fa-percentage fa-2x mb-2"></i>
                    <h3 id="disponibilidade">{{ "%.1f"|format(metricas.disponibilidade or 0) }}%</h3>
                    <p class="mb-0">Taxa de ConclusÃ£o</p>
                </div>
            </div>
        </div>
    </div>

    <!-- Indicador de Filtros Ativos -->
    <div class="row mb-3" id="filtros-ativos" style="display: none;">
        <div class="col-12">
            <div class="alert alert-info">
                <i class="fas fa-filter"></i> 
                <strong>Filtros ativos:</strong> 
                <span id="descricao-filtros"></span>
                <button class="btn btn-sm btn-outline-primary ms-2" onclick="limparFiltrosKPIs()">
                    <i class="fas fa-times"></i> Remover filtros
                </button>
            </div>
        </div>
    </div>

    <!-- GrÃƒÂ¡ficos -->
    <div class="row">
        <!-- GrÃƒÂ¡fico de Chamados por MÃƒÂªs -->
        <div class="col-md-6 mb-4">
            <div class="card">
                <div class="card-header">
                    <h5><i class="fas fa-chart-line"></i> Chamados por MÃƒÂªs</h5>
                    <small class="text-muted">Clique nos pontos para filtrar por mÃƒÂªs</small>
                </div>
                <div class="card-body">
                    <canvas id="grafico-chamados-mes" height="300"></canvas>
                </div>
            </div>
        </div>

        <!-- GrÃƒÂ¡fico de Categorias de Problema -->
        <div class="col-md-6 mb-4">
            <div class="card">
                <div class="card-header">
                    <h5><i class="fas fa-chart-pie"></i> Categorias de Problemas</h5>
                    <small class="text-muted">Clique nas fatias para filtrar por categoria</small>
                </div>
                <div class="card-body">
                    <canvas id="grafico-categorias" height="300"></canvas>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <!-- GrÃƒÂ¡fico de EdifÃƒÂ­cios Mais ProblemÃƒÂ¡ticos -->
        <div class="col-md-6 mb-4">
            <div class="card">
                <div class="card-header">
                    <h5><i class="fas fa-chart-bar"></i> EdifÃƒÂ­cios com Mais Chamados</h5>
                    <small class="text-muted">Clique nas barras para filtrar por edifÃƒÂ­cio</small>
                </div>
                <div class="card-body">
                    <canvas id="grafico-edificios" height="300"></canvas>
                </div>
            </div>
        </div>

        <!-- GrÃƒÂ¡fico de Tempo por Categoria -->
        <div class="col-md-6 mb-4">
            <div class="card">
                <div class="card-header">
                    <h5><i class="fas fa-stopwatch"></i> Tempo Mediano por Categoria</h5>
                    <small class="text-muted">Clique nas barras para filtrar por categoria</small>
                </div>
                <div class="card-body">
                    <canvas id="grafico-tempo-categoria" height="300"></canvas>
                </div>
            </div>
        </div>
    </div>

    <!-- Ã°Å¸â€ â€¢ NOVA SEÃƒâ€¡ÃƒÆ’O: GrÃƒÂ¡ficos de Elevadores -->
    <div class="row">
        <!-- GrÃƒÂ¡fico de Chamados por Elevador -->
        <div class="col-md-6 mb-4">
            <div class="card">
                <div class="card-header">
                    <h5><i class="fas fa-elevator"></i> Chamados por Elevador</h5>
                    <small class="text-muted">Clique nas barras para filtrar por elevador especÃƒÂ­fico</small>
                </div>
                <div class="card-body">
                    <canvas id="grafico-chamados-elevador" height="300"></canvas>
                </div>
            </div>
        </div>

        <!-- GrÃƒÂ¡fico de Tempo Mediano por Elevador -->
        <div class="col-md-6 mb-4">
            <div class="card">
                <div class="card-header">
                    <h5><i class="fas fa-clock"></i> Tempo Mediano de Atendimento por Elevador</h5>
                    <small class="text-muted">Clique nas barras para filtrar por elevador especÃƒÂ­fico</small>
                </div>
                <div class="card-body">
                    <canvas id="grafico-tempo-elevador" height="300"></canvas>
                </div>
            </div>
        </div>
    </div>

    <!-- Tabela de Resumo Filtrado -->
    <div class="row">
        <div class="card">
            <div class="card-header">
                <h5><i class="fas fa-table"></i> Resumo dos Dados Filtrados</h5>
            </div>
            <div class="card-body">
                <div id="loading-resumo" class="text-center" style="display: none;">
                    <i class="fas fa-spinner fa-spin"></i> Carregando dados...
                </div>
                <div id="tabela-resumo">
                    <p class="text-muted text-center">Use os filtros acima ou clique nos grÃƒÂ¡ficos para ver dados especÃƒÂ­ficos.</p>
                </div>
            </div>
        </div>
    </div>
{% endif %}

<script>
// Dados para JavaScript
const dadosKPIsOriginais = {{ metricas|tojson|safe }};
let dadosKPIsFiltrados = dadosKPIsOriginais;
let graficos = {};
let filtrosAtivos = {};

console.log('Ã°Å¸â€œÅ  Dados de KPIs recebidos:', dadosKPIsOriginais);

// Inicializa grÃƒÂ¡ficos quando a pÃƒÂ¡gina carrega
document.addEventListener('DOMContentLoaded', function() {
    console.log('Ã°Å¸â€œâ€ž DOM carregado, criando grÃƒÂ¡ficos de KPIs...');
    preencherFiltros();
    criarGraficos();
});

function preencherFiltros() {
    // Preenche filtro de categorias
    const selectCategoria = document.getElementById('filtro-categoria');
    const categorias = Object.keys(dadosKPIsOriginais.categorias_problema || {});
    categorias.forEach(categoria => {
        const option = document.createElement('option');
        option.value = categoria;
        option.textContent = categoria;
        selectCategoria.appendChild(option);
    });
    
    // Preenche filtro de edifÃƒÂ­cios
    const selectEdificio = document.getElementById('filtro-edificio');
    const edificios = Object.keys(dadosKPIsOriginais.chamados_por_edificio || {});
    edificios.forEach(edificio => {
        const option = document.createElement('option');
        option.value = edificio;
        option.textContent = edificio.length > 50 ? edificio.substring(0, 50) + '...' : edificio;
        selectEdificio.appendChild(option);
    });
}

// Ã°Å¸â€œâ€¦ NOVA FUNÃƒâ€¡ÃƒÆ’O: Selecionar perÃƒÂ­odo predefinido
function selecionarPeriodoPredefinido() {
    const periodo = document.getElementById('filtro-periodo').value;
    
    if (periodo && periodo !== 'todo-periodo') {
        // Limpa datas personalizadas quando seleciona perÃƒÂ­odo predefinido
        document.getElementById('data-inicio').value = '';
        document.getElementById('data-fim').value = '';
    }
    
    console.log('Ã°Å¸â€œâ€¦ PerÃƒÂ­odo predefinido selecionado:', periodo);
}

function criarGraficos() {
    // Destroi grÃƒÂ¡ficos existentes
    Object.values(graficos).forEach(grafico => {
        if (grafico) grafico.destroy();
    });
    
    // Cria novos grÃƒÂ¡ficos
    criarGraficoChamadosPorMes();
    criarGraficoCategorias();
    criarGraficoEdificios();
    criarGraficoTempoPorCategoria();
    
    // Ã°Å¸â€ â€¢ NOVOS GRÃƒÂFICOS DE ELEVADORES
    criarGraficoChamadosPorElevador();
    criarGraficoTempoMedianoPorElevador();
}

function criarGraficoChamadosPorMes() {
    const ctx = document.getElementById('grafico-chamados-mes');
    if (!ctx) return;
    
    const dados = dadosKPIsFiltrados.chamados_por_mes || {};
    const labels = Object.keys(dados).sort();
    const values = labels.map(label => dados[label]);
    
    graficos.chamadosMes = new Chart(ctx, {
        type: 'line',
        data: {
            labels: labels,
            datasets: [{
                label: 'Chamados',
                data: values,
                borderColor: '#007bff',
                backgroundColor: 'rgba(0, 123, 255, 0.1)',
                borderWidth: 3,
                fill: true,
                tension: 0.4,
                pointBackgroundColor: '#007bff',
                pointBorderColor: '#fff',
                pointBorderWidth: 2,
                pointRadius: 6,
                pointHoverRadius: 8
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    display: false
                }
            },
            scales: {
                y: {
                    beginAtZero: true,
                    ticks: {
                        stepSize: 1
                    }
                }
            },
            onClick: (event, elements) => {
                if (elements.length > 0) {
                    const index = elements[0].index;
                    const mesAno = labels[index];
                    filtrarPorMes(mesAno);
                }
            },
            onHover: (event, elements) => {
                event.native.target.style.cursor = elements.length > 0 ? 'pointer' : 'default';
            }
        }
    });
}

function criarGraficoCategorias() {
    const ctx = document.getElementById('grafico-categorias');
    if (!ctx) return;
    
    const dados = dadosKPIsFiltrados.categorias_problema || {};
    
    // Ã°Å¸â€â€ž ORDENAÃƒâ€¡ÃƒÆ’O DECRESCENTE
    const entries = Object.entries(dados).sort((a, b) => b[1] - a[1]);
    const labels = entries.map(entry => entry[0]);
    const values = entries.map(entry => entry[1]);
    
    const cores = [
        '#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', 
        '#9966FF', '#FF9F40', '#FF6384', '#C9CBCF'
    ];
    
    graficos.categorias = new Chart(ctx, {
        type: 'doughnut',
        data: {
            labels: labels,
            datasets: [{
                data: values,
                backgroundColor: cores.slice(0, labels.length),
                borderWidth: 2,
                borderColor: '#fff',
                hoverBorderWidth: 4
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    position: 'bottom'
                }
            },
            onClick: (event, elements) => {
                if (elements.length > 0) {
                    const index = elements[0].index;
                    const categoria = labels[index];
                    filtrarPorCategoria(categoria);
                }
            },
            onHover: (event, elements) => {
                event.native.target.style.cursor = elements.length > 0 ? 'pointer' : 'default';
            }
        }
    });
}

// Ã°Å¸â€â€ž MODIFICADO: GrÃƒÂ¡fico de EdifÃƒÂ­cios com ordenaÃ§Ã£o decrescente garantida
function criarGraficoEdificios() {
    const ctx = document.getElementById('grafico-edificios');
    if (!ctx) return;
    
    const dados = dadosKPIsFiltrados.chamados_por_edificio || {};
    
    // Ã°Å¸â€â€ž ORDENAÃƒâ€¡ÃƒÆ’O DECRESCENTE EXPLÃƒÂCITA (garantindo que funcione mesmo se backend nÃ£o ordenar)
    const entries = Object.entries(dados)
        .sort((a, b) => b[1] - a[1])  // Ordena por valor decrescente
        .slice(0, 10); // Top 10
    
    const labels = entries.map(entry => entry[0]);
    const values = entries.map(entry => entry[1]);
    
    console.log('Ã°Å¸ÂÂ¢ Dados de edifÃƒÂ­cios ordenados:', entries);
    
    graficos.edificios = new Chart(ctx, {
        type: 'bar',
        data: {
            labels: labels.map(label => label.length > 20 ? label.substring(0, 20) + '...' : label),
            datasets: [{
                label: 'Chamados',
                data: values,
                backgroundColor: '#28a745',
                borderColor: '#1e7e34',
                borderWidth: 1,
                hoverBackgroundColor: '#34ce57'
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    display: false
                }
            },
            scales: {
                y: {
                    beginAtZero: true,
                    ticks: {
                        stepSize: 1
                    }
                },
                x: {
                    ticks: {
                        maxRotation: 45
                    }
                }
            },
            onClick: (event, elements) => {
                if (elements.length > 0) {
                    const index = elements[0].index;
                    const edificio = labels[index];
                    filtrarPorEdificio(edificio);
                }
            },
            onHover: (event, elements) => {
                event.native.target.style.cursor = elements.length > 0 ? 'pointer' : 'default';
            }
        }
    });
}

// Ã°Å¸â€â€ž MODIFICADO: GrÃƒÂ¡fico de Tempo por Categoria com ordenaÃ§Ã£o decrescente garantida
function criarGraficoTempoPorCategoria() {
    const ctx = document.getElementById('grafico-tempo-categoria');
    if (!ctx) return;
    
    const dados = dadosKPIsFiltrados.tempo_por_categoria || {};
    
    // Ã°Å¸â€â€ž ORDENAÃƒâ€¡ÃƒÆ’O DECRESCENTE EXPLÃƒÂCITA (garantindo que funcione mesmo se backend nÃ£o ordenar)
    const entries = Object.entries(dados)
        .sort((a, b) => b[1] - a[1]); // Ordena por valor decrescente
    
    const labels = entries.map(entry => entry[0]);
    const values = entries.map(entry => Math.round(entry[1] * 10) / 10);
    
    console.log('Ã¢ÂÂ±Ã¯Â¸Â Dados de tempo por categoria ordenados:', entries);
    
    graficos.tempoCategoria = new Chart(ctx, {
        type: 'bar',
        data: {
            labels: labels,
            datasets: [{
                label: 'Tempo Mediano (horas)',
                data: values,
                backgroundColor: '#ffc107',
                borderColor: '#e0a800',
                borderWidth: 1,
                hoverBackgroundColor: '#ffcd39'
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    display: false
                }
            },
            scales: {
                y: {
                    beginAtZero: true,
                    ticks: {
                        callback: function(value) {
                            return value + 'h';
                        }
                    }
                }
            },
            onClick: (event, elements) => {
                if (elements.length > 0) {
                    const index = elements[0].index;
                    const categoria = labels[index];
                    filtrarPorCategoria(categoria);
                }
            },
            onHover: (event, elements) => {
                event.native.target.style.cursor = elements.length > 0 ? 'pointer' : 'default';
            }
        }
    });
}

// Ã°Å¸â€ â€¢ NOVO: GrÃƒÂ¡fico de Chamados por Elevador
function criarGraficoChamadosPorElevador() {
    const ctx = document.getElementById('grafico-chamados-elevador');
    if (!ctx) return;
    
    const dados = dadosKPIsFiltrados.chamados_por_equipamento || {};
    
    // OrdenaÃ§Ã£o decrescente e limitaÃ§Ã£o aos top 15 elevadores
    const entries = Object.entries(dados)
        .sort((a, b) => b[1] - a[1])
        .slice(0, 15); // Top 15 elevadores
    
    const labels = entries.map(entry => String(entry[0]));
    const values = entries.map(entry => entry[1]);
    
    console.log('Ã°Å¸Ââ€”Ã¯Â¸Â Dados de chamados por elevador ordenados:', entries);
    
    graficos.chamadosElevador = new Chart(ctx, {
        type: 'bar',
        data: {
            labels: labels,
            datasets: [{
                label: 'Chamados',
                data: values,
                backgroundColor: '#007bff',
                borderColor: '#0056b3',
                borderWidth: 1,
                hoverBackgroundColor: '#0056b3'
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    display: false
                },
                tooltip: {
                    callbacks: {
                        title: function(context) {
                            return 'Elevador: ' + context[0].label;
                        },
                        label: function(context) {
                            return 'Chamados: ' + context.parsed.y;
                        }
                    }
                }
            },
            scales: {
                y: {
                    beginAtZero: true,
                    ticks: {
                        stepSize: 1
                    }
                },
                x: {
                    ticks: {
                        maxRotation: 45,
                        font: {
                            size: 10
                        }
                    }
                }
            },
            onClick: (event, elements) => {
                if (elements.length > 0) {
                    const index = elements[0].index;
                    const elevador = String(labels[index]);
                    filtrarPorElevador(elevador);
                }
            },
            onHover: (event, elements) => {
                event.native.target.style.cursor = elements.length > 0 ? 'pointer' : 'default';
            }
        }
    });
}

// Ã°Å¸â€ â€¢ NOVO: GrÃƒÂ¡fico de Tempo Mediano por Elevador
function criarGraficoTempoMedianoPorElevador() {
    const ctx = document.getElementById('grafico-tempo-elevador');
    if (!ctx) return;
    
    const dados = dadosKPIsFiltrados.tempo_por_equipamento || {};
    
    // OrdenaÃ§Ã£o decrescente e limitaÃ§Ã£o aos top 15 elevadores
    const entries = Object.entries(dados)
        .sort((a, b) => b[1] - a[1])
        .slice(0, 15); // Top 15 elevadores
    
    const labels = entries.map(entry => String(entry[0]));
    const values = entries.map(entry => Math.round(entry[1] * 10) / 10);
    
    console.log('Ã¢ÂÂ° Dados de tempo por elevador ordenados:', entries);
    
    graficos.tempoElevador = new Chart(ctx, {
        type: 'bar',
        data: {
            labels: labels,
            datasets: [{
                label: 'Tempo Mediano (horas)',
                data: values,
                backgroundColor: '#17a2b8',
                borderColor: '#138496',
                borderWidth: 1,
                hoverBackgroundColor: '#138496'
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    display: false
                },
                tooltip: {
                    callbacks: {
                        title: function(context) {
                            return 'Elevador: ' + context[0].label;
                        },
                        label: function(context) {
                            return 'Tempo Mediano: ' + context.parsed.y + 'h';
                        }
                    }
                }
            },
            scales: {
                y: {
                    beginAtZero: true,
                    ticks: {
                        callback: function(value) {
                            return value + 'h';
                        }
                    }
                },
                x: {
                    ticks: {
                        maxRotation: 45,
                        font: {
                            size: 10
                        }
                    }
                }
            },
            onClick: (event, elements) => {
                if (elements.length > 0) {
                    const index = elements[0].index;
                    const elevador = String(labels[index]);
                    filtrarPorElevador(elevador);
                }
            },
            onHover: (event, elements) => {
                event.native.target.style.cursor = elements.length > 0 ? 'pointer' : 'default';
            }
        }
    });
}

// FunÃ§ÃƒÂµes de filtro por clique nos grÃƒÂ¡ficos
function filtrarPorMes(mesAno) {
    console.log('Ã°Å¸â€œâ€¦ Filtrando por mÃƒÂªs:', mesAno);
    filtrosAtivos.mes = mesAno;
    aplicarFiltrosInterativos();
}

function filtrarPorCategoria(categoria) {
    console.log('Ã°Å¸ÂÂ·Ã¯Â¸Â Filtrando por categoria:', categoria);
    document.getElementById('filtro-categoria').value = categoria;
    filtrosAtivos.categoria = categoria;
    aplicarFiltrosInterativos();
}

function filtrarPorEdificio(edificio) {
    console.log('Ã°Å¸ÂÂ¢ Filtrando por edifÃƒÂ­cio:', edificio);
    document.getElementById('filtro-edificio').value = edificio;
    filtrosAtivos.edificio = edificio;
    aplicarFiltrosInterativos();
}

// Ã°Å¸â€ â€¢ NOVA FUNÃƒâ€¡ÃƒÆ’O: Filtrar por elevador especÃƒÂ­fico
function filtrarPorElevador(elevador) {
    console.log('Ã°Å¸Ââ€”Ã¯Â¸Â Filtrando por elevador:', elevador);
    filtrosAtivos.equipamento = elevador;
    aplicarFiltrosInterativos();
}

function aplicarFiltros() {
    const dataInicio = document.getElementById('data-inicio').value;
    const dataFim = document.getElementById('data-fim').value;
    const periodo = document.getElementById('filtro-periodo').value;
    const status = document.getElementById('filtro-status').value;
    const categoria = document.getElementById('filtro-categoria').value;
    const edificio = document.getElementById('filtro-edificio').value;
    
    console.log('Ã°Å¸â€Â Aplicando filtros:', {
        dataInicio, dataFim, periodo, status, categoria, edificio
    });
    
    // Ã°Å¸â€œâ€¦ VALIDAÃƒâ€¡ÃƒÆ’O DE DATAS
    if (dataInicio && dataFim && new Date(dataInicio) > new Date(dataFim)) {
        alert('A data de inÃƒÂ­cio nÃ£o pode ser posterior ÃƒÂ  data de fim.');
        return;
    }
    
    // Ã°Å¸â€ â€¢ MAPEAMENTO CORRETO DOS PARÃƒâ€šMETROS
    filtrosAtivos = {
        data_inicio: dataInicio,
        data_fim: dataFim,
        periodo_predefinido: periodo,
        status: status,
        categoria: categoria,
        edificio: edificio
    };
    
    // Remove filtros vazios
    Object.keys(filtrosAtivos).forEach(key => {
        if (!filtrosAtivos[key]) {
            delete filtrosAtivos[key];
        }
    });
    
    console.log('Ã°Å¸â€Â§ Filtros ativos apÃƒÂ³s limpeza:', filtrosAtivos);
    
    aplicarFiltrosInterativos();
}

function aplicarFiltrosInterativos() {
    console.log('Ã°Å¸â€Â Aplicando filtros:', filtrosAtivos);
    
    // Monta parÃƒÂ¢metros para API
    const params = new URLSearchParams();
    Object.keys(filtrosAtivos).forEach(key => {
        if (filtrosAtivos[key]) {
            params.append(key, filtrosAtivos[key]);
        }
    });
    
    // Mostra loading
    const loadingElement = document.getElementById('loading-resumo');
    if (loadingElement) loadingElement.style.display = 'block';
    
    // Faz requisiÃ§Ã£o para API
    fetch('/api/kpis-filtrados?' + params.toString())
        .then(response => response.json())
        .then(data => {
            if (loadingElement) loadingElement.style.display = 'none';
            
            if (data.success) {
                // Atualiza dados filtrados
                dadosKPIsFiltrados = data.metricas;
                
                // Atualiza cards
                atualizarCards(data.metricas);
                
                // Recria grÃƒÂ¡ficos
                criarGraficos();
                
                // Mostra indicador de filtros ativos
                mostrarFiltrosAtivos();
                
                // Atualiza tabela de resumo
                atualizarTabelaResumo(data.resumo);
            }
        })
        .catch(error => {
            if (loadingElement) loadingElement.style.display = 'none';
            console.error('Ã¢ÂÅ’ Erro ao aplicar filtros:', error);
            alert('Erro ao aplicar filtros. Tente novamente.');
        });
}

function atualizarCards(metricas) {
    document.getElementById('total-chamados').textContent = metricas.total_chamados || 0;
    document.getElementById('chamados-concluidos').textContent = metricas.chamados_concluidos || 0;
    document.getElementById('tempo-mediano').textContent = (metricas.tempo_mediano_reparo || 0).toFixed(1) + 'h';
    document.getElementById('disponibilidade').textContent = (metricas.disponibilidade || 0).toFixed(1) + '%';
}

function mostrarFiltrosAtivos() {
    const filtrosAtivosDiv = document.getElementById('filtros-ativos');
    const descricaoFiltros = document.getElementById('descricao-filtros');
    
    const filtrosTexto = [];
    
    // Ã°Å¸â€œâ€¦ MELHORIA: DescriÃ§Ã£o mais clara dos filtros
    const dataInicio = document.getElementById('data-inicio').value;
    const dataFim = document.getElementById('data-fim').value;
    const periodo = document.getElementById('filtro-periodo').value;
    
    if (dataInicio || dataFim) {
        let textoData = 'PerÃƒÂ­odo: ';
        if (dataInicio && dataFim) {
            textoData += `${dataInicio} a ${dataFim}`;
        } else if (dataInicio) {
            textoData += `a partir de ${dataInicio}`;
        } else {
            textoData += `atÃƒÂ© ${dataFim}`;
        }
        filtrosTexto.push(textoData);
    } else if (periodo) {
        const periodos = {
            'ultima-semana': 'ÃƒÅ¡ltima Semana',
            'ultimo-mes': 'ÃƒÅ¡ltimo MÃƒÂªs',
            'ultimos-3-meses': 'ÃƒÅ¡ltimos 3 Meses',
            'ultimos-6-meses': 'ÃƒÅ¡ltimos 6 Meses',
            'ultimo-ano': 'ÃƒÅ¡ltimo Ano',
            'ultimos-2-anos': 'ÃƒÅ¡ltimos 2 Anos',
            'ultimos-5-anos': 'ÃƒÅ¡ltimos 5 Anos',
            'todo-periodo': 'Todo o PerÃƒÂ­odo'
        };
        filtrosTexto.push(`PerÃƒÂ­odo: ${periodos[periodo]}`);
    }
    
    Object.keys(filtrosAtivos).forEach(key => {
        if (filtrosAtivos[key] && !['data_inicio', 'data_fim', 'periodo_predefinido'].includes(key)) {
             const nomesFiltros = {
                'equipamento': 'Elevador',
                'categoria': 'Categoria',
                'edificio': 'EdifÃƒÂ­cio',
                'status': 'Status',
                'mes': 'MÃƒÂªs'
            };
            const nomeAmigavel = nomesFiltros[key] || key;
            filtrosTexto.push(`${nomeAmigavel}: ${filtrosAtivos[key]}`);
        }
    });
    
    if (filtrosTexto.length > 0) {
        descricaoFiltros.textContent = filtrosTexto.join(' | ');
        filtrosAtivosDiv.style.display = 'block';
    } else {
        filtrosAtivosDiv.style.display = 'none';
    }
}

function atualizarTabelaResumo(resumo) {
    const container = document.getElementById('tabela-resumo');
    if (!resumo || resumo.length === 0) {
        container.innerHTML = '<p class="text-muted text-center">Nenhum dado encontrado com os filtros aplicados.</p>';
        return;
    }
    
    let html = `
        <div class="table-responsive">
            <table class="table table-striped table-hover">
                <thead class="table-dark">
                    <tr>
                        <th>Categoria</th>
                        <th>EdifÃƒÂ­cio</th>
                        <th>Status</th>
                        <th>Data SolicitaÃ§Ã£o</th>
                        <th>Tempo Reparo (h)</th>
                    </tr>
                </thead>
                <tbody>
    `;
    
    resumo.slice(0, 20).forEach(item => { // Mostra apenas os primeiros 20
        html += `
            <tr>
                <td><span class="badge bg-secondary">${item.categoria_problema}</span></td>
                <td>${item.edificio}</td>
                <td><span class="badge ${item.status === 'ConcluÃƒÂ­da' ? 'bg-success' : 'bg-warning'}">${item.status}</span></td>
                <td>${item.data_solicitacao}</td>
                <td>${item.tempo_reparo || '-'}</td>
            </tr>
        `;
    });
    
    html += `
                </tbody>
            </table>
        </div>
        ${resumo.length > 20 ? `<p class="text-muted text-center">Mostrando 20 de ${resumo.length} registros</p>` : ''}
    `;
    
    container.innerHTML = html;
}

function limparFiltrosKPIs() {
    // Ã°Å¸â€œâ€¦ LIMPA TODOS OS FILTROS (incluindo datas)
    document.getElementById('data-inicio').value = '';
    document.getElementById('data-fim').value = '';
    document.getElementById('filtro-periodo').value = '';
    document.getElementById('filtro-status').value = '';
    document.getElementById('filtro-categoria').value = '';
    document.getElementById('filtro-edificio').value = '';
    
    // Limpa filtros ativos
    filtrosAtivos = {};
    
    // Restaura dados originais
    dadosKPIsFiltrados = dadosKPIsOriginais;
    
    // Atualiza cards
    atualizarCards(dadosKPIsOriginais);
    
    // Recria grÃƒÂ¡ficos
    criarGraficos();
    
    // Esconde indicador de filtros
    document.getElementById('filtros-ativos').style.display = 'none';
    
    // Limpa tabela de resumo
    document.getElementById('tabela-resumo').innerHTML = '<p class="text-muted text-center">Use os filtros acima ou clique nos grÃƒÂ¡ficos para ver dados especÃƒÂ­ficos.</p>';
    
    console.log('Ã°Å¸Â§Â¹ Filtros de KPIs limpos');
}

function debugFiltros() {
    console.log('Ã°Å¸â€Â DEBUG - Estado atual dos filtros:');
    console.log('   Data inÃƒÂ­cio:', document.getElementById('data-inicio').value);
    console.log('   Data fim:', document.getElementById('data-fim').value);
    console.log('   PerÃƒÂ­odo:', document.getElementById('filtro-periodo').value);
    console.log('   Status:', document.getElementById('filtro-status').value);
    console.log('   Categoria:', document.getElementById('filtro-categoria').value);
    console.log('   EdifÃƒÂ­cio:', document.getElementById('filtro-edificio').value);
    console.log('   Filtros ativos:', filtrosAtivos);
    console.log('   Dados originais:', dadosKPIsOriginais);
    console.log('   Dados filtrados:', dadosKPIsFiltrados);
}

</script>
{% endblock %}
--- Fim do código: kpis.html ---

--- Início do código: login.html ---
<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Login - Sistema de Elevadores TJ/MG</title>
    
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <!-- CSS customizado -->
    <link rel="stylesheet" href="{{ url_for('static', filename='css/style.css') }}">
    
    <style>
        body {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        .login-container {
            background: white;
            border-radius: 15px;
            box-shadow: 0 15px 35px rgba(0, 0, 0, 0.1);
            overflow: hidden;
            max-width: 400px;
            width: 100%;
            margin: 20px;
        }
        
        .login-header {
            background: linear-gradient(135deg, #007bff 0%, #0056b3 100%);
            color: white;
            padding: 2rem;
            text-align: center;
        }
        
        .login-header i {
            font-size: 3rem;
            margin-bottom: 1rem;
            opacity: 0.9;
        }
        
        .login-body {
            padding: 2rem;
        }
        
        .form-control {
            border-radius: 10px;
            border: 2px solid #e9ecef;
            padding: 12px 15px;
            transition: all 0.3s ease;
        }
        
        .form-control:focus {
            border-color: #007bff;
            box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
        }
        
        .btn-login {
            background: linear-gradient(135deg, #007bff 0%, #0056b3 100%);
            border: none;
            border-radius: 10px;
            padding: 12px;
            font-weight: 600;
            transition: all 0.3s ease;
            width: 100%;
        }
        
        .btn-login:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0, 123, 255, 0.4);
        }
        
        .input-group-text {
            border: 2px solid #e9ecef;
            border-right: none;
            background: #f8f9fa;
            border-radius: 10px 0 0 10px;
        }
        
        .input-group .form-control {
            border-left: none;
            border-radius: 0 10px 10px 0;
        }
        
        .alert {
            border-radius: 10px;
            border: none;
        }
        
        .footer-info {
            background: #f8f9fa;
            padding: 1rem;
            text-align: center;
            font-size: 0.875rem;
            color: #6c757d;
        }
        
        .loading {
            display: none;
        }
        
        .btn-login:disabled {
            opacity: 0.7;
            cursor: not-allowed;
        }
    </style>
</head>
<body>
    <div class="login-container">
        <!-- CabeÃ§alho -->
        <div class="login-header">
            <i class="fas fa-building"></i>
            <h3 class="mb-0">TJ/MG</h3>
            <p class="mb-0">Sistema de Elevadores</p>
        </div>
        
        <!-- Corpo do formulÃƒÂ¡rio -->
        <div class="login-body">
            <!-- Mensagens Flash -->
            {% with messages = get_flashed_messages(with_categories=true) %}
                {% if messages %}
                    {% for category, message in messages %}
                        <div class="alert alert-{{ 'danger' if category == 'danger' else 'warning' if category == 'warning' else 'info' if category == 'info' else 'success' }} alert-dismissible fade show" role="alert">
                            <i class="fas fa-{{ 'exclamation-triangle' if category in ['danger', 'warning'] else 'info-circle' if category == 'info' else 'check-circle' }}"></i>
                            {{ message }}
                            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                        </div>
                    {% endfor %}
                {% endif %}
            {% endwith %}
            
            <!-- FormulÃƒÂ¡rio de Login -->
            <form method="POST" id="loginForm">
                <div class="mb-3">
                    <label for="usuario" class="form-label">
                        <i class="fas fa-user"></i> UsuÃƒÂ¡rio
                    </label>
                    <div class="input-group">
                        <span class="input-group-text">
                            <i class="fas fa-user"></i>
                        </span>
                        <input type="text" 
                               class="form-control" 
                               id="usuario" 
                               name="usuario" 
                               placeholder="Digite seu usuÃƒÂ¡rio"
                               required
                               autocomplete="username">
                    </div>
                </div>
                
                <div class="mb-4">
                    <label for="senha" class="form-label">
                        <i class="fas fa-lock"></i> Senha
                    </label>
                    <div class="input-group">
                        <span class="input-group-text">
                            <i class="fas fa-lock"></i>
                        </span>
                        <input type="password" 
                               class="form-control" 
                               id="senha" 
                               name="senha" 
                               placeholder="Digite sua senha"
                               required
                               autocomplete="current-password">
                        <button class="btn btn-outline-secondary" 
                                type="button" 
                                id="togglePassword"
                                style="border-radius: 0 10px 10px 0;">
                            <i class="fas fa-eye"></i>
                        </button>
                    </div>
                </div>
                
                <button type="submit" class="btn btn-primary btn-login" id="btnLogin">
                    <span class="normal-text">
                        <i class="fas fa-sign-in-alt"></i> Entrar
                    </span>
                    <span class="loading">
                        <i class="fas fa-spinner fa-spin"></i> Entrando...
                    </span>
                </button>
            </form>
        </div>
        
        <!-- RodapÃƒÂ© -->
        <div class="footer-info">
            <small>
                <i class="fas fa-shield-alt"></i>
                Acesso restrito - Tribunal de JustiÃ§a de Minas Gerais
            </small>
        </div>
    </div>

    <!-- Bootstrap JS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    
    <script>
        // Toggle para mostrar/ocultar senha
        document.getElementById('togglePassword').addEventListener('click', function() {
            const senhaInput = document.getElementById('senha');
            const icon = this.querySelector('i');
            
            if (senhaInput.type === 'password') {
                senhaInput.type = 'text';
                icon.classList.remove('fa-eye');
                icon.classList.add('fa-eye-slash');
            } else {
                senhaInput.type = 'password';
                icon.classList.remove('fa-eye-slash');
                icon.classList.add('fa-eye');
            }
        });
        
        // Loading no botÃ£o de login
        document.getElementById('loginForm').addEventListener('submit', function() {
            const btn = document.getElementById('btnLogin');
            const normalText = btn.querySelector('.normal-text');
            const loadingText = btn.querySelector('.loading');
            
            btn.disabled = true;
            normalText.style.display = 'none';
            loadingText.style.display = 'inline';
        });
        
        // Foco automÃƒÂ¡tico no campo usuÃƒÂ¡rio
        document.addEventListener('DOMContentLoaded', function() {
            document.getElementById('usuario').focus();
        });
        
        // Enter para submeter o formulÃƒÂ¡rio
        document.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                document.getElementById('loginForm').submit();
            }
        });
    </script>
</body>
</html>
--- Fim do código: login.html ---

--- Início do código: dashboard_v2.js ---
// dashboard_v2.js

// ========== FASE 5: FILTROS INTERATIVOS ==========

// VariÃƒÂ¡veis globais
let dadosOriginais = initialGeojsonData;
let mapaLeaflet = null;
let marcadoresAtuais = []; // NOVO: Controla marcadores atuais

// Inicializa o mapa
function inicializarMapa() {
    console.log('Inicializando mapa v2.0 com filtros...');
    
    mapaLeaflet = L.map('mapa').setView([-19.92, -43.92], 7);

    console.log('Tamanho interno do mapa Leaflet (mapaLeaflet._size):', mapaLeaflet._size);
    
    L.tileLayer('https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}{r}.png', {
        attribution: 'Ã‚Â© OpenStreetMap contributors, Ã‚Â© CartoDB'
    }).addTo(mapaLeaflet);
    
    adicionarMarcadores(dadosOriginais);
}

// NOVO: Remove todos os marcadores
function limparMarcadores() {
    marcadoresAtuais.forEach(marker => {
        mapaLeaflet.removeLayer(marker);
    });
    marcadoresAtuais = [];
}

// ATUALIZADO: Adiciona marcadores ao mapa
function adicionarMarcadores(geojsonData) {
    // Limpa marcadores existentes
    limparMarcadores();
    
    if (!geojsonData || !geojsonData.features || geojsonData.features.length === 0) {
        console.warn("Nenhum dado GeoJSON ou features para adicionar marcadores.");
        return;
    }    

    // if (!geojsonData || !geojsonData.features) return;
    
    console.log(`Adicionando ${geojsonData.features.length} marcadores...`);


    geojsonData.features.forEach((feature, index) => {
        const props = feature.properties;
        const coords = feature.geometry.coordinates;

        if (!Array.isArray(coords) || coords.length !== 2 || 
            typeof coords[0] !== 'number' || typeof coords[1] !== 'number' || 
            isNaN(coords[0]) || isNaN(coords[1])) 
        {
            console.error(`ERRO: Coordenadas invÃ¡lidas para feature no Ã­ndice ${index}. Pulando este marcador.`);
            console.error('Coordenadas:', coords);
            console.error('Feature completa:', feature);
            // Retorna para pular este marcador problemÃ¡tico e continuar com os outros
            return; 
        }

        const latlng = [coords[1], coords[0]];      

        const marker = L.circleMarker(latlng,{
            radius: props.tamanhoMarcador,
            fillColor: props.corMarcador,
            color: props.corMarcador,
            weight: 2,
            opacity: 1,
            fillOpacity: 0.8
        })
        
        // Tooltip
        let tooltipText = `${props.cidade}-${props.tipo}<br/>
        ${props.qtd_elev} elevadores - ${props.marcaLicitacao}<br/>
        ${props.regiao} - ${props.status}`;
        if(props.nElevadorParado && props.nElevadorParado > 0){
            tooltipText += `<br/><strong style="color: ${props.corMarcador ||'#dc3545'};">${props.nElevadorParado} parado(s)</strong>`;
        }
        marker.bindTooltip(tooltipText,{sticky:true});
        
        // Popup
        let popupContent = `<div style="font-family: Arial, sans-serif;">
            <h4 style="margin: 0 0 10px 0; color: #333;">${props.unidade}</h4>
            <p><strong>Cidade:</strong> ${props.cidade}</p>
            <p><strong>EndereÃ§o:</strong> ${props.endereco}</p>
            <p><strong>Tipo:</strong> ${props.tipo}</p>
            <p><strong>Elevadores:</strong> ${props.qtd_elev}</p>
            <p><strong>Paradas:</strong> ${props.paradas}</p>
            <p><strong>Marca:</strong> ${props.marca}</p>
            <p><strong>Empresa:</strong> ${props.empresa}</p>
            <p><strong>Status:</strong> <span style="color: ${props.corMarcador};">${props.status}</span></p>`;
        
        if ((props.nElevadorParado && props.nElevadorParado > 0) || props.status && props.status.toLowerCase().includes('suspenso')) {    
            if (props.nElevadorParado && props.nElevadorParado > 0) {
                popupContent += `<hr style="margin: 10px 0;"><p style="color: #dc3545;"><strong>âš ï¸ Elevadores Parados:</strong> ${props.nElevadorParado}</p>`;
            }
            if (props.dataDeParada) {
                popupContent += `<p style="color: #dc3545;"><strong>ðŸ“… Data da Parada:</strong> ${props.dataDeParada}</p>`;
            }
            if (props.previsaoDeRetorno) {
                popupContent += `<p style="color: #dc3545;"><strong>ðŸ”„ PrevisÃ£o de Retorno:</strong> ${props.previsaoDeRetorno}</p>`;
            }
        }
        popupContent += '</div>';
        
        marker.bindPopup(popupContent, {maxWidth: 350});
        marker.addTo(mapaLeaflet);
        marcadoresAtuais.push(marker);
    });
}

// NOVO: Aplica filtros E atualiza o mapa
function aplicarFiltros() {
    console.log('Ã°Å¸â€Â Aplicando filtros v2.0 com atualizaÃ§Ã£o do mapa...');
    
    const tipos = obterSelecionados('tipo');
    const regioes = obterSelecionados('regiao');
    const situacoes = obterSelecionados('situacao');
    
    console.log('Filtros selecionados:', {tipos, regioes, situacoes});
    
    // Mostra loading
    mostrarLoading(true);
    
    const params = new URLSearchParams();
    tipos.forEach(tipo => params.append('tipo', tipo));
    regioes.forEach(regiao => params.append('regiao', regiao));
    situacoes.forEach(situacao => params.append('situacao', situacao));
    
    // NOVO: Chama API que retorna dados filtrados
    fetch(`/v2/api/dados-elevadores-filtrados?${params}`)
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                // Atualiza estatÃƒÂ­sticas
                atualizarCards(data.data.stats);
                
                // NOVO: Atualiza estatÃƒÂ­sticas detalhadas
                if (data.data.stats_detalhadas) {
                    atualizarStatsDetalhadas(data.data.stats_detalhadas);
                }
                
                // NOVO: Atualiza o mapa com dados filtrados
                adicionarMarcadores(data.data.geojson);
                
                // Ajusta zoom se necessÃƒÂ¡rio
                if (data.data.geojson.features.length > 0) {
                    ajustarZoomParaDados(data.data.geojson);
                }
                
                console.log('Filtros aplicados e mapa atualizado');
            } else {
                alert('Erro ao aplicar filtros: ' + data.message);
            }
        })
        .catch(error => {
            console.error('Erro ao aplicar filtros:', error);
            alert('Erro na requisiÃ§Ã£o de filtros');
        })
        .finally(() => {
            mostrarLoading(false);
        });
}

// NOVO: Ajusta zoom para mostrar todos os dados
function ajustarZoomParaDados(geojsonData) {
    if (!geojsonData.features || geojsonData.features.length === 0) return;
    
    const group = new L.featureGroup(marcadoresAtuais);
    mapaLeaflet.fitBounds(group.getBounds(), {padding: [20, 20]});
}

// Ã¢Å“â€¦ NOVO: Mostra/esconde loading
function mostrarLoading(mostrar) {
    const btn = document.querySelector('button[onclick="aplicarFiltros()"]');
    if (btn) {
        if (mostrar) {
            btn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Filtrando...';
            btn.disabled = true;
        } else {
            btn.innerHTML = '<i class="fas fa-search"></i> Aplicar Filtros';
            btn.disabled = false;
        }
    }
}

// ObtÃƒÂ©m valores selecionados
function obterSelecionados(categoria) {
    const checkboxes = document.querySelectorAll(`input[id^="check-${categoria}-"]:checked`);
    return Array.from(checkboxes).map(cb => cb.value);
}

// Atualiza cards de estatÃƒÂ­sticas
function atualizarCards(stats) {
    const elementos = {
        'stat-predios': stats.total_predios || 0,
        'stat-elevadores': stats.total_elevadores || 0,
        'stat-cidades': stats.cidades || 0,
        'stat-regioes': stats.regioes || 0,
        'stat-ativos': stats.em_atividade || 0,
        'stat-parados': stats.elevadores_parados || 0,
        'stat-suspensos': stats.elevadores_suspensos || 0
    };
    
    for (let id in elementos) {
        const elem = document.getElementById(id);
        if (elem) {
            // Ã¢Å“â€¦ NOVO: AnimaÃ§Ã£o nos nÃƒÂºmeros
            animarNumero(elem, parseInt(elem.textContent) || 0, elementos[id]);
        }
    }
    
    // Atualiza contador
    document.getElementById('total-elevadores-filtro').textContent = stats.total_elevadores || 0;
    document.getElementById('total-locais-filtro').textContent = stats.total_predios || 0;
}

// Ã¢Å“â€¦ NOVO: AnimaÃ§Ã£o de nÃƒÂºmeros
function animarNumero(elemento, valorInicial, valorFinal) {
    const duracao = 500; // ms
    const passos = 20;
    const incremento = (valorFinal - valorInicial) / passos;
    let valorAtual = valorInicial;
    let passo = 0;
    
    const timer = setInterval(() => {
        passo++;
        valorAtual += incremento;
        
        if (passo >= passos) {
            elemento.textContent = valorFinal;
            clearInterval(timer);
        } else {
            elemento.textContent = Math.round(valorAtual);
        }
    }, duracao / passos);
}

// Ã¢Å“â€¦ NOVO: Seleciona todos os filtros
function selecionarTodos() {
    console.log('Selecionando todos os filtros...');
    document.querySelectorAll('input[type="checkbox"]').forEach(cb => cb.checked = true);
    aplicarFiltros(); // Aplica automaticamente
}

// Ã¢Å“â€¦ ATUALIZADO: Limpa filtros e restaura dados originais
function limparFiltros() {
    console.log('Limpando filtros e restaurando mapa...');
    
    // Limpa checkboxes
    document.querySelectorAll('input[type="checkbox"]').forEach(cb => cb.checked = false);
    
    // Restaura dados originais no mapa
    adicionarMarcadores(dadosOriginais);
    
    // Restaura estatÃƒÂ­sticas originais
    fetch('/v2/api/dados-elevadores')
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                atualizarCards(data.data.stats);
                ajustarZoomParaDados(data.data.geojson);
                atualizarStatsDetalhadas(data.data.stats_detalhadas);
            }
        })
        .catch(error => console.error('Erro ao restaurar dados:', error));
}

// Ã¢Å“â€¦ ATUALIZADO: Atualiza estatÃƒÂ­sticas detalhadas
function atualizarStatsDetalhadas(statsDetalhadas) {
    // Atualiza por tipo
    atualizarListaStats('stats-por-tipo', statsDetalhadas.por_tipo);
    
    // Atualiza por regiÃ£o
    atualizarListaStats('stats-por-regiao', statsDetalhadas.por_regiao);
    
    // Atualiza por marca
    atualizarListaStats('stats-por-marca', statsDetalhadas.por_marca);
    
    // Atualiza por status
    atualizarListaStatsComCor('stats-por-status', statsDetalhadas.por_status);
    
    // Atualiza elevadores parados
    atualizarElevadoresParados(statsDetalhadas.elevadores_parados);
}

function atualizarListaStats(elementId, dados) {
    const elemento = document.getElementById(elementId);
    if (!elemento || !dados) return;
    
    let html = '';
    for (const [chave, valor] of Object.entries(dados)) {
        html += `<div class="d-flex justify-content-between">
            <span>${chave}:</span>
            <strong>${valor}</strong>
        </div>`;
    }
    
    elemento.innerHTML = html || '<div class="text-muted">Nenhum dado</div>';
}

function atualizarListaStatsComCor(elementId, dados) {
    const elemento = document.getElementById(elementId);
    if (!elemento || !dados) return;
    
    let html = '';
    for (const [chave, valor] of Object.entries(dados)) {
        let classe = '';
        if (chave === 'Em atividade') classe = 'text-success';
        else if (chave === 'Parados') classe = 'text-danger';
        else classe = 'text-warning';
        
        html += `<div class="d-flex justify-content-between">
            <span class="${classe}">${chave}:</span>
            <strong>${valor}</strong>
        </div>`;
    }
    
    elemento.innerHTML = html || '<div class="text-muted">Nenhum dado</div>';
}

function atualizarElevadoresParados(elevadoresParados) {
    const tbody = document.getElementById('elevadores-parados-tbody');
    const section = document.getElementById('elevadores-parados-section');
    
    if (!tbody || !section) return;
    
    if (!elevadoresParados || elevadoresParados.length === 0) {
        section.style.display = 'none';
        return;
    }
    
    section.style.display = 'block';
    
    let html = '';
    elevadoresParados.forEach(elevador => {
        html += `<tr>
            <td>${elevador.unidade}</td>
            <td>${elevador.cidade}</td>
            <td>${elevador.tipo}</td>
            <td>${elevador.regiao}</td>
            <td class="text-danger"><strong>${elevador.quantidade_parada}</strong></td>
            <td>${elevador.total_elevadores}</td>
            <td>${elevador.marca}</td>
        </tr>`;
    });
    
    tbody.innerHTML = html;
}

// NOVO: Aplicar filtros automaticamente quando checkbox muda
function configurarFiltrosAutomaticos() {
    document.querySelectorAll('input[type="checkbox"]').forEach(checkbox => {
        checkbox.addEventListener('change', function() {
            // Aplica filtros automaticamente apÃƒÂ³s 500ms de inatividade
            clearTimeout(window.filtroTimeout);
            window.filtroTimeout = setTimeout(aplicarFiltros, 500);
        });
    });
}

// Atualiza dados
function atualizarDados() {
    const btn = event.target;
    const originalText = btn.innerHTML;
    btn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Atualizando...';
    btn.disabled = true;
    
    fetch('/v2/atualizar-dados')
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                alert('Dados atualizados!\n' + data.message);
                location.reload();
            } else {
                alert('Erro: ' + data.message);
            }
        })
        .catch(error => alert('Erro na requisiÃ§Ã£o'))
        .finally(() => {
            btn.innerHTML = originalText;
            btn.disabled = false;
        });
}

// ATUALIZADO: Inicializa quando a pÃ¡gina carrega
document.addEventListener('DOMContentLoaded', function() {
    console.log('Dashboard v2.0 carregado com filtros interativos');
    const mapaElement = document.getElementById('mapa');
    if (mapaElement) {
        // Verifique as dimensÃµes do mapaElement ANTES de inicializar
        console.log('DimensÃµes do elemento #mapa:', mapaElement.offsetWidth, mapaElement.offsetHeight);
        if (mapaElement.offsetWidth === 0 || mapaElement.offsetHeight === 0) {
            console.error('Elemento #mapa estÃ¡ com dimensÃµes zero. Isso pode causar problemas de renderizaÃ§Ã£o do Leaflet.');
            // Tente forÃ§ar um pequeno delay para a inicializaÃ§Ã£o do mapa
            setTimeout(function() {
                inicializarMapa();
                configurarFiltrosAutomaticos();
            }, 100); // Pequeno delay
        } else {
            inicializarMapa();
            configurarFiltrosAutomaticos();
        }
    } else {
        console.error('Elemento #mapa nÃ£o encontrado no DOM!');
    }
});
--- Fim do código: dashboard_v2.js ---

--- Início do código: filtros_mapa.js ---
    // static/js/filtros_mapa.js - VersÃ£o com captura melhorada

    let dadosOriginais = null;
    let dadosFiltrados = null;
    let mapaLeaflet = null;
    let marcadoresOriginais = [];

    console.log('Ã°Å¸â€Â§ Script de filtros carregado');

    // FunÃ§Ã£o para inicializar o sistema de filtros
    function inicializarFiltros(geojsonData) {
        console.log('Ã°Å¸Å¡â‚¬ Inicializando filtros...');
        console.log('Ã°Å¸â€œÅ  Dados recebidos:', geojsonData);
        
        dadosOriginais = geojsonData;
        dadosFiltrados = geojsonData;
        
        if (dadosOriginais && dadosOriginais.features) {
            console.log('Ã¢Å“â€¦ Features disponÃƒÂ­veis:', dadosOriginais.features.length);
        } else {
            console.error('Ã¢ÂÅ’ Nenhuma feature encontrada nos dados');
            return;
        }
        
        // Captura o mapa Leaflet com mÃƒÂºltiplas estratÃƒÂ©gias
        capturarMapaLeaflet();
    }

    // FunÃ§Ã£o para capturar o mapa Leaflet - VERSÃƒÆ’O MELHORADA
    function capturarMapaLeaflet() {
        console.log('Ã°Å¸â€”ÂºÃ¯Â¸Â Tentando capturar mapa Leaflet com mÃƒÂºltiplas estratÃƒÂ©gias...');
        
        let tentativas = 0;
        const maxTentativas = 15;
        
        const verificarMapa = () => {
            tentativas++;
            console.log(`Ã°Å¸â€Â Tentativa ${tentativas}/${maxTentativas} de capturar mapa...`);
            
            // ESTRATÃƒâ€°GIA 1: Procurar por variÃƒÂ¡veis map_*
            const mapKeys = Object.keys(window).filter(key => key.startsWith('map_'));
            console.log('Ã¯Â¿Â½Ã¯Â¿Â½ Chaves map_* encontradas:', mapKeys);
            
            for (let key of mapKeys) {
                const mapInstance = window[key];
                if (mapInstance && mapInstance._container) {
                    mapaLeaflet = mapInstance;
                    console.log('Ã¢Å“â€¦ Mapa capturado via map_*:', key);
                    finalizarCaptura();
                    return true;
                }
            }
            
            // ESTRATÃƒâ€°GIA 2: Procurar em todas as variÃƒÂ¡veis globais
            for (let key in window) {
                const obj = window[key];
                if (obj && typeof obj === 'object' && obj._container && obj.addLayer) {
                    mapaLeaflet = obj;
                    console.log('Ã¢Å“â€¦ Mapa capturado via varredura global:', key);
                    finalizarCaptura();
                    return true;
                }
            }
            
            // ESTRATÃƒâ€°GIA 3: Usar DOM + Leaflet API
            const mapContainers = document.querySelectorAll('.folium-map');
            console.log('Ã¯Â¿Â½Ã¯Â¿Â½ Containers .folium-map encontrados:', mapContainers.length);
            
            for (let container of mapContainers) {
                if (container._leaflet_id && window.L) {
                    // Tenta acessar o mapa via container
                    const maps = window.L._layer ? Object.values(window.L._layer) : [];
                    for (let map of maps) {
                        if (map._container === container) {
                            mapaLeaflet = map;
                            console.log('Ã¢Å“â€¦ Mapa capturado via DOM/Leaflet:', container.id);
                            finalizarCaptura();
                            return true;
                        }
                    }
                    
                    // Tenta acessar via _leaflet_id
                    if (window.L && window.L.map && container._leaflet_id) {
                        try {
                            const mapInstance = window.L.map(container);
                            if (mapInstance && mapInstance._container) {
                                mapaLeaflet = mapInstance;
                                console.log('Ã¢Å“â€¦ Mapa capturado via L.map()');
                                finalizarCaptura();
                                return true;
                            }
                        } catch (e) {
                            console.log('Ã¢Å¡Â Ã¯Â¸Â Erro ao tentar L.map():', e.message);
                        }
                    }
                }
            }
            
            // ESTRATÃƒâ€°GIA 4: Interceptar criaÃ§Ã£o do mapa
            if (window.L && !window._mapInterceptorAdded) {
                window._mapInterceptorAdded = true;
                const originalMap = window.L.map;
                window.L.map = function(...args) {
                    const mapInstance = originalMap.apply(this, args);
                    console.log('Ã°Å¸Å½Â¯ Mapa interceptado na criaÃ§Ã£o!');
                    mapaLeaflet = mapInstance;
                    finalizarCaptura();
                    return mapInstance;
                };
            }
            
            // ESTRATÃƒâ€°GIA 5: Procurar instÃƒÂ¢ncias ativas do Leaflet
            if (window.L && window.L.Map) {
                const allMaps = [];
                
                // Tenta encontrar todas as instÃƒÂ¢ncias de L.Map
                document.querySelectorAll('div').forEach(div => {
                    if (div._leaflet && div._leaflet instanceof window.L.Map) {
                        allMaps.push(div._leaflet);
                    }
                });
                
                if (allMaps.length > 0) {
                    mapaLeaflet = allMaps[0];
                    console.log('Ã¢Å“â€¦ Mapa encontrado via instÃƒÂ¢ncia L.Map');
                    finalizarCaptura();
                    return true;
                }
            }
            
            if (tentativas < maxTentativas) {
                setTimeout(verificarMapa, 1000);
            } else {
                console.error('Ã¢ÂÅ’ NÃ£o foi possÃƒÂ­vel capturar o mapa apÃƒÂ³s', maxTentativas, 'tentativas');
                console.log('Ã°Å¸â€Â Debug - window.L:', window.L);
                console.log('Ã°Å¸â€Â Debug - document.querySelectorAll(".folium-map"):', document.querySelectorAll('.folium-map'));
                
                // Como ÃƒÂºltimo recurso, vamos trabalhar diretamente com o DOM
                usarFallbackDOM();
            }
        };
        
        verificarMapa();
    }

    // FunÃ§Ã£o para finalizar a captura do mapa
    function finalizarCaptura() {
        if (mapaLeaflet) {
            console.log('Ã°Å¸Å½â€° Mapa capturado com sucesso!');
            console.log('Ã°Å¸â€œÂ Container do mapa:', mapaLeaflet._container);
            
            // Salva marcadores originais
            salvarMarcadoresOriginais();
        }
    }

    // FunÃ§Ã£o FALLBACK - trabalha diretamente com DOM se nÃ£o conseguir capturar o mapa
    function usarFallbackDOM() {
        console.log('Ã¯Â¿Â½Ã¯Â¿Â½ Usando fallback DOM...');
        
        // Se nÃ£o conseguir capturar o mapa, pelo menos atualiza visualmente
        window.atualizarMapaFallback = function() {
            console.log('Ã°Å¸â€â€ž Atualizando mapa via fallback DOM...');
            
            const mapContainer = document.querySelector('.folium-map');
            if (mapContainer) {
                // Cria um overlay com informaÃ§ÃƒÂµes dos filtros
                let overlay = document.getElementById('filtro-overlay');
                if (!overlay) {
                    overlay = document.createElement('div');
                    overlay.id = 'filtro-overlay';
                    overlay.style.cssText = `
                        position: absolute;
                        top: 50%;
                        left: 50%;
                        transform: translate(-50%, -50%);
                        background: rgba(0,0,0,0.8);
                        color: white;
                        padding: 20px;
                        border-radius: 10px;
                        z-index: 10000;
                        text-align: center;
                        font-family: Arial, sans-serif;
                    `;
                    mapContainer.style.position = 'relative';
                    mapContainer.appendChild(overlay);
                }
                
                const totalFiltrados = dadosFiltrados.features ? dadosFiltrados.features.length : 0;
                overlay.innerHTML = `
                    <h4>Ã°Å¸â€Â Filtros Ativos</h4>
                    <p>${totalFiltrados} locais selecionados</p>
                    <small>Mapa serÃƒÂ¡ recarregado automaticamente</small>
                `;
                
                // Remove o overlay apÃƒÂ³s 3 segundos
                setTimeout(() => {
                    if (overlay) overlay.remove();
                }, 3000);
            }
        };
    }

    // FunÃ§Ã£o para salvar referÃƒÂªncias dos marcadores originais
    function salvarMarcadoresOriginais() {
        console.log('Ã°Å¸â€™Â¾ Salvando marcadores originais...');
        
        marcadoresOriginais = [];
        
        if (mapaLeaflet) {
            mapaLeaflet.eachLayer(function(layer) {
                // Ignora tiles e outras camadas nÃ£o-marcador
                if (layer.feature || layer._latlng || (layer._layers && Object.keys(layer._layers).length > 0)) {
                    marcadoresOriginais.push(layer);
                    console.log('Ã°Å¸â€™Â¾ Marcador salvo:', layer);
                }
            });
            
            console.log(`Ã¢Å“â€¦ ${marcadoresOriginais.length} marcadores originais salvos`);
        }
    }

    // FunÃ§Ã£o para obter valores selecionados
    function obterSelecionados(categoria) {
        const checkboxes = document.querySelectorAll(`input[id^="check-${categoria}-"]:checked`);
        const valores = Array.from(checkboxes).map(cb => cb.value);
        console.log(`Ã°Å¸â€Â Filtros selecionados para ${categoria}:`, valores);
        return valores;
    }

    // FunÃ§Ã£o para aplicar filtros - COM SITUAÃƒâ€¡ÃƒÆ’O
    function aplicarFiltros() {
        console.log('Ã°Å¸Å½Â¯ ========== APLICANDO FILTROS ==========');
        
        const tiposSelecionados = obterSelecionados('tipo');
        const regioesSelecionadas = obterSelecionados('regiao');
        const marcasSelecionadas = obterSelecionados('marca');
        const empresasSelecionadas = obterSelecionados('empresa');
        const situacoesSelecionadas = obterSelecionados('situacao'); // Ã°Å¸â€ â€¢ NOVO FILTRO

        console.log('Ã°Å¸â€œâ€¹ Resumo dos filtros:', {
            tipos: tiposSelecionados,
            regioes: regioesSelecionadas,
            marcas: marcasSelecionadas,
            empresas: empresasSelecionadas,
            situacoes: situacoesSelecionadas // Ã°Å¸â€ â€¢ NOVO
        });

        if (!dadosOriginais || !dadosOriginais.features) {
            console.error('Ã¢ÂÅ’ Dados originais nÃ£o disponÃƒÂ­veis');
            return;
        }

        // Filtra os dados
        const featuresOriginal = dadosOriginais.features.length;
        
        dadosFiltrados = {
            ...dadosOriginais,
            features: dadosOriginais.features.filter(feature => {
                const props = feature.properties;
                
                const passaTipo = tiposSelecionados.length === 0 || tiposSelecionados.includes(props.tipo);
                const passaRegiao = regioesSelecionadas.length === 0 || regioesSelecionadas.includes(props.regiao);
                const passaMarca = marcasSelecionadas.length === 0 || marcasSelecionadas.includes(props.marcaLicitacao);
                const passaEmpresa = empresasSelecionadas.length === 0 || empresasSelecionadas.includes(props.empresa);
                
                // Ã°Å¸â€ â€¢ NOVA LÃƒâ€œGICA DE FILTRO POR SITUAÃƒâ€¡ÃƒÆ’O
                let passaSituacao = true;
                if (situacoesSelecionadas.length > 0) {
                    passaSituacao = false;
                    
                    // Verifica cada situaÃ§Ã£o selecionada
                    situacoesSelecionadas.forEach(situacao => {
                        if (situacao === 'ativos') {
                            // Ativos: status ativo E sem elevadores parados
                            if (props.status && props.status.toLowerCase().includes('atividade') && 
                                (!props.nElevadorParado || props.nElevadorParado === 0)) {
                                passaSituacao = true;
                            }
                        } else if (situacao === 'suspensos') {
                            // Suspensos: status suspenso
                            if (props.status && props.status.toLowerCase().includes('suspenso')) {
                                passaSituacao = true;
                            }
                        } else if (situacao === 'parados') {
                            // Parados: tem elevadores parados
                            if (props.nElevadorParado && props.nElevadorParado > 0) {
                                passaSituacao = true;
                            }
                        }
                    });
                }
                
                return passaTipo && passaRegiao && passaMarca && passaEmpresa && passaSituacao;
            })
        };

        const featuresFiltradas = dadosFiltrados.features.length;
        console.log(`Ã°Å¸â€œÅ  Filtragem concluÃƒÂ­da: ${featuresOriginal} Ã¢â€ â€™ ${featuresFiltradas} features`);

        // Atualiza o mapa
        atualizarMapa();
        
        // Atualiza contador
        atualizarContadorFiltros();
        
        // Atualiza estatÃƒÂ­sticas
        atualizarEstatisticasDashboard();
        
        console.log('Ã¢Å“â€¦ ========== FILTROS APLICADOS ==========');
    }

    // FunÃ§Ã£o para criar um marcador
    function criarMarcador(feature) {
        const props = feature.properties;
        const coords = feature.geometry.coordinates;
        const latlng = [coords[1], coords[0]]; // Leaflet usa [lat, lng]
        
        // Ã°Å¸Å½Â¨ NOVA LÃƒâ€œGICA DE CORES - PRIORIDADE: Parados > Suspensos > Ativos
        let cor = '#6c757d'; // Cinza padrÃ£o
        
        if (props.temElevadorParado || (props.nElevadorParado && props.nElevadorParado > 0)) {
            cor = '#dc3545'; // Ã°Å¸â€Â´ Vermelho para elevadores parados
        } else if (props.status && props.status.toLowerCase().includes('suspenso')) {
            cor = '#ffc107'; // Ã°Å¸Å¸Â¡ Amarelo para suspensos (CORRIGIDO)
        } else if (props.status && props.status.toLowerCase().includes('atividade')) {
            cor = '#28a745'; // Ã°Å¸Å¸Â¢ Verde para ativos
        }
        
        // Define tamanho baseado na quantidade
        const radius = props.qtd_elev >= 5 ? 10 : (props.qtd_elev >= 3 ? 8 : 6);
        
        // Cria o marcador
        const marker = L.circleMarker(latlng, {
            radius: radius,
            fillColor: cor,
            color: cor,
            weight: 2,
            opacity: 1,
            fillOpacity: 0.8
        });
        
        // Ã°Å¸â€œÂ TOOLTIP ATUALIZADO
        let tooltipText = `${props.cidade} - ${props.tipo}<br/>
            ${props.qtd_elev} elevadores - ${props.marcaLicitacao}<br/>
            ${props.regiao} - ${props.status}`;
        
        if (props.nElevadorParado && props.nElevadorParado > 0) {
            tooltipText += `<br/><strong style="color: #dc3545;">Ã¢Å¡Â Ã¯Â¸Â ${props.nElevadorParado} parado(s)</strong>`;
        }

        marker.bindTooltip(tooltipText, {sticky: true});
        
        // Ã°Å¸â€œÂ POPUP ATUALIZADO
        let popupContent = `<div style="font-family: Arial, sans-serif;">
                <h4 style="margin: 0 0 10px 0; color: #333;">${props.unidade}</h4>
                <p><strong>Cidade:</strong> ${props.cidade}</p>
                <p><strong>EndereÃ§o:</strong> ${props.endereco}</p>
                <p><strong>Tipo:</strong> ${props.tipo}</p>
                <p><strong>Elevadores:</strong> ${props.qtd_elev}</p>
                <p><strong>Paradas:</strong> ${props.paradas}</p>
                <p><strong>Marca:</strong> ${props.marca}</p>
                <p><strong>Empresa:</strong> ${props.empresa}</p>
                <p><strong>Status:</strong> ${props.status}</p>`;
        
        // Ã°Å¸â€ â€¢ ADICIONA INFORMAÃƒâ€¡Ãƒâ€¢ES DE ELEVADORES PARADOS E SUSPENSOS
        
        if ((props.nElevadorParado && props.nElevadorParado > 0)) {
            popupContent += `
                <hr style="margin: 10px 0;">
                <p style="color: #dc3545;"><strong>Ã¢Å¡Â Ã¯Â¸Â Elevadores Parados:</strong> ${props.nElevadorParado}</p>`;
        }
        if ((props.nElevadorParado && props.nElevadorParado > 0) || props.status && props.status.toLowerCase().includes('suspenso')) {    
            if (props.dataDeParada) {
                popupContent += `<p style="color: #dc3545;"><strong>Ã°Å¸â€œâ€¦ Data da Parada:</strong> ${props.dataDeParada}</p>`;
            }
            
            if (props.previsaoDeRetorno) {
                popupContent += `<p style="color: #dc3545;"><strong>Ã°Å¸â€â€ž PrevisÃ£o de Retorno:</strong> ${props.previsaoDeRetorno}</p>`;
            }
        }
        
        popupContent += '</div>';
        
        marker.bindPopup(popupContent, {maxWidth: 350});
        
        return marker;
    }

    // FunÃ§Ã£o para atualizar contador
    function atualizarContadorFiltros() {
        if (!dadosFiltrados.features) return;
        
        const totalElevadores = dadosFiltrados.features.reduce((total, feature) => {
            return total + feature.properties.qtd_elev;
        }, 0);

        const totalLocais = dadosFiltrados.features.length;

        const elemElevadores = document.getElementById('total-elevadores-filtro');
        const elemLocais = document.getElementById('total-locais-filtro');
        
        if (elemElevadores) elemElevadores.textContent = totalElevadores;
        if (elemLocais) elemLocais.textContent = totalLocais;

        const contadorElement = document.getElementById('contador-resultados');
        if (contadorElement) {
            if (totalElevadores === 0) {
                contadorElement.style.background = '#ffebee';
                contadorElement.style.color = '#c62828';
                contadorElement.style.borderColor = '#ef9a9a';
            } else {
                contadorElement.style.background = '#e8f5e8';
                contadorElement.style.color = '#2e7d32';
                contadorElement.style.borderColor = '#a5d6a7';
            }
        }
        
        console.log(`Ã°Å¸â€œÅ  Contador atualizado: ${totalElevadores} elevadores em ${totalLocais} locais`);
    }

    // FunÃ§Ã£o para atualizar estatÃƒÂ­sticas da dashboard - COM SITUAÃƒâ€¡ÃƒÆ’O
    function atualizarEstatisticasDashboard() {
        const tiposSelecionados = obterSelecionados('tipo');
        const regioesSelecionadas = obterSelecionados('regiao');
        const marcasSelecionadas = obterSelecionados('marca');
        const empresasSelecionadas = obterSelecionados('empresa');
        const situacoesSelecionadas = obterSelecionados('situacao'); // Ã°Å¸â€ â€¢ NOVO

        // Se nenhum filtro ativo, limpa todos os filtros
        if (tiposSelecionados.length === 0 && regioesSelecionadas.length === 0 && 
            marcasSelecionadas.length === 0 && empresasSelecionadas.length === 0 &&
            situacoesSelecionadas.length === 0) { // Ã°Å¸â€ â€¢ INCLUIR NOVO FILTRO
            console.log('Ã¢ÂÂ­Ã¯Â¸Â Nenhum filtro ativo, limpando todos os filtros');
            limparFiltros();
            return;
        }

        // Monta parÃƒÂ¢metros
        const params = new URLSearchParams();
        tiposSelecionados.forEach(tipo => params.append('tipo', tipo));
        regioesSelecionadas.forEach(regiao => params.append('regiao', regiao));
        marcasSelecionadas.forEach(marca => params.append('marca', marca));
        empresasSelecionadas.forEach(empresa => params.append('empresa', empresa));
        situacoesSelecionadas.forEach(situacao => params.append('situacao', situacao)); // Ã°Å¸â€ â€¢ NOVO

        console.log('Ã°Å¸â€œÂ¡ Fazendo requisiÃ§Ã£o para API...');

        // Mostra loading
        const loadingElement = document.getElementById('loading-stats');
        if (loadingElement) loadingElement.style.display = 'block';

        // Faz requisiÃ§Ã£o
        fetch('/api/filtrar?' + params.toString())
            .then(response => response.json())
            .then(data => {
                if (loadingElement) loadingElement.style.display = 'none';
                
                console.log('Ã°Å¸â€œÂ¡ Resposta da API:', data);
                
                if (data.success) {
                    // Atualiza cards
                    const elementos = {
                        'stat-predios': data.stats.total_predios,
                        'stat-elevadores': data.stats.total_elevadores,
                        'stat-cidades': data.stats.cidades,
                        'stat-regioes': data.stats.regioes,
                        'stat-ativos': data.stats.em_atividade,
                        'stat-suspensos': data.stats.suspensos,
                        'stat-parados': data.stats.elevadores_parados
                    };
                    
                    for (let id in elementos) {
                        const elem = document.getElementById(id);
                        if (elem) {
                            elem.textContent = elementos[id];
                            console.log(`Ã°Å¸â€œÅ  Card ${id} atualizado para:`, elementos[id]);
                        }
                    }

                    // Atualiza estatÃƒÂ­sticas detalhadas
                    mostrarEstatisticasDetalhadas(data.stats);
                }
            })
            .catch(error => {
                if (loadingElement) loadingElement.style.display = 'none';
                console.error('Ã¢ÂÅ’ Erro ao carregar estatÃƒÂ­sticas:', error);
            });
    }

    // FunÃ§Ã£o para mostrar estatÃƒÂ­sticas detalhadas
    function mostrarEstatisticasDetalhadas(stats) {
        const container = document.getElementById('stats-detalhadas');
        if (!container) return;
        
        let html = '<div class="row">';
        
        const categorias = [
            {titulo: 'Por Tipo', dados: stats.por_tipo},
            {titulo: 'Por RegiÃ£o', dados: stats.por_regiao},
            {titulo: 'Por Marca', dados: stats.por_marca},
            {titulo: 'Por Status', dados: stats.por_status}
        ];
        
        categorias.forEach(categoria => {
            html += `<div class="col-md-3"><h6>${categoria.titulo}</h6><ul class="list-unstyled">`;
            for (let [key, value] of Object.entries(categoria.dados)) {
                html += `<li><strong>${key}:</strong> ${value}</li>`;
            }
            html += '</ul></div>';
        });
        
        html += '</div>';
        container.innerHTML = html;
    }

    // FunÃ§ÃƒÂµes auxiliares
    function limparFiltros() {
        console.log('Ã°Å¸Â§Â¹ Limpando todos os filtros...');
        
        const checkboxes = document.querySelectorAll('input[type="checkbox"]');
        checkboxes.forEach(cb => cb.checked = false);
        
        dadosFiltrados = dadosOriginais;
        atualizarMapa();
        atualizarContadorFiltros();
        
        // Restaura valores originais dos cards
        const valoresOriginais = window.statsOriginais || {};
        for (let id in valoresOriginais) {
            const elem = document.getElementById(id);
            if (elem) elem.textContent = valoresOriginais[id];
        }
        
        const statsContainer = document.getElementById('stats-detalhadas');
        if (statsContainer) {
            statsContainer.innerHTML = '<p class="text-muted">Use os filtros no mapa para ver estatÃƒÂ­sticas especÃƒÂ­ficas.</p>';
        }
        
        console.log('Ã¢Å“â€¦ Filtros limpos');
    }

    function selecionarTodos() {
        console.log('Ã¢Å“â€¦ Selecionando todos os filtros...');
        
        const checkboxes = document.querySelectorAll('input[type="checkbox"]');
        checkboxes.forEach(cb => cb.checked = true);
        aplicarFiltros();
    }

    function toggleCategoria(categoria) {
        const div = document.getElementById(`filtros-${categoria}`);
        const button = document.getElementById(`toggle-${categoria}`);

        if (div && button) {
            if (div.style.display === 'none') {
                div.style.display = 'block';
                button.textContent = 'Ã¢Å¾â€“';
            } else {
                div.style.display = 'none';
                button.textContent = 'Ã¢Å¾â€¢';
            }
        }
    }

    function atualizarDados() {
        const btn = event.target;
        const originalText = btn.innerHTML;
        btn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Atualizando...';
        btn.disabled = true;
        
        fetch('/atualizar')
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert('Dados atualizados!\n' + data.message);
                    location.reload();
                } else {
                    alert('Erro: ' + data.message);
                }
            })
            .catch(error => {
                alert('Erro na requisiÃ§Ã£o');
            })
            .finally(() => {
                btn.innerHTML = originalText;
                btn.disabled = false;
            });
    }

    // Adiciona event listener para debug quando a pÃƒÂ¡gina carrega
    document.addEventListener('DOMContentLoaded', function() {
        console.log('Ã¯Â¿Â½Ã¯Â¿Â½ DOM carregado, aguardando inicializaÃ§Ã£o...');
    });
--- Fim do código: filtros_mapa.js ---

